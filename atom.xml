<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>好运来了</title>
  
  <subtitle>分享知识、记录点滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://haoyunlaile.github.io/"/>
  <updated>2020-05-28T16:00:00.000Z</updated>
  <id>http://haoyunlaile.github.io/</id>
  
  <author>
    <name>好运来了</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Istio 流量劫持原理</title>
    <link href="http://haoyunlaile.github.io/2020/istio/istio-traffic-routing/"/>
    <id>http://haoyunlaile.github.io/2020/istio/istio-traffic-routing/</id>
    <published>2020-05-28T16:00:00.000Z</published>
    <updated>2020-05-28T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>Istio 流量劫持的文章其实目前可以在servicemesher社区找到一篇非常详细的文章，可查阅：<a href="https://www.servicemesher.com/blog/sidecar-injection-iptables-and-traffic-routing/" target="_blank" rel="noopener">Istio 中的 Sidecar 注入及透明流量劫持过程详解</a>。特别是博主整理的那张“流量劫持示意图”，已经可以很清晰的看出来劫持流程。这里我借着那张图片解释一版该图片的文字版本。在开始文字版前如果对<code>iptables</code>命令如果不是非常了解的话建议先重点看下下面的两篇文章，深入浅出的解释了该命令的概念及用法：</p><ol><li><a href="http://www.zsythink.net/archives/1199" target="_blank" rel="noopener">iptables概念</a>  -  以通俗易懂的方式描述iptables的相关概念 </li><li><a href="https://www.frozentux.net/iptables-tutorial/cn/iptables-tutorial-cn-1.1.19.html" target="_blank" rel="noopener">iptables指南</a>  -  iptables命令用法指南</li></ol><p>这里引用iptables的一张报文流向图（版权归原博主所有）</p><p><img data-src="/images/iptables-routing.png" alt="iptables-routing"></p><blockquote><p>当客户端访问服务器的web服务时，客户端发送报文到网卡，而tcp/ip协议栈是属于内核的一部分，所以，客户端的信息会通过内核的TCP协议传输到用户空间中的web服务中，而此时，客户端报文的目标终点为web服务所监听的套接字（IP：Port）上，当web服务需要响应客户端请求时，web服务发出的响应报文的目标终点则为客户端，这个时候，web服务所监听的IP与端口反而变成了原点。 – 引用自 zsythink</p></blockquote><p>上面这部分描述相当重要，它是理解sidecar在进行流量劫持的基础之一。</p><p>下面我们分析下昨天<code>istio-init</code>启动时执行的<code>istio-iptables</code>命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">nsenter -t 8533 -n iptables -t nat -S</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 为PREROUTING/INPUT/OUTPUT/POSTROUTING链设置策略为接收数据包(ACCEPT)</span></span><br><span class="line">-P PREROUTING ACCEPT</span><br><span class="line">-P INPUT ACCEPT</span><br><span class="line">-P OUTPUT ACCEPT</span><br><span class="line">-P POSTROUTING ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自定义4个istio的规则链</span></span><br><span class="line">-N ISTIO_INBOUND</span><br><span class="line">-N ISTIO_IN_REDIRECT</span><br><span class="line">-N ISTIO_OUTPUT</span><br><span class="line">-N ISTIO_REDIRECT</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入PREROUTING链tcp协议请求全部定向至 ISTIO_INBOUND 自定义链进行规则匹配</span></span><br><span class="line">-A PREROUTING -p tcp -j ISTIO_INBOUND</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入OUTPUT链tcp协议请求全部定向至 ISTIO_OUTPUT 自定义链进行规则匹配</span></span><br><span class="line">-A OUTPUT -p tcp -j ISTIO_OUTPUT</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 入口</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tcp协议请求且请求端口为22/15090/15021/15020的请求停止执行当前链中的后续Rules，并执行下一个链</span></span><br><span class="line">-A ISTIO_INBOUND -p tcp -m tcp --dport 22 -j RETURN</span><br><span class="line">-A ISTIO_INBOUND -p tcp -m tcp --dport 15090 -j RETURN</span><br><span class="line">-A ISTIO_INBOUND -p tcp -m tcp --dport 15021 -j RETURN</span><br><span class="line">-A ISTIO_INBOUND -p tcp -m tcp --dport 15020 -j RETURN</span><br><span class="line"><span class="meta">#</span><span class="bash"> tcp协议且端口不是22/15090/15021/15020的请求全部定向至 ISTIO_IN_REDIRECT</span></span><br><span class="line">-A ISTIO_INBOUND -p tcp -j ISTIO_IN_REDIRECT</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将重定向于此的tcp协议请求流量全部重定向至15006端口(envoy入口流量端口)</span></span><br><span class="line">-A ISTIO_IN_REDIRECT -p tcp -j REDIRECT --to-ports 15006</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 出口</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  源IP地址为localhost且数据包出口为 ”lo“ 的流量都返回到它的调用点中的下一条链执行(1)</span></span><br><span class="line">-A ISTIO_OUTPUT -s 127.0.0.6/32 -o lo -j RETURN</span><br><span class="line"><span class="meta">#</span><span class="bash">  目的地非localhost，数据包出口为 ”lo“，是istio-proxy用户的流量转发至 ISTIO_REDIRECT (2)</span></span><br><span class="line">-A ISTIO_OUTPUT ! -d 127.0.0.1/32 -o lo -m owner --uid-owner 1337 -j ISTIO_IN_REDIRECT</span><br><span class="line"><span class="meta">#</span><span class="bash">  数据包出口为 ”lo“，非istio-proxy用户的流量都返回到它的调用点中的下一条链执行(1)</span></span><br><span class="line">-A ISTIO_OUTPUT -o lo -m owner ! --uid-owner 1337 -j RETURN</span><br><span class="line"><span class="meta">#</span><span class="bash">  istio-proxy 用户的流量都返回到它的调用点中的下一条链执行</span></span><br><span class="line">-A ISTIO_OUTPUT -m owner --uid-owner 1337 -j RETURN</span><br><span class="line"><span class="meta">#</span><span class="bash">  目的地非localhost，数据包出口为 ”lo“，是istio-proxy用户组的流量转发至 ISTIO_REDIRECT(2)</span></span><br><span class="line">-A ISTIO_OUTPUT ! -d 127.0.0.1/32 -o lo -m owner --gid-owner 1337 -j ISTIO_IN_REDIRECT</span><br><span class="line"><span class="meta">#</span><span class="bash">  数据包出口为 ”lo“ 且非istio-proxy用户组流量都返回到它的调用点中的下一条链执行(1)</span></span><br><span class="line">-A ISTIO_OUTPUT -o lo -m owner ! --gid-owner 1337 -j RETURN</span><br><span class="line"><span class="meta">#</span><span class="bash">  到 istio-proxy 用户组的流量都返回到它的调用点中的下一条链执行(1)</span></span><br><span class="line">-A ISTIO_OUTPUT -m owner --gid-owner 1337 -j RETURN</span><br><span class="line"><span class="meta">#</span><span class="bash">  所有目的地为localhost的流量都返回到它的调用点中的下一条链执行(1)</span></span><br><span class="line">-A ISTIO_OUTPUT -d 127.0.0.1/32 -j RETURN</span><br><span class="line"><span class="meta">#</span><span class="bash">  其他不满足上述rules的流量全部转发到 ISTIO_REDIRECT  (2)</span></span><br><span class="line">-A ISTIO_OUTPUT -j ISTIO_REDIRECT</span><br><span class="line"><span class="meta">#</span><span class="bash">  将重定向于此的tcp协议请求流量全部重定向至15001端口(envoy出口流量端口)</span></span><br><span class="line">-A ISTIO_REDIRECT -p tcp -j REDIRECT --to-ports 15001</span><br></pre></td></tr></table></figure><blockquote><p>-m = –match. istio-proxy 用户身份运行， uid-owner 1337 为用户ID / gid-owner 1337 为用户组，即 sidecar 所处的用户空间，这也是 istio- proxy 容器默认使用的用户。</p></blockquote><p>注意文中打括号的地方</p><p>(1) 代表流量会<strong>直接执行下一个拦截链</strong>，本文中下一个拦截链为<code>POSTROUTING</code>链</p><p>(2) 代表流量会<strong>被重定向至envoy出口流量端口</strong> </p><p>根据上面的规则小结一下：</p><blockquote><p>ISTIO_INBOUND 链：所有进入Pod但非指定端口(如22)的流量全部重定向至15006端口(envoy入口流量端口)进行拦截处理。</p><p>ISTIO_OUTPUT 链：所有流出Pod由 istio-proxy 用户空间发出且目的地不为localhost的流量全部重定向至15001端口（envoy出口流量端口），其他流量全部直接放行至下一个POSTROUTING链，不用被envoy拦截处理。</p></blockquote><p>其实仔细思考下可以看到，流量拦截主要发生在两个地方：</p><ol><li>用户请求到达Pod时对应流量会被拦截至sidecar进行处理，由sidecar请求业务服务</li><li>当业务服务响应用户请求时该响应再次被拦截至sidecar，由sidecar响应用户</li></ol><p>再看下iptables nat 表的规则</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">nsenter -t 8533 -n iptables -t nat -L -v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Chain PREROUTING (policy ACCEPT 3435 packets, 206K bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line"> 3435  206K ISTIO_INBOUND  tcp  --  any    any     anywhere             anywhere      (1)       </span><br><span class="line"></span><br><span class="line">Chain INPUT (policy ACCEPT 3435 packets, 206K bytes)                                  (5)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT 599 packets, 54757 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">   22  1320 ISTIO_OUTPUT  tcp  --  any    any     anywhere             anywhere            </span><br><span class="line"></span><br><span class="line">Chain POSTROUTING (policy ACCEPT 599 packets, 54757 bytes)                            (8)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line"></span><br><span class="line">Chain ISTIO_INBOUND (1 references)                                                    (2) </span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">    0     0 RETURN     tcp  --  any    any     anywhere             anywhere             tcp dpt:22</span><br><span class="line">    1    60 RETURN     tcp  --  any    any     anywhere             anywhere             tcp dpt:15090</span><br><span class="line"> 3434  206K RETURN     tcp  --  any    any     anywhere             anywhere             tcp dpt:15021</span><br><span class="line">    0     0 RETURN     tcp  --  any    any     anywhere             anywhere             tcp dpt:15020</span><br><span class="line">    0     0 ISTIO_IN_REDIRECT  tcp  --  any    any     anywhere             anywhere  (3)        </span><br><span class="line"></span><br><span class="line">Chain ISTIO_IN_REDIRECT (3 references)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">    0     0 REDIRECT   tcp  --  any    any     anywhere             anywhere             redir ports 15006                                                                     (4)</span><br><span class="line"></span><br><span class="line">Chain ISTIO_OUTPUT (1 references)                                                     (6)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">    0     0 RETURN     all  --  any    lo      127.0.0.6            anywhere            </span><br><span class="line">    0     0 ISTIO_IN_REDIRECT  all  --  any    lo      anywhere            !localhost            owner UID match 1337</span><br><span class="line">    0     0 RETURN     all  --  any    lo      anywhere             anywhere             ! owner UID match 1337</span><br><span class="line">   22  1320 RETURN     all  --  any    any     anywhere             anywhere             owner UID match 1337</span><br><span class="line">    0     0 ISTIO_IN_REDIRECT  all  --  any    lo      anywhere            !localhost            owner GID match 1337</span><br><span class="line">    0     0 RETURN     all  --  any    lo      anywhere             anywhere             ! owner GID match 1337</span><br><span class="line">    0     0 RETURN     all  --  any    any     anywhere             anywhere             owner GID match 1337</span><br><span class="line">    0     0 RETURN     all  --  any    any     anywhere             localhost           </span><br><span class="line">    0     0 ISTIO_REDIRECT  all  --  any    any     anywhere             anywhere            </span><br><span class="line"></span><br><span class="line">Chain ISTIO_REDIRECT (1 references)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">    0     0 REDIRECT   tcp  --  any    any     anywhere             anywhere             redir ports 15001</span><br></pre></td></tr></table></figure><p>让我们一起再来仔细看下面这个图片（版权归原博主所有），同步观察上面iptables chain的规则。这里的分析主要针对红色的数字一对一解释：</p><p><img data-src="/images/envoy-sidecar-traffic-interception-jimmysong-blog.png" alt="envoy-sidecar-traffic-interception"></p><ol><li><code>productpage</code> 服务对<code>reviews</code> 服务发送 TCP 连接请求 </li><li>请求进入<code>reviews</code>服务所在Pod内核空间，被netfilter拦截入口流量，经过<code>PREROUTING</code>链然后转发至<code>ISTIO_INBOUND</code>链</li><li>在被<code>ISTIO_INBOUND</code>链被这个规则<code>-A ISTIO_INBOUND -p tcp -j ISTIO_IN_REDIRECT</code>拦截再次转发至<code>ISTIO_IN_REDIRECT</code>链</li><li><strong><code>ISTIO_IN_REDIRECT</code>链直接重定向至 envoy监听的 <code>15006</code> 入口流量端口</strong></li><li>在 envoy 内部经过一系列入口流量治理动作后，发出TCP连接请求 <code>reviews</code> 服务，这一步对envoy来说属于出口流量，会被netfilter拦截转发至出口流量<code>OUTPUT</code>链</li><li><code>OUTPUT</code>链转发流量至<code>ISTIO_OUTPUT</code>链</li><li>目的地为localhost，不能匹配到转发规则链，直接<code>RETURN</code>到下一个链，即<code>POSTROUTING</code>链</li><li>sidecar发出的请求到达<code>reviews</code>服务<code>9080</code>端口</li><li><code>reviews</code>服务处理完业务逻辑后响应sidecar，这一步对<code>reviews</code>服务来说属于出口流量，再次被netfilter拦截转发至出口流量<code>OUTPUT</code>链</li><li><code>OUTPUT</code>链转发流量至<code>ISTIO_OUTPUT</code>链</li><li>发送非localhost请求且为<code>istio-proxy</code>用户空间的流量被转发至<code>ISTIO_REDIRECT</code>链</li><li><strong><code>ISTIO_REDIRECT</code>链直接重定向至 envoy监听的 <code>15001</code> 出口流量端口</strong></li><li>在 envoy 内部经过一系列出口流量治理动作后继续发送响应数据，响应时又会被netfilter拦截转发至出口流量<code>OUTPUT</code>链</li><li><code>OUTPUT</code>链转发流量至<code>ISTIO_OUTPUT</code>链</li><li>流量直接<code>RETURN</code>到下一个链，即<code>POSTROUTING</code>链 </li></ol><p>针对上文其实我还有两个疑问点，还请大家不吝指教：</p><ul><li>上面的理解没有写第<code>16</code>点，博主的图中的<code>16</code>点还会再进<code>ISTIO_REDIRECT</code>链，我们可以看到<code>ISTIO_REDIRECT</code>链中只有一个改写端口转发的规则，这样岂不是会进入一个死循环？或者是我还没有理解清楚</li><li>envoy 转发流量是不是自己新建立的tcp 连接请求还是通过修改请求报文地址来实现的。因为对c++了解有限，无法查阅其源码去一探究竟</li></ul><p>从整个流量拦截流程大家也可以看出，路径这么长， 在大并发场景下肯定会损失转发性能。目前业界有一些框架在试着缩短这个拦截路径，让大家拭目以待吧。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.servicemesher.com/blog/sidecar-injection-iptables-and-traffic-routing/" target="_blank" rel="noopener">https://www.servicemesher.com/blog/sidecar-injection-iptables-and-traffic-routing/</a> </p><p><a href="https://www.frozentux.net/iptables-tutorial/cn/iptables-tutorial-cn-1.1.19.html#REDIRECTTARGET" target="_blank" rel="noopener">https://www.frozentux.net/iptables-tutorial/cn/iptables-tutorial-cn-1.1.19.html#REDIRECTTARGET</a></p><p><a href="http://www.zsythink.net/archives/1199" target="_blank" rel="noopener">http://www.zsythink.net/archives/1199</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;开篇&quot;&gt;&lt;a href=&quot;#开篇&quot; class=&quot;headerlink&quot; title=&quot;开篇&quot;&gt;&lt;/a&gt;开篇&lt;/h2&gt;&lt;p&gt;Istio 流量劫持的文章其实目前可以在servicemesher社区找到一篇非常详细的文章，可查阅：&lt;a href=&quot;https://ww
      
    
    </summary>
    
    
      <category term="istio" scheme="http://haoyunlaile.github.io/categories/istio/"/>
    
    
      <category term="istio" scheme="http://haoyunlaile.github.io/tags/istio/"/>
    
  </entry>
  
  <entry>
    <title>Istio polit-agent &amp; envoy启动流程</title>
    <link href="http://haoyunlaile.github.io/2020/istio/istio-polit-agent-and-envoy-lifecycle/"/>
    <id>http://haoyunlaile.github.io/2020/istio/istio-polit-agent-and-envoy-lifecycle/</id>
    <published>2020-05-26T16:00:00.000Z</published>
    <updated>2020-05-26T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>通过上一篇  <a href="https://haoyunlaile.github.io/2020/istio/istio-sidecar-injector/">Istio Sidecar注入原理</a> 文章可以发现，在应用提交到kubernate部署时已经同时注入了Sidecar应用。</p><p>细心的话应该还可以发现，除了注入了<code>istio-proxy</code>应用外，另外还有注入一个<code>istio-init</code>的 <code>Init Containers</code>。接下来一起来看看在这两个注入的容器中分别都有做一些什么操作。</p><h2 id="istio-init"><a href="#istio-init" class="headerlink" title="istio-init"></a>istio-init</h2><p><code>istio-init</code> <a href="https://kubernetes.io/zh/docs/concepts/workloads/pods/init-containers/" target="_blank" rel="noopener">init 容器</a>用于设置 iptables 规则，以便将入站/出站流量通过 sidecar 代理。初始化容器与应用程序容器在以下方面有所不同：</p><ul><li>它在启动应用容器之前运行，并一直运行直至完成。</li><li>如果有多个初始化容器，则每个容器都应在启动下一个容器之前成功完成</li></ul><a id="more"></a><p>我们可以看下sleep对应的pod</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">kubectl</span> <span class="string">describe</span> <span class="string">pod</span> <span class="string">sleep-54f94cbff5-jmwtf</span></span><br><span class="line"><span class="attr">Name:</span>         <span class="string">sleep-54f94cbff5-jmwtf</span></span><br><span class="line"><span class="attr">Namespace:</span>    <span class="string">default</span></span><br><span class="line"><span class="attr">Priority:</span>     <span class="number">0</span></span><br><span class="line"><span class="attr">Node:</span>         <span class="string">minikube/172.17.0.3</span></span><br><span class="line"><span class="attr">Start Time:</span>   <span class="string">Wed,</span> <span class="number">27</span> <span class="string">May</span> <span class="number">2020</span> <span class="number">12</span><span class="string">:14:08</span> <span class="string">+0800</span></span><br><span class="line"><span class="attr">Labels:</span>       <span class="string">app=sleep</span></span><br><span class="line">              <span class="string">istio.io/rev=</span></span><br><span class="line">              <span class="string">pod-template-hash=54f94cbff5</span></span><br><span class="line">              <span class="string">security.istio.io/tlsMode=istio</span></span><br><span class="line"><span class="attr">Annotations:  sidecar.istio.io/interceptionMode:</span> <span class="string">REDIRECT</span></span><br><span class="line">              <span class="attr">sidecar.istio.io/status:</span></span><br><span class="line">                <span class="string">&#123;"version":"d36ff46d2def0caba37f639f09514b17c4e80078f749a46aae84439790d2b560","initContainers":["istio-init"],"containers":["istio-proxy"]...</span></span><br><span class="line">              <span class="attr">traffic.sidecar.istio.io/excludeInboundPorts:</span> <span class="number">15020</span></span><br><span class="line">              <span class="attr">traffic.sidecar.istio.io/includeOutboundIPRanges:</span> <span class="string">*</span></span><br><span class="line"><span class="attr">Status:</span>       <span class="string">Running</span></span><br><span class="line"><span class="attr">IP:</span>           <span class="number">172.18</span><span class="number">.0</span><span class="number">.11</span></span><br><span class="line"><span class="attr">IPs:</span></span><br><span class="line">  <span class="attr">IP:</span>           <span class="number">172.18</span><span class="number">.0</span><span class="number">.11</span></span><br><span class="line"><span class="attr">Controlled By:</span>  <span class="string">ReplicaSet/sleep-54f94cbff5</span></span><br><span class="line"><span class="attr">Init Containers:</span></span><br><span class="line">  <span class="attr">istio-init:</span></span><br><span class="line">    <span class="attr">Container ID:</span>  <span class="string">docker://f5c88555b666c18e5aa343b3f452355f96d66dc4268fa306f93432e0f98c3950</span></span><br><span class="line">    <span class="attr">Image:</span>         <span class="string">docker.io/istio/proxyv2:1.6.0</span></span><br><span class="line">    <span class="attr">Image ID:</span>      <span class="string">docker-pullable://istio/proxyv2@sha256:821cc14ad9a29a2cafb9e351d42096455c868f3e628376f1d0e1763c3ce72ca6</span></span><br><span class="line">    <span class="attr">Port:</span>          <span class="string">&lt;none&gt;</span></span><br><span class="line">    <span class="attr">Host Port:</span>     <span class="string">&lt;none&gt;</span></span><br><span class="line">    <span class="attr">Args:</span></span><br><span class="line">      <span class="string">istio-iptables</span></span><br><span class="line">      <span class="string">-p</span></span><br><span class="line">      <span class="number">15001</span></span><br><span class="line">      <span class="string">-z</span></span><br><span class="line">      <span class="number">15006</span></span><br><span class="line">      <span class="string">-u</span></span><br><span class="line">      <span class="number">1337</span></span><br><span class="line">      <span class="string">-m</span></span><br><span class="line">      <span class="string">REDIRECT</span></span><br><span class="line">      <span class="string">-i</span></span><br><span class="line">      <span class="string">*</span></span><br><span class="line">      <span class="string">-x</span></span><br><span class="line">      </span><br><span class="line">      <span class="string">-b</span></span><br><span class="line">      <span class="string">*</span></span><br><span class="line">      <span class="string">-d</span></span><br><span class="line">      <span class="number">15090</span><span class="string">,15021,15020</span></span><br><span class="line">    <span class="attr">State:</span>          <span class="string">Terminated</span></span><br><span class="line">      <span class="attr">Reason:</span>       <span class="string">Completed</span></span><br><span class="line">      <span class="attr">Exit Code:</span>    <span class="number">0</span></span><br><span class="line">      <span class="attr">Started:</span>      <span class="string">Wed,</span> <span class="number">27</span> <span class="string">May</span> <span class="number">2020</span> <span class="number">12</span><span class="string">:14:12</span> <span class="string">+0800</span></span><br><span class="line">      <span class="attr">Finished:</span>     <span class="string">Wed,</span> <span class="number">27</span> <span class="string">May</span> <span class="number">2020</span> <span class="number">12</span><span class="string">:14:13</span> <span class="string">+0800</span></span><br><span class="line">    <span class="attr">Ready:</span>          <span class="literal">True</span></span><br><span class="line">    <span class="attr">Restart Count:</span>  <span class="number">0</span></span><br><span class="line">    <span class="attr">Limits:</span></span><br><span class="line">      <span class="attr">cpu:</span>     <span class="string">100m</span></span><br><span class="line">      <span class="attr">memory:</span>  <span class="string">50Mi</span></span><br><span class="line">    <span class="attr">Requests:</span></span><br><span class="line">      <span class="attr">cpu:</span>     <span class="string">10m</span></span><br><span class="line">      <span class="attr">memory:</span>  <span class="string">10Mi</span></span><br><span class="line">    <span class="attr">Environment:</span></span><br><span class="line">      <span class="attr">DNS_AGENT:</span>  </span><br><span class="line">    <span class="attr">Mounts:</span></span><br><span class="line">      <span class="string">/var/run/secrets/kubernetes.io/serviceaccount</span> <span class="string">from</span> <span class="string">sleep-token-zq2wv</span> <span class="string">(ro)</span></span><br><span class="line"><span class="attr">Containers:</span></span><br><span class="line">  <span class="attr">sleep:</span></span><br><span class="line">    <span class="attr">Container ID:</span>  <span class="string">docker://a5437e12f6ea25d828531ba0dc4fab78374d5e9f746b6a199c4ed03b5d53c8f7</span></span><br><span class="line">    <span class="attr">Image:</span>         <span class="string">governmentpaas/curl-ssl</span></span><br><span class="line">    <span class="attr">Image ID:</span>      <span class="string">docker-pullable://governmentpaas/curl-ssl@sha256:b8d0e024380e2a02b557601e370be6ceb8b56b64e80c3ce1c2bcbd24f5469a23</span></span><br><span class="line">    <span class="attr">Port:</span>          <span class="string">&lt;none&gt;</span></span><br><span class="line">    <span class="attr">Host Port:</span>     <span class="string">&lt;none&gt;</span></span><br><span class="line">    <span class="attr">Command:</span></span><br><span class="line">      <span class="string">/bin/sleep</span></span><br><span class="line">      <span class="string">3650d</span></span><br><span class="line">    <span class="attr">State:</span>          <span class="string">Running</span></span><br><span class="line">      <span class="attr">Started:</span>      <span class="string">Wed,</span> <span class="number">27</span> <span class="string">May</span> <span class="number">2020</span> <span class="number">12</span><span class="string">:14:14</span> <span class="string">+0800</span></span><br><span class="line">    <span class="attr">Ready:</span>          <span class="literal">True</span></span><br><span class="line">    <span class="attr">Restart Count:</span>  <span class="number">0</span></span><br><span class="line">    <span class="attr">Environment:</span>    <span class="string">&lt;none&gt;</span></span><br><span class="line">    <span class="attr">Mounts:</span></span><br><span class="line">      <span class="string">/etc/sleep/tls</span> <span class="string">from</span> <span class="string">secret-volume</span> <span class="string">(rw)</span></span><br><span class="line">      <span class="string">/var/run/secrets/kubernetes.io/serviceaccount</span> <span class="string">from</span> <span class="string">sleep-token-zq2wv</span> <span class="string">(ro)</span></span><br><span class="line">  <span class="attr">istio-proxy:</span></span><br><span class="line">    <span class="attr">Container ID:</span>  <span class="string">docker://d03a43d3f257c057b664cf7ab03bcd301799a9e849da35fe54fdb0c9ea5516a4</span></span><br><span class="line">    <span class="attr">Image:</span>         <span class="string">docker.io/istio/proxyv2:1.6.0</span></span><br><span class="line">    <span class="attr">Image ID:</span>      <span class="string">docker-pullable://istio/proxyv2@sha256:821cc14ad9a29a2cafb9e351d42096455c868f3e628376f1d0e1763c3ce72ca6</span></span><br><span class="line">    <span class="attr">Port:</span>          <span class="number">15090</span><span class="string">/TCP</span></span><br><span class="line">    <span class="attr">Host Port:</span>     <span class="number">0</span><span class="string">/TCP</span></span><br><span class="line">    <span class="attr">Args:</span></span><br><span class="line">      <span class="string">proxy</span></span><br><span class="line">      <span class="string">sidecar</span></span><br><span class="line">      <span class="string">--domain</span></span><br><span class="line">      <span class="string">$(POD_NAMESPACE).svc.cluster.local</span></span><br><span class="line">      <span class="string">--serviceCluster</span></span><br><span class="line">      <span class="string">sleep.$(POD_NAMESPACE)</span></span><br><span class="line">      <span class="string">--proxyLogLevel=warning</span></span><br><span class="line">      <span class="string">--proxyComponentLogLevel=misc:error</span></span><br><span class="line">      <span class="string">--trust-domain=cluster.local</span></span><br><span class="line">      <span class="string">--concurrency</span></span><br><span class="line">      <span class="number">2</span></span><br><span class="line">    <span class="attr">State:</span>          <span class="string">Running</span></span><br><span class="line">      <span class="attr">Started:</span>      <span class="string">Wed,</span> <span class="number">27</span> <span class="string">May</span> <span class="number">2020</span> <span class="number">12</span><span class="string">:14:17</span> <span class="string">+0800</span></span><br><span class="line">    <span class="attr">Ready:</span>          <span class="literal">True</span></span><br><span class="line">    <span class="attr">Restart Count:</span>  <span class="number">0</span></span><br></pre></td></tr></table></figure><p> 从输出中可以看出，<code>istio-init</code> 容器的 <code>State</code> 为 <code>Terminated</code>，而 <code>Reason</code> 是 <code>Completed</code>。只有两个容器是运行的，主应用程序 <code>curl-ssl</code> 容器和 <code>istio-proxyv2</code> 容器。</p><p>让我们格式化<code>istio-init</code> 对应的 Args 参数，发现它执行了如下命令</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">istio-iptables -p <span class="number">15001</span> -z <span class="number">15006</span> -u <span class="number">1337</span> -m REDIRECT -i * -x  -b * -d <span class="number">15090</span>,<span class="number">15021</span>,<span class="number">15020</span></span><br></pre></td></tr></table></figure><p>可以看到 <code>istio-init</code> 容器的入口是 <code>istio-iptables</code> 命令行， 它是一个go编译出来的二进制文件，<strong>该二进制文件会调用iptables命令创建了一些列iptables规则来劫持Pod中的流量</strong>。命令行工具源码入口在 <code>tools/istio-iptables/main.go</code> 中。接下来我们看看它具体操作的iptables规则有哪些。</p><p>本文运行在<code>minikube</code>上，因为<code>istio-init</code>容器在初始化完成后就会退出，所以是没办法直接登入该容器的。但是它应用的iptables的规则会在同一Pod内其他容器上看到，我们可以登录该Pod其他容器查看对应的规则，执行命令如下：</p><p>进入 minikube 并切换为 root 用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">minikube ssh</span><br><span class="line">sudo -i</span><br></pre></td></tr></table></figure><p>查看<code>sleep应用</code>相关的容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker ps | grep sleep</span><br><span class="line"></span><br><span class="line">d03a43d3f257        istio&#x2F;proxyv2              &quot;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;pilo…&quot;   2 hours ago         Up 2 hours                              k8s_istio-proxy_slee-54f94cbff5-jmwtf_default_70c72535-cbfb-4201-af07-feb0948cc0c6_0</span><br><span class="line">a5437e12f6ea        8c797666f87b               &quot;&#x2F;bin&#x2F;sleep 3650d&quot;       2 hours ago         Up 2 hours                              k8s_sleep_sleep-54f94cbff5-jmwtf_default_70c72535-cbfb-4201-af07-feb0948cc0c6_0</span><br><span class="line">efdbb69b77c0        k8s.gcr.io&#x2F;pause:3.2       &quot;&#x2F;pause&quot;                 2 hours ago         Up 2 hours                              k8s_POD_sleep-54f94cbff5-jmwtf_default_70c72535-cbfb-4201-af07-feb0948cc0c6_0</span><br></pre></td></tr></table></figure><p>挑选上述容器中的其中一个，查看其进程ID，这里<code>8533</code>为其进程ID。这里如果直接进入其docker容器执行ssh是无法获取到其iptables规则的，因为其权限不足。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iptables -t<span class="built_in"> nat </span>-L -v</span><br><span class="line"></span><br><span class="line">iptables v1.6.1: can<span class="string">'t initialize iptables table `nat'</span>: Permission denied (you must be root)</span><br><span class="line">Perhaps iptables <span class="keyword">or</span> your kernel needs <span class="keyword">to</span> be upgraded.</span><br></pre></td></tr></table></figure><p>需要通过nsenter提权查看其对应规则，<a href="https://github.com/jpetazzo/nsenter" target="_blank" rel="noopener">nsenter命令详解</a>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">docker inspect efdbb69b77c0 --format '&#123;&#123; .State.Pid &#125;&#125;'</span><br><span class="line">8533</span><br><span class="line"></span><br><span class="line">nsenter -t 8533 -n iptables -t nat -S</span><br><span class="line"></span><br><span class="line">-P PREROUTING ACCEPT</span><br><span class="line">-P INPUT ACCEPT</span><br><span class="line">-P OUTPUT ACCEPT</span><br><span class="line">-P POSTROUTING ACCEPT</span><br><span class="line">-N ISTIO_INBOUND</span><br><span class="line">-N ISTIO_IN_REDIRECT</span><br><span class="line">-N ISTIO_OUTPUT</span><br><span class="line">-N ISTIO_REDIRECT</span><br><span class="line">-A PREROUTING -p tcp -j ISTIO_INBOUND</span><br><span class="line">-A OUTPUT -p tcp -j ISTIO_OUTPUT</span><br><span class="line">-A ISTIO_INBOUND -p tcp -m tcp --dport 22 -j RETURN</span><br><span class="line">-A ISTIO_INBOUND -p tcp -m tcp --dport 15090 -j RETURN</span><br><span class="line">-A ISTIO_INBOUND -p tcp -m tcp --dport 15021 -j RETURN</span><br><span class="line">-A ISTIO_INBOUND -p tcp -m tcp --dport 15020 -j RETURN</span><br><span class="line">-A ISTIO_INBOUND -p tcp -j ISTIO_IN_REDIRECT</span><br><span class="line">-A ISTIO_IN_REDIRECT -p tcp -j REDIRECT --to-ports 15006</span><br><span class="line">-A ISTIO_OUTPUT -s 127.0.0.6/32 -o lo -j RETURN</span><br><span class="line">-A ISTIO_OUTPUT ! -d 127.0.0.1/32 -o lo -m owner --uid-owner 1337 -j ISTIO_IN_REDIRECT</span><br><span class="line">-A ISTIO_OUTPUT -o lo -m owner ! --uid-owner 1337 -j RETURN</span><br><span class="line">-A ISTIO_OUTPUT -m owner --uid-owner 1337 -j RETURN</span><br><span class="line">-A ISTIO_OUTPUT ! -d 127.0.0.1/32 -o lo -m owner --gid-owner 1337 -j ISTIO_IN_REDIRECT</span><br><span class="line">-A ISTIO_OUTPUT -o lo -m owner ! --gid-owner 1337 -j RETURN</span><br><span class="line">-A ISTIO_OUTPUT -m owner --gid-owner 1337 -j RETURN</span><br><span class="line">-A ISTIO_OUTPUT -d 127.0.0.1/32 -j RETURN</span><br><span class="line">-A ISTIO_OUTPUT -j ISTIO_REDIRECT</span><br><span class="line">-A ISTIO_REDIRECT -p tcp -j REDIRECT --to-ports 15001</span><br></pre></td></tr></table></figure><p>查看 NAT 表中规则配置的详细信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">nsenter -t 8533 -n iptables -t nat -L -v</span><br><span class="line">Chain PREROUTING (policy ACCEPT 3435 packets, 206K bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line"> 3435  206K ISTIO_INBOUND  tcp  --  any    any     anywhere             anywhere            </span><br><span class="line"></span><br><span class="line">Chain INPUT (policy ACCEPT 3435 packets, 206K bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT 599 packets, 54757 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">   22  1320 ISTIO_OUTPUT  tcp  --  any    any     anywhere             anywhere            </span><br><span class="line"></span><br><span class="line">Chain POSTROUTING (policy ACCEPT 599 packets, 54757 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line"></span><br><span class="line">Chain ISTIO_INBOUND (1 references)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">    0     0 RETURN     tcp  --  any    any     anywhere             anywhere             tcp dpt:22</span><br><span class="line">    1    60 RETURN     tcp  --  any    any     anywhere             anywhere             tcp dpt:15090</span><br><span class="line"> 3434  206K RETURN     tcp  --  any    any     anywhere             anywhere             tcp dpt:15021</span><br><span class="line">    0     0 RETURN     tcp  --  any    any     anywhere             anywhere             tcp dpt:15020</span><br><span class="line">    0     0 ISTIO_IN_REDIRECT  tcp  --  any    any     anywhere             anywhere            </span><br><span class="line"></span><br><span class="line">Chain ISTIO_IN_REDIRECT (3 references)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">    0     0 REDIRECT   tcp  --  any    any     anywhere             anywhere             redir ports 15006</span><br><span class="line"></span><br><span class="line">Chain ISTIO_OUTPUT (1 references)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">    0     0 RETURN     all  --  any    lo      127.0.0.6            anywhere            </span><br><span class="line">    0     0 ISTIO_IN_REDIRECT  all  --  any    lo      anywhere            !localhost            owner UID match 1337</span><br><span class="line">    0     0 RETURN     all  --  any    lo      anywhere             anywhere             ! owner UID match 1337</span><br><span class="line">   22  1320 RETURN     all  --  any    any     anywhere             anywhere             owner UID match 1337</span><br><span class="line">    0     0 ISTIO_IN_REDIRECT  all  --  any    lo      anywhere            !localhost            owner GID match 1337</span><br><span class="line">    0     0 RETURN     all  --  any    lo      anywhere             anywhere             ! owner GID match 1337</span><br><span class="line">    0     0 RETURN     all  --  any    any     anywhere             anywhere             owner GID match 1337</span><br><span class="line">    0     0 RETURN     all  --  any    any     anywhere             localhost           </span><br><span class="line">    0     0 ISTIO_REDIRECT  all  --  any    any     anywhere             anywhere            </span><br><span class="line"></span><br><span class="line">Chain ISTIO_REDIRECT (1 references)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">    0     0 REDIRECT   tcp  --  any    any     anywhere             anywhere             redir ports 15001</span><br></pre></td></tr></table></figure><p> 关于 iptables 规则请参考 <a href="https://wangchujiang.com/linux-command/c/iptables.html" target="_blank" rel="noopener">iptables 命令</a> </p><p>回过头来看下对应go源码</p><p><code>tools/istio-iptables/pkg/constants/constants.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Constants for iptables commands</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">IPTABLES         = <span class="string">"iptables"</span></span><br><span class="line">IPTABLESRESTORE  = <span class="string">"iptables-restore"</span></span><br><span class="line">IPTABLESSAVE     = <span class="string">"iptables-save"</span></span><br><span class="line">IP6TABLES        = <span class="string">"ip6tables"</span></span><br><span class="line">IP6TABLESRESTORE = <span class="string">"ip6tables-restore"</span></span><br><span class="line">IP6TABLESSAVE    = <span class="string">"ip6tables-save"</span></span><br><span class="line">IP               = <span class="string">"ip"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// iptables tables</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">MANGLE = <span class="string">"mangle"</span></span><br><span class="line">NAT    = <span class="string">"nat"</span></span><br><span class="line">FILTER = <span class="string">"filter"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Built-in iptables chains</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">INPUT       = <span class="string">"INPUT"</span></span><br><span class="line">OUTPUT      = <span class="string">"OUTPUT"</span></span><br><span class="line">FORWARD     = <span class="string">"FORWARD"</span></span><br><span class="line">PREROUTING  = <span class="string">"PREROUTING"</span></span><br><span class="line">POSTROUTING = <span class="string">"POSTROUTING"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">......</span><br></pre></td></tr></table></figure><p><code>tools/istio-iptables/pkg/cmd/root.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rootCmd = &amp;cobra.Command&#123;</span><br><span class="line">Use:   <span class="string">"istio-iptables"</span>,</span><br><span class="line">Short: <span class="string">"Set up iptables rules for Istio Sidecar"</span>,</span><br><span class="line">Long:  <span class="string">"Script responsible for setting up port forwarding for Istio sidecar."</span>,</span><br><span class="line">Run: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">cfg := constructConfig()</span><br><span class="line"><span class="keyword">var</span> ext dep.Dependencies</span><br><span class="line"><span class="keyword">if</span> cfg.DryRun &#123;</span><br><span class="line">ext = &amp;dep.StdoutStubDependencies&#123;&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ext = &amp;dep.RealDependencies&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">iptConfigurator := NewIptablesConfigurator(cfg, ext)</span><br><span class="line"><span class="keyword">if</span> !cfg.SkipRuleApply &#123;</span><br><span class="line">            <span class="comment">// 规则执行的入口</span></span><br><span class="line">iptConfigurator.run()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(iptConfigurator *IptablesConfigurator)</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">iptConfigurator.logConfig()</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...此处省略1万字...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a new chain for redirecting outbound traffic to the common Envoy port.</span></span><br><span class="line"><span class="comment">// In both chains, '-j RETURN' bypasses Envoy and '-j ISTIOREDIRECT'</span></span><br><span class="line"><span class="comment">// redirects to Envoy.</span></span><br><span class="line">iptConfigurator.iptables.AppendRuleV4(</span><br><span class="line">constants.ISTIOREDIRECT, constants.NAT, <span class="string">"-p"</span>, constants.TCP, <span class="string">"-j"</span>, constants.REDIRECT, <span class="string">"--to-ports"</span>, iptConfigurator.cfg.ProxyPort)</span><br><span class="line"><span class="comment">// Use this chain also for redirecting inbound traffic to the common Envoy port</span></span><br><span class="line"><span class="comment">// when not using TPROXY.</span></span><br><span class="line"></span><br><span class="line">iptConfigurator.iptables.AppendRuleV4(constants.ISTIOINREDIRECT, constants.NAT, <span class="string">"-p"</span>, constants.TCP, <span class="string">"-j"</span>, constants.REDIRECT,</span><br><span class="line"><span class="string">"--to-ports"</span>, iptConfigurator.cfg.InboundCapturePort)</span><br><span class="line"></span><br><span class="line">iptConfigurator.handleInboundPortsInclude()</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> change the default behavior to not intercept any output - user may use http_proxy or another</span></span><br><span class="line"><span class="comment">// iptablesOrFail wrapper (like ufw). Current default is similar with 0.1</span></span><br><span class="line"><span class="comment">// Jump to the ISTIOOUTPUT chain from OUTPUT chain for all tcp traffic.</span></span><br><span class="line">iptConfigurator.iptables.AppendRuleV4(constants.OUTPUT, constants.NAT, <span class="string">"-p"</span>, constants.TCP, <span class="string">"-j"</span>, constants.ISTIOOUTPUT)</span><br><span class="line"><span class="comment">// Apply port based exclusions. Must be applied before connections back to self are redirected.</span></span><br><span class="line"><span class="keyword">if</span> iptConfigurator.cfg.OutboundPortsExclude != <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, port := <span class="keyword">range</span> split(iptConfigurator.cfg.OutboundPortsExclude) &#123;</span><br><span class="line">iptConfigurator.iptables.AppendRuleV4(constants.ISTIOOUTPUT, constants.NAT, <span class="string">"-p"</span>, constants.TCP, <span class="string">"--dport"</span>, port, <span class="string">"-j"</span>, constants.RETURN)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 127.0.0.6 is bind connect from inbound passthrough cluster</span></span><br><span class="line">iptConfigurator.iptables.AppendRuleV4(constants.ISTIOOUTPUT, constants.NAT, <span class="string">"-o"</span>, <span class="string">"lo"</span>, <span class="string">"-s"</span>, <span class="string">"127.0.0.6/32"</span>, <span class="string">"-j"</span>, constants.RETURN)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Skip redirection for Envoy-aware applications and</span></span><br><span class="line"><span class="comment">// container-to-container traffic both of which explicitly use</span></span><br><span class="line"><span class="comment">// localhost.</span></span><br><span class="line">iptConfigurator.iptables.AppendRuleV4(constants.ISTIOOUTPUT, constants.NAT, <span class="string">"-d"</span>, <span class="string">"127.0.0.1/32"</span>, <span class="string">"-j"</span>, constants.RETURN)</span><br><span class="line"><span class="comment">// Apply outbound IPv4 exclusions. Must be applied before inclusions.</span></span><br><span class="line"><span class="keyword">for</span> _, cidr := <span class="keyword">range</span> ipv4RangesExclude.IPNets &#123;</span><br><span class="line">iptConfigurator.iptables.AppendRuleV4(constants.ISTIOOUTPUT, constants.NAT, <span class="string">"-d"</span>, cidr.String(), <span class="string">"-j"</span>, constants.RETURN)</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...此处省略1万字...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 真正执行iptables的方法</span></span><br><span class="line">iptConfigurator.executeCommands()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>iptConfigurator.executeCommands()</code> 方法执行最终可以跟踪到<code>tools/istio-iptables/pkg/dependencies/implementation.go</code>中，可以看到就是利用的go 的命令行执行工具<code>exec.Command</code>来执行的os系统命令。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *RealDependencies)</span> <span class="title">execute</span><span class="params">(cmd <span class="keyword">string</span>, redirectStdout <span class="keyword">bool</span>, args ...<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">//执行真正的iptables命令</span></span><br><span class="line">externalCommand := exec.Command(cmd, args...)</span><br><span class="line">externalCommand.Stdout = os.Stdout</span><br><span class="line"><span class="comment">//TODO Check naming and redirection logic</span></span><br><span class="line"><span class="keyword">if</span> !redirectStdout &#123;</span><br><span class="line">externalCommand.Stderr = os.Stderr</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> externalCommand.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行此命令后，<code>istio-init</code>就完成了它的使命。</p><blockquote><p>iptables 进行流量拦截的部分单独一篇文章来写。</p></blockquote><h2 id="istio-proxy"><a href="#istio-proxy" class="headerlink" title="istio-proxy"></a>istio-proxy</h2><p>通过开篇我们可以看到还有<code>istio-proxy</code>这个容器</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Image:</span>         <span class="string">docker.io/istio/proxyv2:1.6.0</span></span><br><span class="line">   <span class="attr">Image ID:</span>      <span class="string">docker-pullable://istio/proxyv2@sha256:821cc14ad9a29a2cafb9e351d42096455c868f3e628376f1d0e1763c3ce72ca6</span></span><br><span class="line">   <span class="attr">Port:</span>          <span class="number">15090</span><span class="string">/TCP</span></span><br><span class="line">   <span class="attr">Host Port:</span>     <span class="number">0</span><span class="string">/TCP</span></span><br><span class="line">   <span class="attr">Args:</span></span><br><span class="line">     <span class="string">proxy</span></span><br><span class="line">     <span class="string">sidecar</span></span><br><span class="line">     <span class="string">--domain</span></span><br><span class="line">     <span class="string">$(POD_NAMESPACE).svc.cluster.local</span></span><br><span class="line">     <span class="string">--serviceCluster</span></span><br><span class="line">     <span class="string">sleep.$(POD_NAMESPACE)</span></span><br><span class="line">     <span class="string">--proxyLogLevel=warning</span></span><br><span class="line">     <span class="string">--proxyComponentLogLevel=misc:error</span></span><br><span class="line">     <span class="string">--trust-domain=cluster.local</span></span><br><span class="line">     <span class="string">--concurrency</span></span><br><span class="line">     <span class="number">2</span></span><br><span class="line">   <span class="attr">State:</span>          <span class="string">Running</span></span><br></pre></td></tr></table></figure><p>我们可以通过dockerhub 查看改镜像的内容 <a href="https://hub.docker.com/r/istio/proxyv2/tags" target="_blank" rel="noopener">https://hub.docker.com/r/istio/proxyv2/tags</a></p><p>这里我们一起看看对应镜像1.6.0版本对应的<a href="https://hub.docker.com/layers/istio/proxyv2/1.6.0/images/sha256-821cc14ad9a29a2cafb9e351d42096455c868f3e628376f1d0e1763c3ce72ca6?context=explore" target="_blank" rel="noopener">Dockerfile传送门</a> . 它在istio源码的位置在<code>pilot/docker/Dockerfile.proxyv2</code></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="bash"> file:c3e6bb316dfa6b81dd4478aaa310df532883b1c0a14edeec3f63d641980c1789 <span class="keyword">in</span> /</span></span><br><span class="line"></span><br><span class="line">/bin/sh -c [ -z <span class="string">"$(apt-get indextargets)"</span> ]</span><br><span class="line">/bin/sh -c mkdir -p /<span class="keyword">run</span><span class="bash">/systemd &amp;&amp; <span class="built_in">echo</span> <span class="string">'docker'</span> &gt; /run/systemd/container</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"/bin/bash"</span>]</span></span><br><span class="line"><span class="keyword">ENV</span> DEBIAN_FRONTEND=noninteractive</span><br><span class="line"></span><br><span class="line">// ...此处省略<span class="number">1</span>万字...</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> envoy /usr/<span class="built_in">local</span>/bin/envoy</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> pilot-agent /usr/<span class="built_in">local</span>/bin/pilot-agent</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"/usr/local/bin/pilot-agent"</span>]</span></span><br></pre></td></tr></table></figure><p>我们看到里面将<code>envoy</code>,<code>pilot-agent</code>程序添加进<code>proxyv2</code>容器，并执行<code>pilot-agent</code>作为启动命令，我们合并器执行参数，得出如下命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pilot-agent<span class="built_in"> proxy </span>sidecar --domain default.svc.cluster.local --serviceCluster sleep.default <span class="attribute">--proxyLogLevel</span>=warning <span class="attribute">--proxyComponentLogLevel</span>=misc:error <span class="attribute">--trust-domain</span>=cluster.local --concurrency 2</span><br></pre></td></tr></table></figure><p>那么我们接着看看该命令执行后会做什么操作呢？参考上面的操作步骤</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">minikube ssh</span><br><span class="line">sudo -i</span><br><span class="line">docker ps |grep sleep</span><br><span class="line"></span><br><span class="line">d03a43d3f257        istio/proxyv2              <span class="string">"/usr/local/bin/pilo…"</span>   <span class="number">3</span> hours ago         Up <span class="number">3</span> hours                              k8s_istio-proxy_slee<span class="number">-54f</span>94cbff5-jmwtf_default_70c72535-cbfb<span class="number">-4201</span>-af07-feb0948cc0c6_0</span><br><span class="line">a5437e12f6ea        <span class="number">8</span>c797666f87b               <span class="string">"/bin/sleep 3650d"</span>       <span class="number">3</span> hours ago         Up <span class="number">3</span> hours                              k8s_sleep_sleep<span class="number">-54f</span>94cbff5-jmwtf_default_70c72535-cbfb<span class="number">-4201</span>-af07-feb0948cc0c6_0</span><br><span class="line">efdbb69b77c0        k8s.gcr.io/pause:<span class="number">3.2</span>       <span class="string">"/pause"</span>                 <span class="number">3</span> hours ago         Up <span class="number">3</span> hours                              k8s_POD_sleep<span class="number">-54f</span>94cbff5-jmwtf_default_70c72535-cbfb<span class="number">-4201</span>-af07-feb0948cc0c6_0</span><br></pre></td></tr></table></figure><p>这次我们需要制定进入<code>proxyv2</code>容器<code>d03a43d3f257</code>并查看其内部运行的进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it d03a43d3f257 /bin/bash</span><br><span class="line">ps -ef | grep sleep</span><br><span class="line"></span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">istio-p+     1     0  0 04:14 ?        00:00:06 /usr/local/bin/pilot-agent proxy sidecar --domain default.svc.cluster.local --serviceCluster sleep.default --proxyLogLevel=warning --proxyComponentLogLevel=misc:error --trust-domain=cluster.local --concurrency 2</span><br><span class="line"></span><br><span class="line">istio-p+    17     1  0 04:14 ?        00:00:26 /usr/local/bin/envoy -c etc/istio/proxy/envoy-rev0.json --restart-epoch 0 --drain-time-s 45 --parent-shutdown-time-s 60 --service-cluster sleep.default --service-node sidecar~172.18.0.11~sleep-54f94cbff5-jmwtf.default~default.svc.cluster.local --max-obj-name-len 189 --local-address-ip-version v4 --log-format %Y-%m-%dT%T.%fZ.%l.envoy %n.%v -l warning --component-log-level misc:error --concurrency 2</span><br></pre></td></tr></table></figure><p>观察PID与PPID可以发现，<code>pilot-agent</code>执行后启动了<code>envoy</code>程序。</p><p><code>pilot-agent</code>命令源码入口在<code>pilot/cmd/pilot-agent/main.go</code>，该命令的用法可以查阅<a href="https://preliminary.istio.io/zh/docs/reference/commands/pilot-agent" target="_blank" rel="noopener">pilot-agent命令</a>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">proxyCmd = &amp;cobra.Command&#123;</span><br><span class="line">Use:   <span class="string">"proxy"</span>,</span><br><span class="line">Short: <span class="string">"Envoy proxy agent"</span>,</span><br><span class="line">RunE: <span class="function"><span class="keyword">func</span><span class="params">(c *cobra.Command, args []<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// ...此处省略1万字...</span></span><br><span class="line"></span><br><span class="line">proxyConfig, err := constructProxyConfig()</span><br><span class="line"><span class="keyword">if</span> out, err := gogoprotomarshal.ToYAML(&amp;proxyConfig); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Infof(<span class="string">"Failed to serialize to YAML: %v"</span>, err)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...此处省略1万字...</span></span><br><span class="line"></span><br><span class="line">envoyProxy := envoy.NewProxy(envoy.ProxyConfig&#123;</span><br><span class="line">Config:              proxyConfig,</span><br><span class="line">Node:                role.ServiceNode(),</span><br><span class="line">LogLevel:            proxyLogLevel,</span><br><span class="line">ComponentLogLevel:   proxyComponentLogLevel,</span><br><span class="line">PilotSubjectAltName: pilotSAN,</span><br><span class="line">MixerSubjectAltName: mixerSAN,</span><br><span class="line">NodeIPs:             role.IPAddresses,</span><br><span class="line">PodName:             podName,</span><br><span class="line">PodNamespace:        podNamespace,</span><br><span class="line">PodIP:               podIP,</span><br><span class="line">STSPort:             stsPort,</span><br><span class="line">ControlPlaneAuth:    proxyConfig.ControlPlaneAuthPolicy == meshconfig.AuthenticationPolicy_MUTUAL_TLS,</span><br><span class="line">DisableReportCalls:  disableInternalTelemetry,</span><br><span class="line">OutlierLogPath:      outlierLogPath,</span><br><span class="line">PilotCertProvider:   pilotCertProvider,</span><br><span class="line">ProvCert:            citadel.ProvCert,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">agent := envoy.NewAgent(envoyProxy, features.TerminationDrainDuration())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监控envoy启动直至启动成功，启动逻辑在`agent.Restart`中</span></span><br><span class="line">watcher := envoy.NewWatcher(tlsCerts, agent.Restart)</span><br><span class="line"><span class="keyword">go</span> watcher.Run(ctx)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> agent.Run(ctx)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>agent.Restart</code>方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *agent)</span> <span class="title">Restart</span><span class="params">(config <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="comment">// 同一时刻只允许一个envoy agent执行启动</span></span><br><span class="line">a.restartMutex.Lock()</span><br><span class="line"><span class="keyword">defer</span> a.restartMutex.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> reflect.DeepEqual(a.currentConfig, config) &#123;</span><br><span class="line"><span class="comment">// 如果配置文件没有发生变更那么什么都不用做，直接退出</span></span><br><span class="line">a.mutex.Unlock()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果监控到配置文件发生了变更，那么epoch版本号+1，创建新的envoy 实例</span></span><br><span class="line">epoch := a.currentEpoch + <span class="number">1</span></span><br><span class="line">log.Infof(<span class="string">"Received new config, creating new Envoy epoch %d"</span>, epoch)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 启动一个新的协程启动envoy</span></span><br><span class="line"><span class="keyword">go</span> a.runWait(config, epoch, abortCh)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>go a.runWait(config, epoch, abortCh)</code>方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *agent)</span> <span class="title">runWait</span><span class="params">(config <span class="keyword">interface</span>&#123;&#125;, epoch <span class="keyword">int</span>, abortCh &lt;-<span class="keyword">chan</span> error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 直接调用proxy实例启动，等待proxy启动完成</span></span><br><span class="line">err := a.proxy.Run(config, epoch, abortCh)</span><br><span class="line">a.proxy.Cleanup(epoch)</span><br><span class="line">a.statusCh &lt;- exitStatus&#123;epoch: epoch, err: err&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>proxy.Run</code> 方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *envoy)</span> <span class="title">Run</span><span class="params">(config <span class="keyword">interface</span>&#123;&#125;, epoch <span class="keyword">int</span>, abort &lt;-<span class="keyword">chan</span> error)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> fname <span class="keyword">string</span></span><br><span class="line"><span class="comment">// 如果启动参数指定了自定义的配置文件那么使用自定义的配置文件，否则使用默认的配置</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(e.Config.CustomConfigFile) &gt; <span class="number">0</span> &#123;</span><br><span class="line">fname = e.Config.CustomConfigFile</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 这里创建envoy 启动需要的/etc/istio/proxy/envoy-rev0.json 配置文件</span></span><br><span class="line">        <span class="comment">// 其中的0这个参数会随着重启的次数跟着+1变动，但仅仅是文件名发生变动，里面的配置内容还是一样</span></span><br><span class="line">out, err := bootstrap.New(bootstrap.Config&#123;</span><br><span class="line">Node:                e.Node,</span><br><span class="line">Proxy:               &amp;e.Config,</span><br><span class="line">PilotSubjectAltName: e.PilotSubjectAltName,</span><br><span class="line">MixerSubjectAltName: e.MixerSubjectAltName,</span><br><span class="line">LocalEnv:            os.Environ(),</span><br><span class="line">NodeIPs:             e.NodeIPs,</span><br><span class="line">PodName:             e.PodName,</span><br><span class="line">PodNamespace:        e.PodNamespace,</span><br><span class="line">PodIP:               e.PodIP,</span><br><span class="line">STSPort:             e.STSPort,</span><br><span class="line">ControlPlaneAuth:    e.ControlPlaneAuth,</span><br><span class="line">DisableReportCalls:  e.DisableReportCalls,</span><br><span class="line">OutlierLogPath:      e.OutlierLogPath,</span><br><span class="line">PilotCertProvider:   e.PilotCertProvider,</span><br><span class="line">ProvCert:            e.ProvCert,</span><br><span class="line">&#125;).CreateFileForEpoch(epoch)</span><br><span class="line">fname = out</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...此处省略1万字...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// envoy 启动需要的参数</span></span><br><span class="line">    <span class="comment">// 也就是 --restart-epoch 0 --drain-time-s 45 --parent-shutdown-time-s 60...这部分内容</span></span><br><span class="line">args := e.args(fname, epoch, istioBootstrapOverrideVar.Get())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 很熟悉的味道，调用系统命令启动envoy</span></span><br><span class="line">    <span class="comment">// e.Config.BinaryPath 参数值为 /usr/local/bin/envoy，</span></span><br><span class="line"><span class="comment">// 相关默认常量值可以查阅 pkg/config/constants/constants.go 这个源文件</span></span><br><span class="line">cmd := exec.Command(e.Config.BinaryPath, args...)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...此处省略1万字...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个启动过程其实挺复杂的，这里只是分析了最基础的启动envoy的流程。如果细看里面还包括</p><ol><li><p>SDS的启动</p></li><li><p>polit 度量指标服务启动</p></li><li><p>监控配置更新后热启动envoy的流程</p></li><li><p>收到系统kill命令优雅退出envoy的流程</p></li></ol><h2 id="应用容器"><a href="#应用容器" class="headerlink" title="应用容器"></a>应用容器</h2><p>至于应用容器的启动，该咋启动就咋启动，除了协议的限制外没有其他对Istio任何依赖，只要应用使用的是Istio支持的协议，都可以被Istio拦截并管理流量。这也就是Istio的强大之处。目前Istio支持为HTTP、gRPC、WebSocket 和 TCP 流量自动负载均衡。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p> <a href="https://istio.io/zh/blog/2019/data-plane-setup/#traffic-flow-from-application-container-to-sidecar-proxy" target="_blank" rel="noopener">https://istio.io/zh/blog/2019/data-plane-setup/#traffic-flow-from-application-container-to-sidecar-proxy</a></p><p> <a href="https://jimmysong.io/blog/sidecar-injection-iptables-and-traffic-routing/" target="_blank" rel="noopener">https://jimmysong.io/blog/sidecar-injection-iptables-and-traffic-routing/</a></p><p> <a href="https://preliminary.istio.io/zh/docs/reference/commands/pilot-agent/" target="_blank" rel="noopener">https://preliminary.istio.io/zh/docs/reference/commands/pilot-agent/</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;开篇&quot;&gt;&lt;a href=&quot;#开篇&quot; class=&quot;headerlink&quot; title=&quot;开篇&quot;&gt;&lt;/a&gt;开篇&lt;/h2&gt;&lt;p&gt;通过上一篇  &lt;a href=&quot;https://haoyunlaile.github.io/2020/istio/istio-sidecar-injector/&quot;&gt;Istio Sidecar注入原理&lt;/a&gt; 文章可以发现，在应用提交到kubernate部署时已经同时注入了Sidecar应用。&lt;/p&gt;
&lt;p&gt;细心的话应该还可以发现，除了注入了&lt;code&gt;istio-proxy&lt;/code&gt;应用外，另外还有注入一个&lt;code&gt;istio-init&lt;/code&gt;的 &lt;code&gt;Init Containers&lt;/code&gt;。接下来一起来看看在这两个注入的容器中分别都有做一些什么操作。&lt;/p&gt;
&lt;h2 id=&quot;istio-init&quot;&gt;&lt;a href=&quot;#istio-init&quot; class=&quot;headerlink&quot; title=&quot;istio-init&quot;&gt;&lt;/a&gt;istio-init&lt;/h2&gt;&lt;p&gt;&lt;code&gt;istio-init&lt;/code&gt; &lt;a href=&quot;https://kubernetes.io/zh/docs/concepts/workloads/pods/init-containers/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;init 容器&lt;/a&gt;用于设置 iptables 规则，以便将入站/出站流量通过 sidecar 代理。初始化容器与应用程序容器在以下方面有所不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它在启动应用容器之前运行，并一直运行直至完成。&lt;/li&gt;
&lt;li&gt;如果有多个初始化容器，则每个容器都应在启动下一个容器之前成功完成&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="istio" scheme="http://haoyunlaile.github.io/categories/istio/"/>
    
    
      <category term="istio" scheme="http://haoyunlaile.github.io/tags/istio/"/>
    
      <category term="polit-agent" scheme="http://haoyunlaile.github.io/tags/polit-agent/"/>
    
  </entry>
  
  <entry>
    <title>Istio Sidecar注入原理</title>
    <link href="http://haoyunlaile.github.io/2020/istio/istio-sidecar-injector/"/>
    <id>http://haoyunlaile.github.io/2020/istio/istio-sidecar-injector/</id>
    <published>2020-05-24T16:00:00.000Z</published>
    <updated>2020-05-24T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>简单来说，Sidecar 注入会<strong>将额外容器</strong>的配置<strong>添加到 Pod 模板中</strong>。这里特指将Envoy容器注应用所在Pod中。</p><p>Istio 服务网格目前所需的容器有：</p><p><code>istio-init</code> 用于设置 iptables 规则，以便将入站/出站流量通过 Sidecar 代理。</p><p>初始化容器与应用程序容器在以下方面有所不同：</p><ul><li>它在启动应用容器之前运行，并一直运行直至完成。</li><li>如果有多个初始化容器，则每个容器都应在启动下一个容器之前成功完成。</li></ul><p>因此，您可以看到，对于不需要成为实际应用容器一部分的设置或初始化作业来说，这种容器是多么的完美。在这种情况下，<code>istio-init</code> 就是这样做并设置了 <code>iptables</code> 规则。</p><p><code>istio-proxy</code> 这个容器是真正的 Sidecar 代理（基于 Envoy）。</p><a id="more"></a><p>下面的内容描述了向 pod 中注入 Istio Sidecar 的两种方法：</p><ol><li>使用 <code>istioctl</code>手动注入</li><li>启用 pod 所属命名空间的 Istio Sidecar 注入器自动注入。</li></ol><p>手动注入直接修改配置，如 deployment，并将代理配置注入其中。</p><p>当 pod 所属<code>namespace</code>启用自动注入后，自动注入器会使用准入控制器在创建 Pod 时自动注入代理配置。</p><p>通过应用 <code>istio-sidecar-injector</code> ConfigMap 中定义的模版进行注入。</p><h3 id="自动注入"><a href="#自动注入" class="headerlink" title="自动注入"></a>自动注入</h3><p>当你在一个<code>namespace</code>中设置了 <code>istio-injection=enabled</code> 标签，且 injection webhook 被启用后，任何新的 pod 都有将在创建时自动添加 Sidecar.  请注意，区别于手动注入，自动注入发生在 pod 层面。你将看不到 deployment 本身有任何更改 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kubectl label namespace default istio-inhection=enabled</span><br><span class="line">kubectl get namespace -L istio-injection</span><br><span class="line">NAME           STATUS    AGE       ISTIO-INJECTION</span><br><span class="line">default        Active    1h        enabled</span><br><span class="line">istio-system   Active    1h</span><br><span class="line">kube-public    Active    1h</span><br><span class="line">kube-system    Active    1h</span><br></pre></td></tr></table></figure><p>注入发生在 pod 创建时。杀死正在运行的 pod 并验证新创建的 pod 是否注入 sidecar。原来的 pod 具有 READY 为 1/1 的容器，注入 sidecar 后的 pod 则具有 READY 为 2/2 的容器 。</p><h4 id="自动注入原理"><a href="#自动注入原理" class="headerlink" title="自动注入原理"></a>自动注入原理</h4><p>自动注入是利用了k8s  Admission webhook 实现的。 Admission webhook 是一种用于接收准入请求并对其进行处理的 HTTP 回调机制， 它可以更改发送到 API 服务器的对象以执行自定义的设置默认值操作。 具体细节可以查阅 <a href="https://kubernetes.io/zh/docs/reference/access-authn-authz/extensible-admission-controllers/" target="_blank" rel="noopener">Admission webhook </a>文档。</p><p>istio 对应的istio-sidecar-injector webhook配置，默认会回调istio-sidecar-injector service的<code>/inject</code>地址。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">apiVersion:</span> admissionregistration.k8s.io/v1beta1</span><br><span class="line"><span class="symbol">kind:</span> MutatingWebhookConfiguration</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  name:</span> istio-sidecar-injector</span><br><span class="line"><span class="symbol">webhooks:</span></span><br><span class="line">  - name: sidecar-injector.istio.io</span><br><span class="line"><span class="symbol">    clientConfig:</span></span><br><span class="line"><span class="symbol">      service:</span></span><br><span class="line"><span class="symbol">        name:</span> istio-sidecar-injector</span><br><span class="line"><span class="symbol">        namespace:</span> istio-system</span><br><span class="line"><span class="symbol">        path:</span> <span class="string">"/inject"</span></span><br><span class="line"><span class="symbol">      caBundle:</span> $&#123;CA_BUNDLE&#125;</span><br><span class="line"><span class="symbol">    rules:</span></span><br><span class="line">      - operations: [ <span class="string">"CREATE"</span> ]</span><br><span class="line"><span class="symbol">        apiGroups:</span> [<span class="string">""</span>]</span><br><span class="line"><span class="symbol">        apiVersions:</span> [<span class="string">"v1"</span>]</span><br><span class="line"><span class="symbol">        resources:</span> [<span class="string">"pods"</span>]</span><br><span class="line"><span class="symbol">    namespaceSelector:</span></span><br><span class="line"><span class="symbol">      matchLabels:</span></span><br><span class="line">        istio-injection: enabled</span><br></pre></td></tr></table></figure><p>回调API入口代码在 <code>pkg/kube/inject/webhook.go</code> 中</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个用于自动注入sidecar的新实例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewWebhook</span><span class="params">(p WebhookParameters)</span> <span class="params">(*Webhook, error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...省略一万字...</span></span><br><span class="line"></span><br><span class="line">wh := &amp;Webhook&#123;</span><br><span class="line">Config:                 sidecarConfig,</span><br><span class="line">sidecarTemplateVersion: sidecarTemplateVersionHash(sidecarConfig.Template),</span><br><span class="line">meshConfig:             p.Env.Mesh(),</span><br><span class="line">configFile:             p.ConfigFile,</span><br><span class="line">valuesFile:             p.ValuesFile,</span><br><span class="line">valuesConfig:           valuesConfig,</span><br><span class="line">watcher:                watcher,</span><br><span class="line">healthCheckInterval:    p.HealthCheckInterval,</span><br><span class="line">healthCheckFile:        p.HealthCheckFile,</span><br><span class="line">env:                    p.Env,</span><br><span class="line">revision:               p.Revision,</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//api server 回调函数,监听/inject回调</span></span><br><span class="line">p.Mux.HandleFunc(<span class="string">"/inject"</span>, wh.serveInject)</span><br><span class="line">p.Mux.HandleFunc(<span class="string">"/inject/"</span>, wh.serveInject)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...省略一万字...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> wh, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>serveInject</code>逻辑</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(wh *Webhook)</span> <span class="title">serveInject</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// ...省略一万字...</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">var</span> reviewResponse *v1beta1.AdmissionResponse</span><br><span class="line">ar := v1beta1.AdmissionReview&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> _, _, err := deserializer.Decode(body, <span class="literal">nil</span>, &amp;ar); err != <span class="literal">nil</span> &#123;</span><br><span class="line">handleError(fmt.Sprintf(<span class="string">"Could not decode body: %v"</span>, err))</span><br><span class="line">reviewResponse = toAdmissionResponse(err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">//执行具体的inject逻辑</span></span><br><span class="line">reviewResponse = wh.inject(&amp;ar, path)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 响应inject sidecar后的内容给k8s api server</span></span><br><span class="line">response := v1beta1.AdmissionReview&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> reviewResponse != <span class="literal">nil</span> &#123;</span><br><span class="line">response.Response = reviewResponse</span><br><span class="line"><span class="keyword">if</span> ar.Request != <span class="literal">nil</span> &#123;</span><br><span class="line">response.Response.UID = ar.Request.UID</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...省略一万字...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注入逻辑实现</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(wh *Webhook)</span> <span class="title">inject</span><span class="params">(ar *v1beta1.AdmissionReview, path <span class="keyword">string</span>)</span> *<span class="title">v1beta1</span>.<span class="title">AdmissionResponse</span></span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...省略一万字...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// injectRequired判断是否有设置自动注入</span></span><br><span class="line"><span class="keyword">if</span> !injectRequired(ignoredNamespaces, wh.Config, &amp;pod.Spec, &amp;pod.ObjectMeta) &#123;</span><br><span class="line">log.Infof(<span class="string">"Skipping %s/%s due to policy check"</span>, pod.ObjectMeta.Namespace, podName)</span><br><span class="line">totalSkippedInjections.Increment()</span><br><span class="line"><span class="keyword">return</span> &amp;v1beta1.AdmissionResponse&#123;</span><br><span class="line">Allowed: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...省略一万字...</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 返回需要注入Pod的对象</span></span><br><span class="line">spec, iStatus, err := InjectionData(wh.Config.Template, wh.valuesConfig, wh.sidecarTemplateVersion, typeMetadata, deployMeta, &amp;pod.Spec, &amp;pod.ObjectMeta, wh.meshConfig, path) <span class="comment">// nolint: lll</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">handleError(fmt.Sprintf(<span class="string">"Injection data: err=%v spec=%v\n"</span>, err, iStatus))</span><br><span class="line"><span class="keyword">return</span> toAdmissionResponse(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行容器注入逻辑</span></span><br><span class="line">patchBytes, err := createPatch(&amp;pod, injectionStatus(&amp;pod), wh.revision, annotations, spec, deployMeta.Name, wh.meshConfig)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">handleError(fmt.Sprintf(<span class="string">"AdmissionResponse: err=%v spec=%v\n"</span>, err, spec))</span><br><span class="line"><span class="keyword">return</span> toAdmissionResponse(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reviewResponse := v1beta1.AdmissionResponse&#123;</span><br><span class="line">Allowed: <span class="literal">true</span>,</span><br><span class="line">Patch:   patchBytes,</span><br><span class="line">PatchType: <span class="function"><span class="keyword">func</span><span class="params">()</span> *<span class="title">v1beta1</span>.<span class="title">PatchType</span></span> &#123;</span><br><span class="line">pt := v1beta1.PatchTypeJSONPatch</span><br><span class="line"><span class="keyword">return</span> &amp;pt</span><br><span class="line">&#125;(),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;reviewResponse</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>injectRequired</code>函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">injectRequired</span><span class="params">(ignored []<span class="keyword">string</span>, config *Config, podSpec *corev1.PodSpec, metadata *metav1.ObjectMeta)</span> <span class="title">bool</span></span> &#123; </span><br><span class="line">    <span class="comment">// HostNetwork模式直接跳过注入</span></span><br><span class="line"><span class="keyword">if</span> podSpec.HostNetwork &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// k8s系统命名空间(kube-system/kube-public)跳过注入</span></span><br><span class="line"><span class="keyword">for</span> _, namespace := <span class="keyword">range</span> ignored &#123;</span><br><span class="line"><span class="keyword">if</span> metadata.Namespace == namespace &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">annos := metadata.GetAnnotations()</span><br><span class="line"><span class="keyword">if</span> annos == <span class="literal">nil</span> &#123;</span><br><span class="line">annos = <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">var</span> useDefault <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">var</span> inject <span class="keyword">bool</span></span><br><span class="line">    <span class="comment">// 优先判断是否申明了`sidecar.istio.io/inject` 注解，会覆盖命名配置</span></span><br><span class="line"><span class="keyword">switch</span> strings.ToLower(annos[annotation.SidecarInject.Name]) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"y"</span>, <span class="string">"yes"</span>, <span class="string">"true"</span>, <span class="string">"on"</span>:</span><br><span class="line">inject = <span class="literal">true</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">""</span>:</span><br><span class="line">        <span class="comment">// 使用命名空间配置</span></span><br><span class="line">useDefault = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定Pod不需要注入Sidecar的标签选择器</span></span><br><span class="line"><span class="keyword">if</span> useDefault &#123;</span><br><span class="line"><span class="keyword">for</span> _, neverSelector := <span class="keyword">range</span> config.NeverInjectSelector &#123;</span><br><span class="line">selector, err := metav1.LabelSelectorAsSelector(&amp;neverSelector)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> !selector.Empty() &amp;&amp; selector.Matches(labels.Set(metadata.Labels))</span><br><span class="line">                <span class="comment">// 设置不需要注入</span></span><br><span class="line">inject = <span class="literal">false</span></span><br><span class="line">useDefault = <span class="literal">false</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 总是将 sidecar 注入匹配标签选择器的 pod 中，而忽略全局策略</span></span><br><span class="line"><span class="keyword">if</span> useDefault &#123;</span><br><span class="line"><span class="keyword">for</span> _, alwaysSelector := <span class="keyword">range</span> config.AlwaysInjectSelector &#123;</span><br><span class="line">selector, err := metav1.LabelSelectorAsSelector(&amp;alwaysSelector)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Warnf(<span class="string">"Invalid selector for AlwaysInjectSelector: %v (%v)"</span>, alwaysSelector, err)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> !selector.Empty() &amp;&amp; selector.Matches(labels.Set(metadata.Labels))&#123;   <span class="comment">// 设置需要注入</span></span><br><span class="line">inject = <span class="literal">true</span></span><br><span class="line">useDefault = <span class="literal">false</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果都没有配置则使用默认注入策略</span></span><br><span class="line"><span class="keyword">var</span> required <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">switch</span> config.Policy &#123;</span><br><span class="line"><span class="keyword">default</span>: <span class="comment">// InjectionPolicyOff</span></span><br><span class="line">log.Errorf(<span class="string">"Illegal value for autoInject:%s, must be one of [%s,%s]. Auto injection disabled!"</span>,</span><br><span class="line">config.Policy, InjectionPolicyDisabled, InjectionPolicyEnabled)</span><br><span class="line">required = <span class="literal">false</span></span><br><span class="line"><span class="keyword">case</span> InjectionPolicyDisabled:</span><br><span class="line"><span class="keyword">if</span> useDefault &#123;</span><br><span class="line">required = <span class="literal">false</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">required = inject</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> InjectionPolicyEnabled:</span><br><span class="line"><span class="keyword">if</span> useDefault &#123;</span><br><span class="line">required = <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">required = inject</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> required</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面我们可以看出，是否注入Sidecar的优先级为</p><blockquote><p> Pod Annotations → NeverInjectSelector → AlwaysInjectSelector → Default Policy </p></blockquote><p><code>createPath</code>函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createPatch</span><span class="params">(pod *corev1.Pod, prevStatus *SidecarInjectionStatus, revision <span class="keyword">string</span>, annotations <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">sic *SidecarInjectionSpec, workloadName <span class="keyword">string</span>, mesh *meshconfig.MeshConfig)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> patch []rfc6902PatchOperation</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...省略一万字...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注入初始化启动容器</span></span><br><span class="line">patch = <span class="built_in">append</span>(patch, addContainer(pod.Spec.InitContainers, sic.InitContainers, <span class="string">"/spec/initContainers"</span>)...)</span><br><span class="line">    <span class="comment">// 注入Sidecar容器</span></span><br><span class="line">patch = <span class="built_in">append</span>(patch, addContainer(pod.Spec.Containers, sic.Containers, <span class="string">"/spec/containers"</span>)...)</span><br><span class="line">    <span class="comment">// 注入挂载卷</span></span><br><span class="line">patch = <span class="built_in">append</span>(patch, addVolume(pod.Spec.Volumes, sic.Volumes, <span class="string">"/spec/volumes"</span>)...)</span><br><span class="line">patch = <span class="built_in">append</span>(patch, addImagePullSecrets(pod.Spec.ImagePullSecrets, sic.ImagePullSecrets, <span class="string">"/spec/imagePullSecrets"</span>)...)</span><br><span class="line">    <span class="comment">// 注入新注解</span></span><br><span class="line">patch = <span class="built_in">append</span>(patch, updateAnnotation(pod.Annotations, annotations)...)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...省略一万字...</span></span><br><span class="line"><span class="keyword">return</span> json.Marshal(patch)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：可以看到，整个注入过程实际就是原本的Pod配置反解析成Pod对象，把需要注入的Yaml内容(如:Sidecar)反序列成对象然后append到对应Pod (如：Container)上，然后再把修改后的Pod重新解析成yaml 内容返回给k8s的api server，然后k8s 拿着修改后内容再将这两个容器调度到同一台机器进行部署，至此就完成了对应Sidecar的注入。</strong></p><h4 id="卸载-sidecar-自动注入器"><a href="#卸载-sidecar-自动注入器" class="headerlink" title="卸载 sidecar 自动注入器"></a>卸载 sidecar 自动注入器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete mutatingwebhookconfiguration istio-sidecar-injector</span><br><span class="line">kubectl -n istio-system delete service istio-sidecar-injector</span><br><span class="line">kubectl -n istio-system delete deployment istio-sidecar-injector</span><br><span class="line">kubectl -n istio-system delete serviceaccount istio-sidecar-injector-service-account</span><br><span class="line">kubectl delete clusterrole istio-sidecar-injector-istio-system</span><br><span class="line">kubectl delete clusterrolebinding istio-sidecar-injector-admin-role-binding-istio-system</span><br></pre></td></tr></table></figure><p>上面的命令不会从 pod 中移除注入的 sidecar。需要进行滚动更新或者直接删除对应的pod，并强制 deployment 重新创建新pod。 </p><h3 id="手动注入-sidecar"><a href="#手动注入-sidecar" class="headerlink" title="手动注入 sidecar"></a>手动注入 sidecar</h3><p>手动注入 deployment ，需要使用 使用 <code>istioctl kube-inject</code></p><p>使用手动注入前先关闭自动注入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl label namespace default istio-injection=disabled</span><br></pre></td></tr></table></figure><p>使用istioctl手动注入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">istioctl kube-inject -f samples/sleep/sleep.yaml | kubectl apply -f -</span><br></pre></td></tr></table></figure><p>我们可以查看对应的<code>deployment</code> 明细</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">describe deployment sleep</span><br><span class="line">Name:                   sleep</span><br><span class="line">Namespace:              default</span><br><span class="line">CreationTimestamp:      Wed, 27 May 2020 10:45:23 +0800</span><br><span class="line">Annotations:            deployment.kubernetes.io/revision: 1</span><br><span class="line">Selector:               app=sleep</span><br><span class="line">Pod Template:</span><br><span class="line">  Labels:           app=sleep</span><br><span class="line">                    istio.io/rev=</span><br><span class="line">                    security.istio.io/tlsMode=istio</span><br><span class="line">  Annotations:      sidecar.istio.io/interceptionMode: REDIRECT</span><br><span class="line">                    sidecar.istio.io/status:</span><br><span class="line">                      &#123;"version":"d36ff46d2def0caba37f639f09514b17c4e80078f749a46aae84439790d2b560","initContainers":["istio-init"],"containers":["istio-proxy"]...</span><br><span class="line">                    traffic.sidecar.istio.io/excludeInboundPorts: 15020</span><br><span class="line">                    traffic.sidecar.istio.io/includeOutboundIPRanges: *</span><br><span class="line">  Service Account:  sleep</span><br><span class="line">  Init Containers:</span><br><span class="line">   istio-init:</span><br><span class="line">    Image:      docker.io/istio/proxyv2:1.6.0</span><br><span class="line">    Port:       &lt;none&gt;</span><br><span class="line">    Host Port:  &lt;none&gt;</span><br><span class="line">    Args:</span><br><span class="line">      istio-iptables</span><br><span class="line">      -p</span><br><span class="line">      15001</span><br><span class="line">      -z</span><br><span class="line">      15006</span><br><span class="line">      -u</span><br><span class="line">      1337</span><br><span class="line">      -m</span><br><span class="line">      REDIRECT</span><br><span class="line">      -i</span><br><span class="line">      *</span><br><span class="line">      -x</span><br><span class="line">      </span><br><span class="line">      -b</span><br><span class="line">      *</span><br><span class="line">      -d</span><br><span class="line">      15090,15021,15020</span><br><span class="line">  Containers:</span><br><span class="line">   sleep:</span><br><span class="line">    Image:      governmentpaas/curl-ssl</span><br><span class="line">    Port:       &lt;none&gt;</span><br><span class="line">    Host Port:  &lt;none&gt;</span><br><span class="line">    Command:</span><br><span class="line">      /bin/sleep</span><br><span class="line">      3650d</span><br><span class="line">    Environment:  &lt;none&gt;</span><br><span class="line">    Mounts:</span><br><span class="line">      /etc/sleep/tls from secret-volume (rw)</span><br><span class="line">   istio-proxy:</span><br><span class="line">    Image:      docker.io/istio/proxyv2:1.6.0</span><br><span class="line">    Port:       15090/TCP</span><br><span class="line">    Host Port:  0/TCP</span><br><span class="line">    Args:</span><br><span class="line">      proxy</span><br><span class="line">      sidecar</span><br><span class="line">      --domain</span><br><span class="line">      $(POD_NAMESPACE).svc.cluster.local</span><br><span class="line">      --serviceCluster</span><br><span class="line">      sleep.$(POD_NAMESPACE)</span><br><span class="line">      --proxyLogLevel=warning</span><br><span class="line">      --proxyComponentLogLevel=misc:error</span><br><span class="line">      --trust-domain=cluster.local</span><br><span class="line">      --concurrency</span><br><span class="line">      2</span><br></pre></td></tr></table></figure><p>可以看到，相比原始的deployment.yaml文件多出了两个容器，这两个容器的作用后面单独写一篇文章来分析：</p><ol><li><code>Init Containers</code>下的 <code>istio-init</code></li><li><code>Containers</code>下的<code>istio-proxy</code></li></ol><p>上面两个容器的注入，<strong>默认情况下</strong>将使用集群内的配置，或者使用该配置的本地副本来完成注入。 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n istio-system get configmap istio-sidecar-injector -o=jsonpath='&#123;.data.config&#125;' &gt; inject-config.yaml</span><br><span class="line">kubectl -n istio-system get configmap istio-sidecar-injector -o=jsonpath='&#123;.data.values&#125;' &gt; inject-values.yaml</span><br><span class="line">kubectl -n istio-system get configmap istio -o=jsonpath='&#123;.data.mesh&#125;' &gt; mesh-config.yaml</span><br></pre></td></tr></table></figure><p> 指定输入文件，运行 <code>kube-inject</code> 并部署 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">istioctl kube-inject \</span><br><span class="line">    --injectConfigFile inject-config.yaml \</span><br><span class="line">    --meshConfigFile mesh-config.yaml \</span><br><span class="line">    --valuesFile inject-values.yaml \</span><br><span class="line">    --filename samples/sleep/sleep.yaml \</span><br><span class="line">    | kubectl apply -f -</span><br></pre></td></tr></table></figure><p> 验证 sidecar 已经被注入到 READY 列下 <code>2/2</code> 的 sleep pod 中 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod  -l app=sleep</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">sleep-64c6f57bc8-f5n4x   2/2     Running   0          24s</span><br></pre></td></tr></table></figure><p>查看对应pod中的容器</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="builtin-name">get</span> pods  -o <span class="attribute">jsonpath</span>=<span class="string">"&#123;.items[*].spec.containers[*].image&#125;"</span> | tr -s <span class="string">'[[:space:]]'</span> <span class="string">'\n'</span> | sort</span><br><span class="line">docker.io/istio/proxyv2:1.6.0</span><br><span class="line">governmentpaas/curl-ssl</span><br></pre></td></tr></table></figure><p>手动注入的代码入口在 <code>istioctl/cmd/kubeinject.go</code></p><p>手工注入跟自动注入还是有些差异的。手动注入是改变了<code>Deployment</code>。我们可以看下它具体做了哪些动作：</p><p><code>Deployment</code>注入前配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">sleep</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">sleep</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">sleep</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">sleep</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sleep</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">governmentpaas/curl-ssl</span></span><br><span class="line">        <span class="attr">command:</span> <span class="string">["/bin/sleep",</span> <span class="string">"3650d"</span><span class="string">]</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/etc/sleep/tls</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">secret-volume</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">secret-volume</span></span><br><span class="line">        <span class="attr">secret:</span></span><br><span class="line">          <span class="attr">secretName:</span> <span class="string">sleep-secret</span></span><br><span class="line">          <span class="attr">optional:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><code>Deployment</code>注入后配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deployment sleep -o yaml &gt; sleep.yaml</span><br><span class="line">less sleep.yaml</span><br></pre></td></tr></table></figure><p>这里只保留跟注入容器有关的部分内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">deployment.kubernetes.io/revision:</span> <span class="string">"1"</span></span><br><span class="line">  <span class="attr">generation:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">sleep</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">sleep</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">annotations:</span></span><br><span class="line">        <span class="attr">sidecar.istio.io/interceptionMode:</span> <span class="string">REDIRECT</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">sleep</span></span><br><span class="line">        <span class="attr">istio.io/rev:</span> <span class="string">""</span></span><br><span class="line">        <span class="attr">security.istio.io/tlsMode:</span> <span class="string">istio</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/bin/sleep</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">3650d</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">governmentpaas/curl-ssl</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">sleep</span></span><br><span class="line">        <span class="attr">resources:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">        <span class="attr">terminationMessagePath:</span> <span class="string">/dev/termination-log</span></span><br><span class="line">        <span class="attr">terminationMessagePolicy:</span> <span class="string">File</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/etc/sleep/tls</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">secret-volume</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">proxy</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">sidecar</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--domain</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">$(POD_NAMESPACE).svc.cluster.local</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--serviceCluster</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">sleep.$(POD_NAMESPACE)</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--proxyLogLevel=warning</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--proxyComponentLogLevel=misc:error</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--trust-domain=cluster.local</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--concurrency</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">"2"</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">docker.io/istio/proxyv2:1.6.0</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">istio-proxy</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">15090</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">http-envoy-prom</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line">      <span class="attr">initContainers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">istio-iptables</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-p</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">"15001"</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-z</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">"15006"</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-u</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">"1337"</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-m</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">REDIRECT</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-i</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">'*'</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-x</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">""</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-b</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">'*'</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-d</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">15090</span><span class="string">,15021,15020</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">DNS_AGENT</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">docker.io/istio/proxyv2:1.6.0</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">istio-init</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br></pre></td></tr></table></figure><p>可见新增了一个容器镜像</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">docker.io/istio/proxyv2:1.6.0</span></span><br></pre></td></tr></table></figure><p>那么注入的内容模板从哪里获取，这里有两个选项。</p><ol><li>—injectConfigFile  指定对应的注入文件</li><li>—injectConfigMapName  注入配置的 ConfigMap 名称 </li></ol><p>如果在操作时发现Sidecar没有注入成功可以根据注入的方式查看上面的注入流程来查找问题。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p> <a href="https://preliminary.istio.io/zh/docs/setup/additional-setup/sidecar-injection/#automatic-sidecar-injection" target="_blank" rel="noopener">https://preliminary.istio.io/zh/docs/setup/additional-setup/sidecar-injection/#automatic-sidecar-injection</a></p><p> <a href="https://kubernetes.io/zh/docs/reference/access-authn-authz/admission-controllers/" target="_blank" rel="noopener">https://kubernetes.io/zh/docs/reference/access-authn-authz/admission-controllers/</a> </p><p> <a href="https://istio.io/zh/docs/reference/commands/istioctl/#istioctl-kube-inject" target="_blank" rel="noopener">https://istio.io/zh/docs/reference/commands/istioctl/#istioctl-kube-inject</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;简单来说，Sidecar 注入会&lt;strong&gt;将额外容器&lt;/strong&gt;的配置&lt;strong&gt;添加到 Pod 模板中&lt;/strong&gt;。这里特指将Envoy容器注应用所在Pod中。&lt;/p&gt;
&lt;p&gt;Istio 服务网格目前所需的容器有：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;istio-init&lt;/code&gt; 用于设置 iptables 规则，以便将入站/出站流量通过 Sidecar 代理。&lt;/p&gt;
&lt;p&gt;初始化容器与应用程序容器在以下方面有所不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它在启动应用容器之前运行，并一直运行直至完成。&lt;/li&gt;
&lt;li&gt;如果有多个初始化容器，则每个容器都应在启动下一个容器之前成功完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，您可以看到，对于不需要成为实际应用容器一部分的设置或初始化作业来说，这种容器是多么的完美。在这种情况下，&lt;code&gt;istio-init&lt;/code&gt; 就是这样做并设置了 &lt;code&gt;iptables&lt;/code&gt; 规则。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;istio-proxy&lt;/code&gt; 这个容器是真正的 Sidecar 代理（基于 Envoy）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="istio" scheme="http://haoyunlaile.github.io/categories/istio/"/>
    
    
      <category term="istio" scheme="http://haoyunlaile.github.io/tags/istio/"/>
    
      <category term="sidecar" scheme="http://haoyunlaile.github.io/tags/sidecar/"/>
    
  </entry>
  
  <entry>
    <title>jaeger tracing</title>
    <link href="http://haoyunlaile.github.io/2020/microservice/jaeger-tracing/"/>
    <id>http://haoyunlaile.github.io/2020/microservice/jaeger-tracing/</id>
    <published>2020-05-08T12:00:00.000Z</published>
    <updated>2020-05-08T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p> <a href="https://www.jaegertracing.io/" target="_blank" rel="noopener">Jaeger</a>是 Uber 推出的一款开源分布式追踪系统（已从CNCF毕业），兼容 OpenTracing API。  它用于监视和诊断基于微服务的分布式系统，功能包括：</p><ol><li>分布式上下文传播 </li><li>分布式链路跟踪 </li><li>服务依赖分析 </li></ol><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="Trace列表视图"><a href="#Trace列表视图" class="headerlink" title="Trace列表视图"></a>Trace列表视图</h3><p><img data-src="/images/microservice/traces-jaeger-index.png" alt="traces-jaeger-index"></p><h3 id="Trace明细视图"><a href="#Trace明细视图" class="headerlink" title="Trace明细视图"></a>Trace明细视图</h3><p><img data-src="/images/microservice/trace-detail-jaeger.png" alt="trace-detail-jaeger"></p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><ul><li>基于Go实现</li><li>数据支持多种类型的后端存储<ul><li><a href="https://www.jaegertracing.io/docs/1.17/deployment/#cassandra" target="_blank" rel="noopener">Cassandra 3.4+</a></li><li><a href="https://www.jaegertracing.io/docs/1.17/deployment/#elasticsearch" target="_blank" rel="noopener">Elasticsearch 5.x, 6.x, 7.x</a></li><li><a href="https://www.jaegertracing.io/docs/1.17/deployment/#kafka" target="_blank" rel="noopener">Kafka</a></li><li>memory storage</li></ul></li></ul><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p> Jaeger可以作为单个进程进行部署，也可以作为可扩展的分布式系统进行部署。</p><p> Jaeger 主要由以下几部分组成，架构非常清晰： </p><ul><li>Jaeger Client - 为不同语言实现了符合 OpenTracing 标准的 SDK。应用程序通过 API 写入数据，client library 把 trace 信息按照应用程序指定的采样策略传递给 jaeger-agent.</li><li>Agent - 它是一个监听在 UDP 端口上接收 span 数据的网络守护进程，它会将数据批量发送给 collector。它被设计成一个基础组件，部署到所有的宿主机上。Agent 将 client library 和 collector 解耦，为 client library 屏蔽了路由和发现 collector 的细节.</li><li>Collector - 接收 jaeger-agent 发送来的数据，然后将数据写入后端存储。Collector 被设计成无状态的组件，因此您可以同时运行任意数量的 jaeger-collector。 当前，我们的管道会分析数据并为其建立索引，执行任何转换并最终存储它们。  Jaeger的存储设备是一个可插拔组件，目前支持  Cassandra, Elasticsearch and Kafka 存储.</li><li>Query - 接收查询请求，然后从后端存储系统中检索 trace 并通过 UI 进行展示.</li><li>Ingester - 后端存储被设计成一个可插拔的组件，支持将数据写入 Cassandra, Elasticsearch.</li></ul><p>Jaeger包含两种架构方案：</p><p><strong>一、收集器数据直接写入存储架构（tracing数据直接写入存储)</strong></p><p><img data-src="/images/microservice/architecture-v1.png" alt="architecture-v1"></p><p><strong>二、收集器数据缓冲后异步写入存储架构（tracing数据通过kafka缓冲后再异步消费写入存储)</strong> </p><p><img data-src="/images/microservice/architecture-v2.png" alt="architecture-v2"></p><blockquote><p>个人推荐采用第二种架构方式部署</p></blockquote><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>为了快速搭建Jaeger环境，这里安装基于Helm部署（需要先搭建 Kubernetes 集群），可以参考前面写的文章来搭建。从  <a href="https://github.com/jaegertracing/helm-charts/tree/master/charts/jaeger" target="_blank" rel="noopener">https://github.com/jaegertracing/helm-charts/tree/master/charts/jaeger</a>  这里可以找到详细的部署流程，可以一步一步跟着执行部署。这里采用 <strong>收集器数据直接写入存储架构</strong> 部署</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm install jaeger jaegertracing/jaeger</span><br></pre></td></tr></table></figure><blockquote><p>官方推荐使用jaeger-operator来部署，可参考： <a href="https://www.jaegertracing.io/docs/1.17/operator/" target="_blank" rel="noopener">https://www.jaegertracing.io/docs/1.17/operator/</a> </p></blockquote><p>安装完成后查看服务状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl get svc</span><br><span class="line">NAME               TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                                         AGE</span><br><span class="line">jaeger-agent       ClusterIP   10.97.3.215      &lt;none&gt;        5775/UDP,6831/UDP,6832/UDP,5778/TCP,14271/TCP   7m45s</span><br><span class="line">jaeger-cassandra   ClusterIP   None             &lt;none&gt;        7000/TCP,7001/TCP,7199/TCP,9042/TCP,9160/TCP    7m45s</span><br><span class="line">jaeger-collector   ClusterIP   10.111.141.231   &lt;none&gt;        14250/TCP,14267/TCP,14268/TCP,14269/TCP         7m45s</span><br><span class="line">jaeger-query       ClusterIP   10.97.103.64     &lt;none&gt;        80/TCP,16687/TCP                                7m45s</span><br></pre></td></tr></table></figure><p>要访问jaeger ui 需要查看<code>jaeger-query</code>项目对外暴露的端口，我们看到通过helm安装，我们采用的默认配置，这里的网络类型是<code>ClusterIP</code>,如果想外网访问可以先临时改成<code>NodePort</code>的方式，执行如下命令编辑对应配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl edit service jaeger-query</span><br></pre></td></tr></table></figure><p>找到最下面的<code>ClusterIP</code>改成<code>NodePort</code>保存即可，保存后会自动生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl get svc</span><br><span class="line">NAME               TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                                         AGE</span><br><span class="line">jaeger-agent       ClusterIP   10.97.3.215      &lt;none&gt;        5775/UDP,6831/UDP,6832/UDP,5778/TCP,14271/TCP   8m38s</span><br><span class="line">jaeger-cassandra   ClusterIP   None             &lt;none&gt;        7000/TCP,7001/TCP,7199/TCP,9042/TCP,9160/TCP    8m38s</span><br><span class="line">jaeger-collector   ClusterIP   10.111.141.231   &lt;none&gt;        14250/TCP,14267/TCP,14268/TCP,14269/TCP         8m38s</span><br><span class="line">jaeger-query       NodePort    10.97.103.64     &lt;none&gt;        80:31067/TCP,16687:31381/TCP                    8m38s</span><br></pre></td></tr></table></figure><p>可以发现现在<code>jaeger-query</code>的网络类型已经变成了<code>NodePort</code>，现在可以通过流量访问Jaeger Ui了</p><p>这里的地址是 <a href="http://47.57.100.110:31067/search" target="_blank" rel="noopener">http://47.57.100.110:31067/search</a>  (注意，IP地址及端口根据自己控制台的实际输出填入就行)</p><p>进入页面后可以到刚才部署的UI界面，并查询<code>jaeger-query</code>项目本身的tracing信息。</p><p>我在列表页面找到一个trace_id: <code>73c00aa573bf1ed0</code> 临时保存下它，后面分析会用到，打开后界面如下。</p><p><img data-src="/images/microservice/jaeger-query-ui.png" alt="jaeger-query-ui"></p><h2 id="traces存储结构"><a href="#traces存储结构" class="headerlink" title="traces存储结构"></a>traces存储结构</h2><p>我们可以在jaeger源代码中找到后端cassandra的存储结构，具体信息可以看这里，位置比较隐蔽：</p><p><a href="https://github.com/jaegertracing/jaeger/blob/master/plugin/storage/cassandra/schema/v001.cql.tmpl" target="_blank" rel="noopener">https://github.com/jaegertracing/jaeger/blob/master/plugin/storage/cassandra/schema/v001.cql.tmpl</a> </p><p>不过我们可以登录Pod查看创建后的数据结构信息(cassandra)。让我们一探究竟，首先登入cassandra对应的docker镜像，然后通过cql 连接cassandra集群。</p><blockquote><p>如果对cql不了解的可以查看对应文档： <a href="https://cassandra.apache.org/doc/latest/cql/" target="_blank" rel="noopener">https://cassandra.apache.org/doc/latest/cql/</a> </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl exec -it jaeger-cassandra-0 --container jaeger-cassandra -- /bin/bash</span><br><span class="line">cqlsh</span><br><span class="line"></span><br><span class="line">Connected to jaeger at 127.0.0.1:9042.</span><br><span class="line">[cqlsh 5.0.1 | Cassandra 3.11.6 | CQL spec 3.4.4 | Native protocol v4]</span><br><span class="line">Use HELP for help.</span><br></pre></td></tr></table></figure><p>进入对应的space，查看里面对应的表信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cqlsh&gt; desc keyspaces;    #查看有哪些keyspaces</span><br><span class="line"></span><br><span class="line">jaeger_v1_test  system_auth  system_distributed</span><br><span class="line">system_schema   system       system_traces     </span><br><span class="line"></span><br><span class="line">cqlsh&gt; use jaeger_v1_test;   #切换到jaeger对应的space</span><br><span class="line">cqlsh:jaeger_v1_test&gt; desc tables;    #查看jaeger space下面的表信息</span><br><span class="line"></span><br><span class="line">service_name_index  service_names  service_operation_index  traces            </span><br><span class="line">dependencies_v2     tag_index      duration_index           operation_names_v2</span><br></pre></td></tr></table></figure><p>我们可以一个一个的表信息查看。这里我们主要看下保存我们trace信息的表 <code>service_name_index</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">cqlsh:jaeger_v1_test&gt; desc traces;</span><br><span class="line"></span><br><span class="line">CREATE TABLE jaeger_v1_test.traces (</span><br><span class="line">    trace_id blob,</span><br><span class="line">    span_id bigint,</span><br><span class="line">    span_hash bigint,</span><br><span class="line">    duration bigint,</span><br><span class="line">    flags int,</span><br><span class="line">    logs list&lt;frozen&lt;log&gt;&gt;,</span><br><span class="line">    operation_name text,</span><br><span class="line">    parent_id bigint,</span><br><span class="line">    process frozen&lt;process&gt;,</span><br><span class="line">    refs list&lt;frozen&lt;span_ref&gt;&gt;,</span><br><span class="line">    start_time bigint,</span><br><span class="line">    tags list&lt;frozen&lt;keyvalue&gt;&gt;,</span><br><span class="line">    PRIMARY KEY (trace_id, span_id, span_hash)</span><br><span class="line">) WITH CLUSTERING ORDER BY (span_id ASC, span_hash ASC)</span><br><span class="line">    AND bloom_filter_fp_chance &#x3D; 0.01</span><br><span class="line">    AND caching &#x3D; &#123;&#39;keys&#39;: &#39;ALL&#39;, &#39;rows_per_partition&#39;: &#39;NONE&#39;&#125;</span><br><span class="line">    AND comment &#x3D; &#39;&#39;</span><br><span class="line">    AND compaction &#x3D; &#123;&#39;class&#39;: &#39;org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy&#39;, &#39;compaction_window_size&#39;: &#39;1&#39;, &#39;compaction_window_unit&#39;: &#39;HOURS&#39;, &#39;max_threshold&#39;: &#39;32&#39;, &#39;min_threshold&#39;: &#39;4&#39;&#125;</span><br><span class="line">    AND compression &#x3D; &#123;&#39;chunk_length_in_kb&#39;: &#39;64&#39;, &#39;class&#39;: &#39;org.apache.cassandra.io.compress.LZ4Compressor&#39;&#125;</span><br><span class="line">    AND crc_check_chance &#x3D; 1.0</span><br><span class="line">    AND dclocal_read_repair_chance &#x3D; 0.0</span><br><span class="line">    AND default_time_to_live &#x3D; 172800</span><br><span class="line">    AND gc_grace_seconds &#x3D; 10800</span><br><span class="line">    AND max_index_interval &#x3D; 2048</span><br><span class="line">    AND memtable_flush_period_in_ms &#x3D; 0</span><br><span class="line">    AND min_index_interval &#x3D; 128</span><br><span class="line">    AND read_repair_chance &#x3D; 0.0</span><br><span class="line">    AND speculative_retry &#x3D; &#39;NONE&#39;;</span><br></pre></td></tr></table></figure><p>还记得我们开始保存的那个trace_id: <code>73c00aa573bf1ed0</code> 么，现在我们可以在这个表中查看它是如何保存的，我们可以使用下面的cql进行查询，查询前需要对界面上的trace_id进行补位填充<code>0x0000000000000000</code> ，这里一定要注意，最终在cql里面查询的trace_id为：<code>0x000000000000000073c00aa573bf1ed0</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cqlsh:jaeger_v1_test&gt;</span> <span class="string">expand</span> <span class="string">on;</span></span><br><span class="line"><span class="string">Now</span> <span class="string">Expanded</span> <span class="string">output</span> <span class="string">is</span> <span class="string">enabled</span></span><br><span class="line"><span class="string">cqlsh:jaeger_v1_test&gt;</span> <span class="string">select</span> <span class="string">*</span> <span class="string">from</span> <span class="string">traces</span> <span class="string">where</span> <span class="string">trace_id=0x000000000000000073c00aa573bf1ed0;</span></span><br><span class="line"></span><br><span class="line"><span class="string">@</span> <span class="string">Row</span> <span class="number">1</span></span><br><span class="line"><span class="stringspan></span><br><span class="line"> <span class="string">trace_id</span>       <span class="string">|</span> <span class="number">0x000000000000000073c00aa573bf1ed0</span></span><br><span class="line"> <span class="string">span_id</span>        <span class="string">|</span> <span class="number">2300299680491247480</span></span><br><span class="line"> <span class="string">span_hash</span>      <span class="string">|</span> <span class="number">1417161953846781420</span></span><br><span class="line"> <span class="string">duration</span>       <span class="string">|</span> <span class="number">204491</span></span><br><span class="line"> <span class="string">flags</span>          <span class="string">|</span> <span class="number">1</span></span><br><span class="line"> <span class="string">logs</span>           <span class="string">|</span> <span class="string">[&#123;ts:</span> <span class="number">1589363774632310</span><span class="string">,</span> <span class="attr">fields:</span> <span class="string">[&#123;key:</span> <span class="string">'event'</span><span class="string">,</span> <span class="attr">value_type:</span> <span class="string">'string'</span><span class="string">,</span> <span class="attr">value_string:</span> <span class="string">'searching'</span><span class="string">,</span> <span class="attr">value_bool:</span> <span class="literal">False</span><span class="string">,</span> <span class="attr">value_long:</span> <span class="number">0</span><span class="string">,</span> <span class="attr">value_double:</span> <span class="number">0</span><span class="string">,</span> <span class="attr">value_binary:</span> <span class="literal">null</span><span class="string">&#125;,</span> <span class="string">&#123;key:</span> <span class="string">'trace_id'</span><span class="string">,</span> <span class="attr">value_type:</span> <span class="string">'string'</span><span class="string">,</span> <span class="attr">value_string:</span> <span class="string">'4c423cfb69721367'</span><span class="string">,</span> <span class="attr">value_bool:</span> <span class="literal">False</span><span class="string">,</span> <span class="attr">value_long:</span> <span class="number">0</span><span class="string">,</span> <span class="attr">value_double:</span> <span class="number">0</span><span class="string">,</span> <span class="attr">value_binary:</span> <span class="literal">null</span><span class="string">&#125;]&#125;]</span></span><br><span class="line"> <span class="string">operation_name</span> <span class="string">|</span> <span class="string">readTrace</span></span><br><span class="line"> <span class="string">parent_id</span>      <span class="string">|</span> <span class="number">0</span></span><br><span class="line"> <span class="string">process</span>        <span class="string">|</span> <span class="string">&#123;service_name:</span> <span class="string">'jaeger-query'</span><span class="string">,</span> <span class="attr">tags:</span> <span class="string">[&#123;key:</span> <span class="string">'jaeger.version'</span><span class="string">,</span> <span class="attr">value_type:</span> <span class="string">'string'</span><span class="string">,</span> <span class="attr">value_string:</span> <span class="string">'Go-2.22.1'</span><span class="string">,</span> <span class="attr">value_bool:</span> <span class="literal">False</span><span class="string">,</span> <span class="attr">value_long:</span> <span class="number">0</span><span class="string">,</span> <span class="attr">value_double:</span> <span class="number">0</span><span class="string">,</span> <span class="attr">value_binary:</span> <span class="literal">null</span><span class="string">&#125;,</span> <span class="string">&#123;key:</span> <span class="string">'hostname'</span><span class="string">,</span> <span class="attr">value_type:</span> <span class="string">'string'</span><span class="string">,</span> <span class="attr">value_string:</span> <span class="string">'jaeger-query-55c77745b5-ff8tt'</span><span class="string">,</span> <span class="attr">value_bool:</span> <span class="literal">False</span><span class="string">,</span> <span class="attr">value_long:</span> <span class="number">0</span><span class="string">,</span> <span class="attr">value_double:</span> <span class="number">0</span><span class="string">,</span> <span class="attr">value_binary:</span> <span class="literal">null</span><span class="string">&#125;,</span> <span class="string">&#123;key:</span> <span class="string">'ip'</span><span class="string">,</span> <span class="attr">value_type:</span> <span class="string">'string'</span><span class="string">,</span> <span class="attr">value_string:</span> <span class="string">'192.168.61.148'</span><span class="string">,</span> <span class="attr">value_bool:</span> <span class="literal">False</span><span class="string">,</span> <span class="attr">value_long:</span> <span class="number">0</span><span class="string">,</span> <span class="attr">value_double:</span> <span class="number">0</span><span class="string">,</span> <span class="attr">value_binary:</span> <span class="literal">null</span><span class="string">&#125;,</span> <span class="string">&#123;key:</span> <span class="string">'client-uuid'</span><span class="string">,</span> <span class="attr">value_type:</span> <span class="string">'string'</span><span class="string">,</span> <span class="attr">value_string:</span> <span class="string">'363a86b295da9842'</span><span class="string">,</span> <span class="attr">value_bool:</span> <span class="literal">False</span><span class="string">,</span> <span class="attr">value_long:</span> <span class="number">0</span><span class="string">,</span> <span class="attr">value_double:</span> <span class="number">0</span><span class="string">,</span> <span class="attr">value_binary:</span> <span class="literal">null</span><span class="string">&#125;]&#125;</span></span><br><span class="line"> <span class="string">refs</span>           <span class="string">|</span> <span class="string">[&#123;ref_type:</span> <span class="string">'child-of'</span><span class="string">,</span> <span class="attr">trace_id:</span> <span class="number">0x000000000000000073c00aa573bf1ed0</span><span class="string">,</span> <span class="attr">span_id:</span> <span class="number">8340678215617945296</span><span class="string">&#125;]</span></span><br><span class="line"> <span class="string">start_time</span>     <span class="string">|</span> <span class="number">1589363774627367</span></span><br><span class="line"> <span class="string">tags</span>           <span class="string">|</span> <span class="string">[&#123;key:</span> <span class="string">'db.statement'</span><span class="string">,</span> <span class="attr">value_type:</span> <span class="string">'string'</span><span class="string">,</span> <span class="attr">value_string:</span> <span class="string">'\n\t\tSELECT trace_id, span_id, parent_id, operation_name, flags, start_time, duration, tags, logs, refs, process\n\t\tFROM traces\n\t\tWHERE trace_id = ?'</span><span class="string">,</span> <span class="attr">value_bool:</span> <span class="literal">False</span><span class="string">,</span> <span class="attr">value_long:</span> <span class="number">0</span><span class="string">,</span> <span class="attr">value_double:</span> <span class="number">0</span><span class="string">,</span> <span class="attr">value_binary:</span> <span class="literal">null</span><span class="string">&#125;,</span> <span class="string">&#123;key:</span> <span class="string">'db.type'</span><span class="string">,</span> <span class="attr">value_type:</span> <span class="string">'string'</span><span class="string">,</span> <span class="attr">value_string:</span> <span class="string">'cassandra'</span><span class="string">,</span> <span class="attr">value_bool:</span> <span class="literal">False</span><span class="string">,</span> <span class="attr">value_long:</span> <span class="number">0</span><span class="string">,</span> <span class="attr">value_double:</span> <span class="number">0</span><span class="string">,</span> <span class="attr">value_binary:</span> <span class="literal">null</span><span class="string">&#125;,</span> <span class="string">&#123;key:</span> <span class="string">'component'</span><span class="string">,</span> <span class="attr">value_type:</span> <span class="string">'string'</span><span class="string">,</span> <span class="attr">value_string:</span> <span class="string">'gocql'</span><span class="string">,</span> <span class="attr">value_bool:</span> <span class="literal">False</span><span class="string">,</span> <span class="attr">value_long:</span> <span class="number">0</span><span class="string">,</span> <span class="attr">value_double:</span> <span class="number">0</span><span class="string">,</span> <span class="attr">value_binary:</span> <span class="literal">null</span><span class="string">&#125;,</span> <span class="string">&#123;key:</span> <span class="string">'internal.span.format'</span><span class="string">,</span> <span class="attr">value_type:</span> <span class="string">'string'</span><span class="string">,</span> <span class="attr">value_string:</span> <span class="string">'proto'</span><span class="string">,</span> <span class="attr">value_bool:</span> <span class="literal">False</span><span class="string">,</span> <span class="attr">value_long:</span> <span class="number">0</span><span class="string">,</span> <span class="attr">value_double:</span> <span class="number">0</span><span class="string">,</span> <span class="attr">value_binary:</span> <span class="literal">null</span><span class="string">&#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="string">此处省略4个Row....</span></span><br><span class="line"><span class="string">(5</span> <span class="string">rows)</span></span><br></pre></td></tr></table></figure><p>因为找到这个trace_id包含了5个span，所以这里查询出来了5条记录，可以通过这段文本及上面的图片进行一一观察，可以发现存储结构还是非常清晰的，UI界面需要展示的信息基本都可以很容易从里面取到。</p><p>我们再回过头来看看jaeger client 库thrift的结构（源码见：jaeger.thrift）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"># 标签</span><br><span class="line">struct Tag &#123;</span><br><span class="line">  1: required string  key</span><br><span class="line">  2: required TagType vType</span><br><span class="line">  3: optional string  vStr</span><br><span class="line">  4: optional double  vDouble</span><br><span class="line">  5: optional bool    vBool</span><br><span class="line">  6: optional i64     vLong</span><br><span class="line">  7: optional binary  vBinary</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 日志</span><br><span class="line">struct Log &#123;</span><br><span class="line">  1: required i64       timestamp</span><br><span class="line">  2: required list&lt;Tag&gt; fields</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enum SpanRefType &#123; CHILD_OF, FOLLOWS_FROM &#125;</span><br><span class="line"></span><br><span class="line"># Span 之间的关系</span><br><span class="line">struct SpanRef &#123;</span><br><span class="line">  1: required SpanRefType refType</span><br><span class="line">  2: required i64         traceIdLow</span><br><span class="line">  3: required i64         traceIdHigh</span><br><span class="line">  4: required i64         spanId</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Span</span><br><span class="line">struct Span &#123;</span><br><span class="line">  1:  required i64           traceIdLow   # the least significant 64 bits of a traceID</span><br><span class="line">  2:  required i64           traceIdHigh  # the most significant 64 bits of a traceID; 0 when only 64bit IDs are used</span><br><span class="line">  3:  required i64           spanId       # unique span id (only unique within a given trace)</span><br><span class="line">  4:  required i64           parentSpanId # since nearly all spans will have parents spans, CHILD_OF refs do not have to be explicit</span><br><span class="line">  5:  required string        operationName</span><br><span class="line">  6:  optional list&lt;SpanRef&gt; references   # causal references to other spans</span><br><span class="line">  7:  required i32           flags        # a bit field used to propagate sampling decisions. 1 signifies a SAMPLED span, 2 signifies a DEBUG span.</span><br><span class="line">  8:  required i64           startTime</span><br><span class="line">  9:  required i64           duration</span><br><span class="line">  10: optional list&lt;Tag&gt;     tags</span><br><span class="line">  11: optional list&lt;Log&gt;     logs</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本上可以跟存储的数据结构一一对应上。</p><h2 id="采样策略"><a href="#采样策略" class="headerlink" title="采样策略"></a>采样策略</h2><p>Jaeger客户端支持4种采样策略，分别是：</p><ol><li><strong>Constant</strong> (<code>sampler.type=const</code>)  采样率的可设置的值为 0 和 1，分别表示关闭采样和全部采样 </li><li><strong>Probabilistic</strong> (<code>sampler.type=probabilistic</code>)   按照概率采样，取值可在 0 至 1 之间，例如设置为 0.5 的话意为只对 50% 的请求采样 </li><li><strong>Rate Limiting</strong> (<code>sampler.type=ratelimiting</code>)  设置每秒的采样次数上限 。 例如，当sampler.param = 2.0时，它将以每秒2条迹线的速率对请求进行采样。 </li><li><strong>Remote</strong> (<code>sampler.type=remote</code>)  此为默认策略。 采样遵循远程设置，取值的含义和 <code>probabilistic</code> 相同，都意为采样的概率，只不过设置为 <code>remote</code> 后，Client 会从 Jaeger Agent 中动态获取采样率设置。 </li></ol><p>为了最大程度地减少开销，Jaeger默认采用 0.1% 的采样策略采集数据 (1000次里面采集1次)。</p><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>所有Jaeger客户端库都支持OpenTracing API ，下面这些都是官方支持的客户端库</p><table><thead><tr><th align="left">语言</th><th align="left">GitHub Repo</th></tr></thead><tbody><tr><td align="left">Go</td><td align="left"><a href="https://github.com/jaegertracing/jaeger-client-go" target="_blank" rel="noopener">jaegertracing/jaeger-client-go</a></td></tr><tr><td align="left">Java</td><td align="left"><a href="https://github.com/jaegertracing/jaeger-client-java" target="_blank" rel="noopener">jaegertracing/jaeger-client-java</a></td></tr><tr><td align="left">Node.js</td><td align="left"><a href="https://github.com/jaegertracing/jaeger-client-node" target="_blank" rel="noopener">jaegertracing/jaeger-client-node</a></td></tr><tr><td align="left">Python</td><td align="left"><a href="https://github.com/jaegertracing/jaeger-client-python" target="_blank" rel="noopener">jaegertracing/jaeger-client-python</a></td></tr><tr><td align="left">C++</td><td align="left"><a href="https://github.com/jaegertracing/jaeger-client-cpp" target="_blank" rel="noopener">jaegertracing/jaeger-client-cpp</a></td></tr><tr><td align="left">C#</td><td align="left"><a href="https://github.com/jaegertracing/jaeger-client-csharp" target="_blank" rel="noopener">jaegertracing/jaeger-client-csharp</a></td></tr></tbody></table><p>其他语言的客户端库还在开发中，具体进展可以来这里查看 <a href="https://github.com/jaegertracing/jaeger/issues/366" target="_blank" rel="noopener">issue #366</a> </p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.jaegertracing.io/docs/" target="_blank" rel="noopener">https://www.jaegertracing.io/docs/</a> </p><p><a href="https://github.com/jaegertracing/jaeger" target="_blank" rel="noopener">https://github.com/jaegertracing/jaeger</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt; &lt;a href=&quot;https://www.jaegertracing.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener
      
    
    </summary>
    
    
      <category term="微服务" scheme="http://haoyunlaile.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="opentracing" scheme="http://haoyunlaile.github.io/tags/opentracing/"/>
    
      <category term="jaeger" scheme="http://haoyunlaile.github.io/tags/jaeger/"/>
    
  </entry>
  
  <entry>
    <title>分布式跟踪系统</title>
    <link href="http://haoyunlaile.github.io/2020/microservice/opentracing/"/>
    <id>http://haoyunlaile.github.io/2020/microservice/opentracing/</id>
    <published>2020-05-07T11:00:00.000Z</published>
    <updated>2020-05-07T11:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>当我们把系统微服务化后，想查询某个接口一次请求的耗时信息，需要登录多台机器查询相关日志才行。 如下图所示架构，当对应服务集群化部署后，想要查询到某一次请求信息更是难上加难。那我们有什么办法可以解决这个问题么？</p><p>答案当然是有的，分布式追踪系统正是为了解决这个问题而生。分布式跟踪为描述和分析跨进程事务提供了一种解决方案。如<a href="https://research.google/pubs/pub36356/" target="_blank" rel="noopener">Google Dapper论文</a> (业界的分布式追踪系统基本都是以这篇论文为基础进行实现)所述，分布式跟踪的一些使用场景包括：</p><ol><li>异常检测，问题诊断</li><li>分布式系统内各组件的调用情况 </li><li>性能/延迟优化 </li><li>服务依赖性分析 </li></ol><p><img data-src="/images/microservice/micro-arch.jpg" alt="micro-arch"></p><a id="more"></a><p>因为业界分布式追踪系统众多，各家Api定义上有一定的差异，为了统一标准，于是OpenTracing出现了。</p><blockquote><p>什么是OpenTracing? </p><p>OpenTracing通过提供平台无关、厂商无关的API，使得开发人员能够方便的添加或更换追踪系统的实现。OpenTracing正在为全球的分布式追踪，提供统一的概念和数据标准。 </p><p>除了OpenTracing外，还有OpenCensus 这个项目，OpenCensus 由google发起，它除了包含tracing外，还包含度量（metrics）。</p><p>两套分布式追踪框架，都有很多追随者，都想统一对方，但最终结果是对峙不下，最后两个组织一起组队新建了OpenTelemetry项目。项目的第一宗旨就是：兼容OpenTracing和OpenSensus。对于使用OpenTracing或OpenSensus的应用不需要重新改动就可以接入OpenTelemetry。</p></blockquote><h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><p><img data-src="/images/microservice/tracing-mental-model.png" alt="tracing-mental-model"></p><p>从应用角度看分布式追踪系统所处的位置</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>先来看两张效果图感受一下（以jaeger ui为例）</p><p><img data-src="/images/microservice/traces-jaeger-index.png" alt="traces-jaeger-index"></p><p><img data-src="/images/microservice/trace-detail-jaeger.png" alt="trace-detail-jaeger"></p><h2 id="语义"><a href="#语义" class="headerlink" title="语义"></a>语义</h2><p>这里的语义以 OpenTracing 为基础。</p><h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Span A]  ←←←(the root span)</span><br><span class="line">            |</span><br><span class="line">     +------+------+</span><br><span class="line">     |             |</span><br><span class="line"> [Span B]      [Span C] ←←←(Span C is a `ChildOf` Span A)</span><br><span class="line">     |             |</span><br><span class="line"> [Span D]      +---+-------+</span><br><span class="line">               |           |</span><br><span class="line">           [Span E]    [Span F] &gt;&gt;&gt; [Span G] &gt;&gt;&gt; [Span H]</span><br><span class="line">                                       ↑</span><br><span class="line">                                       ↑</span><br><span class="line">                                       ↑</span><br><span class="line">                         (Span G `FollowsFrom` Span F)</span><br></pre></td></tr></table></figure><h3 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h3><p>有些时候，使用下面这种基于时间轴的时序图可以更好的展现<strong>Trace</strong>（调用链） </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">––|–––––––|–––––––|–––––––|–––––––|–––––––|–––––––|–––––––|–&gt; time</span><br><span class="line"></span><br><span class="line"> [Span A···················································]</span><br><span class="line">   [Span B··············································]</span><br><span class="line">      [Span D··········································]</span><br><span class="line">    [Span C········································]</span><br><span class="line">         [Span E·······]        [Span F··] [Span G··] [Span H··]</span><br></pre></td></tr></table></figure><p><img data-src="/images/microservice/trace-flow.png" alt="trace-flow"></p><p>这种展现方式增加显示了执行时间的上下文，相关服务间的层次关系，进程或者任务的串行或并行调用关系。这样的视图有助于发现系统调用的关键路径。通过关注关键路径的执行过程，项目团队可专注于优化路径中的关键位置，最大幅度的提升系统性能。 </p><h3 id="Trace"><a href="#Trace" class="headerlink" title="Trace"></a>Trace</h3><p>一条<strong>Trace</strong>是指一个请求包含的调用链(包含下游所有请求的调用链)， 一条<strong>Trace</strong>可以被认为是一个由多个<strong>Span</strong>组成的有向无环图， <strong>Span</strong>与<strong>Span</strong>的关系被命名为<strong>References</strong>。</p><h3 id="Operation-Names"><a href="#Operation-Names" class="headerlink" title="Operation Names"></a>Operation Names</h3><p>每一个<strong>Span</strong>都有一个操作名称，这个名称简单，并具有可读性高。（例如：一个RPC方法的名称，一个函数名，或者一个大型计算过程中的子任务或阶段） </p><h3 id="Span"><a href="#Span" class="headerlink" title="Span"></a>Span</h3><p> 一个<strong>Span</strong>代表系统中具有开始时间和执行时长的逻辑运行单元 。具体可以理解为一次方法调用， 一个程序块的调用或者一次RPC/数据库访问。</p><p>每个<strong>Span</strong>包含以下的状态:</p><ul><li>An operation name，操作名称</li><li>A start timestamp，起始时间</li><li>A finish timestamp，结束时间</li><li><strong>Span Tags</strong>，一组键值对构成的Span标签集合。键值对中，键必须为string，值可以是字符串，布尔，或者数字类型。</li><li><strong>Span Logs</strong>，一组span的日志集合。 每次log操作包含一个键值对，以及一个时间戳。 键值对中，键必须为string，值可以是任意类型。 但是需要注意，不是所有的支持OpenTracing的Tracer,都需要支持所有的值类型。</li><li><strong>SpanContext</strong>，Span上下文对象 (下面会详细说明)</li><li><strong>References</strong>(Span间关系)，相关的零个或者多个Span（<strong>Span</strong>间通过<strong>SpanContext</strong>建立这种关系）</li></ul><p>每一个<strong>SpanContext</strong>包含以下状态：</p><ul><li>任何一个OpenTracing的实现，都需要将当前调用链的状态（例如： spanID 和traceID ），依赖一个独特的Span去跨进程边界传输</li><li><strong>Baggage Items</strong>，Trace的随行数据，是一个键值对集合，它存在于trace中，也需要跨进程边界传输</li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p> 一个<strong>Span</strong>可以和一个或者多个<strong>Span</strong>间存在因果关系。  OpenTracing定义了两种关系：<code>ChildOf</code> 和 <code>FollowsFrom</code>。<strong>这两种引用类型代表了子节点和父节点间的直接因果关系</strong>。 </p><h4 id="ChildOf-引用"><a href="#ChildOf-引用" class="headerlink" title="ChildOf 引用"></a><code>ChildOf</code> 引用</h4><p> 一个<strong>Span</strong>可能是一个父级<strong>Span</strong>的孩子，即<code>ChildOf</code> 关系。在<code>ChildOf</code> 引用关系下，父级span某种程度上取决于子<strong>Span</strong>。下面这些情况会构成<code>ChildOf</code> 关系：</p><ul><li><p>一个RPC调用的服务端的<strong>Span</strong>，和RPC服务客户端的<strong>Span</strong>构成<code>ChildOf</code> 关系</p></li><li><p>一个sql insert操作的<strong>Span</strong>，和ORM的save方法的<strong>Span</strong>构成<code>ChildOf</code> 关系</p></li><li><p>很多span可以并行工作（或者分布式工作）都可能是一个父级的<strong>Span</strong>的子项，他会合并所有子<strong>Span</strong>的执行结果，并在指定期限内返回</p><p>下面表述一个<code>ChildOf</code> 关系的父子节点关系的时序图:</p></li></ul><h4 id="FollowsFrom-引用"><a href="#FollowsFrom-引用" class="headerlink" title="FollowsFrom 引用"></a><strong><code>FollowsFrom</code> 引用</strong></h4><p>一些父级节点不以任何方式依然他们子节点的执行结果，这种情况下，我们说这些子<strong>Span</strong>和父<strong>Span</strong>之间是<code>FollowsFrom</code> 的因果关系。 </p><p> 下面表述一个<code>FollowsFrom</code> 关系的父子节点关系的时序图:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[-Parent Span-]  [-Child Span-]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    [-Parent Span--]</span><br><span class="line">     [-Child Span-]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    [-Parent Span-]</span><br><span class="line">                [-Child Span-]</span><br></pre></td></tr></table></figure><h3 id="Tags"><a href="#Tags" class="headerlink" title="Tags"></a>Tags</h3><p>每个<strong>Span</strong>可以有多个键值对（key:value）形式的<strong>Tags</strong>，<strong>Tags</strong>是没有时间戳的，支持简单的对<strong>Span</strong>进行注解和补充。  Span的tag不会跨进程传输，因此它们不会被子级的span继承。</p><p>必填参数</p><ul><li><p>tag key，必须是string类型</p></li><li><p>tag value，类型为字符串，布尔或者数字</p><p>注意，OpenTracing标准包含<strong><a href="https://opentracing.io/specification/conventions/" target="_blank" rel="noopener">“standard tags，标准Tag”</a></strong>，此文档中定义了Tag的标准含义。 </p></li></ul><table><thead><tr><th>Tag名称</th><th>字段类型</th><th>字段解释及示例</th></tr></thead><tbody><tr><td><code>component</code></td><td>string</td><td>The software package, framework, library, or module that generated the associated Span. E.g., <code>&quot;grpc&quot;</code>, <code>&quot;django&quot;</code>, <code>&quot;JDBI&quot;</code>.</td></tr><tr><td><code>db.instance</code></td><td>string</td><td>Database instance name. E.g., In java, if the jdbc.url=<code>&quot;jdbc:mysql://127.0.0.1:3306/customers&quot;</code>, the instance name is <code>&quot;customers&quot;</code>.</td></tr><tr><td><code>db.statement</code></td><td>string</td><td>A database statement for the given database type. E.g., for <code>db.type=&quot;sql&quot;</code>, <code>&quot;SELECT * FROM wuser_table&quot;</code>; for <code>db.type=&quot;redis&quot;</code>, <code>&quot;SET mykey &#39;WuValue&#39;&quot;</code>.</td></tr><tr><td><code>db.type</code></td><td>string</td><td>Database type. For any SQL database, <code>&quot;sql&quot;</code>. For others, the lower-case database category, e.g. <code>&quot;cassandra&quot;</code>, <code>&quot;hbase&quot;</code>, or <code>&quot;redis&quot;</code>.</td></tr><tr><td><code>db.user</code></td><td>string</td><td>Username for accessing database. E.g., <code>&quot;readonly_user&quot;</code> or <code>&quot;reporting_user&quot;</code></td></tr><tr><td><code>error</code></td><td>bool</td><td><code>true</code> if and only if the application considers the operation represented by the Span to have failed</td></tr><tr><td><code>http.method</code></td><td>string</td><td>HTTP method of the request for the associated Span. E.g., <code>&quot;GET&quot;</code>, <code>&quot;POST&quot;</code></td></tr><tr><td><code>http.status_code</code></td><td>integer</td><td>HTTP response status code for the associated Span. E.g., 200, 503, 404</td></tr><tr><td><code>http.url</code></td><td>string</td><td>URL of the request being handled in this segment of the trace, in standard URI format. E.g., <code>&quot;https://domain.net/path/to?resource=here&quot;</code></td></tr><tr><td><code>message_bus.destination</code></td><td>string</td><td>An address at which messages can be exchanged. E.g. A Kafka record has an associated <code>&quot;topic name&quot;</code> that can be extracted by the instrumented producer or consumer and stored using this tag.</td></tr><tr><td><code>peer.address</code></td><td>string</td><td>Remote “address”, suitable for use in a networking client library. This may be a <code>&quot;ip:port&quot;</code>, a bare <code>&quot;hostname&quot;</code>, a FQDN, or even a JDBC substring like <code>&quot;mysql://prod-db:3306&quot;</code></td></tr><tr><td><code>peer.hostname</code></td><td>string</td><td>Remote hostname. E.g., <code>&quot;opentracing.io&quot;</code>, <code>&quot;internal.dns.name&quot;</code></td></tr><tr><td><code>peer.ipv4</code></td><td>string</td><td>Remote IPv4 address as a <code>.</code>-separated tuple. E.g., <code>&quot;127.0.0.1&quot;</code></td></tr><tr><td><code>peer.ipv6</code></td><td>string</td><td>Remote IPv6 address as a string of colon-separated 4-char hex tuples. E.g., <code>&quot;2001:0db8:85a3:0000:0000:8a2e:0370:7334&quot;</code></td></tr><tr><td><code>peer.port</code></td><td>integer</td><td>Remote port. E.g., <code>80</code></td></tr><tr><td><code>peer.service</code></td><td>string</td><td>Remote service name (for some unspecified definition of <code>&quot;service&quot;</code>). E.g., <code>&quot;elasticsearch&quot;</code>, <code>&quot;a_custom_microservice&quot;</code>, <code>&quot;memcache&quot;</code></td></tr><tr><td><code>sampling.priority</code></td><td>integer</td><td>If greater than 0, a hint to the Tracer to do its best to capture the trace. If 0, a hint to the trace to not-capture the trace. If absent, the Tracer should use its default sampling mechanism.</td></tr><tr><td><code>span.kind</code></td><td>string</td><td>Either <code>&quot;client&quot;</code> or <code>&quot;server&quot;</code> for the appropriate roles in an RPC, and <code>&quot;producer&quot;</code> or <code>&quot;consumer&quot;</code> for the appropriate roles in a messaging scenario.</td></tr></tbody></table><h3 id="Logs"><a href="#Logs" class="headerlink" title="Logs"></a>Logs</h3><p>每个<strong>Span</strong>可以进行多次<strong>Logs</strong>操作，每一次<strong>Logs</strong>操作，都需要一个带时间戳的时间名称，以及可选的任意大小的存储结构。 </p><p>必填参数</p><ul><li>一个或者多个键值对，其中键必须是字符串类型，值可以是任意类型。某些OpenTracing实现，可能支持更多的log值类型。</li></ul><p>可选参数</p><ul><li><p>一个明确的时间戳。如果指定时间戳，那么它必须在span的开始和结束时间之内。</p><p>注意，OpenTracing标准包含<strong><a href="https://opentracing.io/specification/conventions/" target="_blank" rel="noopener">“standard log keys，标准log的键”</a></strong>，此文档中定义了这些键的标准含义。 </p></li></ul><table><thead><tr><th>Log名称</th><th>字段类型</th><th>字段解释及示例</th></tr></thead><tbody><tr><td><code>error.kind</code></td><td>string</td><td>The type or “kind” of an error (only for <code>event=&quot;error&quot;</code> logs). E.g., <code>&quot;Exception&quot;</code>, <code>&quot;OSError&quot;</code></td></tr><tr><td><code>error.object</code></td><td>object</td><td>For languages that support such a thing (e.g., Java, Python), the actual Throwable/Exception/Error object instance itself. E.g., A <code>java.lang.UnsupportedOperationException</code> instance, a python <code>exceptions.NameError</code> instance</td></tr><tr><td><code>event</code></td><td>string</td><td>A stable identifier for some notable moment in the lifetime of a Span. For instance, a mutex lock acquisition or release or the sorts of lifetime events in a browser page load described in the <a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming" target="_blank" rel="noopener">Performance.timing</a> specification. E.g., from Zipkin, <code>&quot;cs&quot;</code>, <code>&quot;sr&quot;</code>, <code>&quot;ss&quot;</code>, or <code>&quot;cr&quot;</code>. Or, more generally, <code>&quot;initialized&quot;</code> or <code>&quot;timed out&quot;</code>. For errors, <code>&quot;error&quot;</code></td></tr><tr><td><code>message</code></td><td>string</td><td>A concise, human-readable, one-line message explaining the event. E.g., <code>&quot;Could not connect to backend&quot;</code>, <code>&quot;Cache invalidation succeeded&quot;</code></td></tr><tr><td><code>stack</code></td><td>string</td><td>A stack trace in platform-conventional format; may or may not pertain to an error. E.g., <code>&quot;File \&quot;example.py\&quot;, line 7, in \\ncaller()\nFile \&quot;example.py\&quot;, line 5, in caller\ncallee()\nFile \&quot;example.py\&quot;, line 2, in callee\nraise Exception(\&quot;Yikes\&quot;)\n&quot;</code></td></tr></tbody></table><h3 id="SpanContext"><a href="#SpanContext" class="headerlink" title="SpanContext"></a>SpanContext</h3><p> <strong>SpanContext</strong>更多的是一个“概念” 。每个<strong>Span</strong>都必须提供方法访问<strong>SpanContext</strong>。SpanContext代表跨越进程边界，传递到下级<strong>Span</strong>的状态，并用于封装<strong>Baggage</strong> 。 OpenTracing的使用者仅仅需要，在创建<strong>Span</strong>、向传输协议Inject（注入）和从传输协议中Extract（提取）时使用 。</p><h3 id="Baggage"><a href="#Baggage" class="headerlink" title="Baggage"></a>Baggage</h3><p>Baggage元素是一个键值对集合，将这些值设置给给定的<code>Span</code>，<code>Span</code>的<code>SpanContext</code>，以及<strong>所有和此<code>Span</code>有直接或者间接关系的本地<code>Span</code>。</strong> 也就是说，baggage元素随<strong>Trace</strong>一起应用程序调用过程 一同传播  </p><p>Baggage拥有强大功能，也会有很大的<em>消耗</em>。由于Baggage的全局传输，如果包含的数量量太大，或者元素太多，它将降低系统的吞吐量或增加RPC的延迟。 </p><h3 id="Inject-and-Extract"><a href="#Inject-and-Extract" class="headerlink" title="Inject and Extract"></a>Inject and Extract</h3><p><code>SpanContext</code>可以通过<strong>Injected</strong>操作向<strong>Carrier</strong>增加，或者通过<strong>Extracted</strong>从<strong>Carrier</strong>中获取，跨进程通讯数据。通过这种方式，SpanContexts可以跨越进程边界，并提供足够的信息来建立跨进程的span间关系（因此可以实现跨进程连续追踪）。 </p><p>Inject 类比传递序列化后的参数</p><p>Extract 反序列化Inject的参数值</p><p>传递方式例如：</p><ol><li>依赖HTTP头传递（B3-header）</li><li>Dubbo 定制<strong>Filter</strong>通过 <strong><em>RpcContext</em></strong> 设置 <strong>Attachment</strong> 来传递</li></ol><p><strong>Carrier</strong>可以是一个接口或者一个数据载体，他对于跨进程通讯是十分有帮助的。<strong>Carrier</strong>负责将追踪状态从一个进程”carries”传递到另一个进程 。OpenTracing规定所有平台的实现者支持两种Carrier格式：基于”text map”（基于字符串的map）的格式和基于”binary”（二进制）的格式。</p><ul><li><em>text map</em> 格式的 Carrier是一个平台惯用的map格式，基于unicode编码的<code>字符串</code>对<code>字符串</code>键值对</li><li><em>binary</em> 格式的 Carrier 是一个不透明的二进制数组（更紧凑和有效）</li></ul><p><img data-src="/images/microservice/tracing-extract.png" alt="tracing-extract"></p><h2 id="开源"><a href="#开源" class="headerlink" title="开源"></a>开源</h2><h3 id="语言支持"><a href="#语言支持" class="headerlink" title="语言支持"></a>语言支持</h3><ul><li><a href="https://github.com/opentracing/opentracing-go" target="_blank" rel="noopener">Go</a></li><li><a href="https://github.com/opentracing/opentracing-javascript" target="_blank" rel="noopener">JavaScript</a></li><li><a href="https://github.com/opentracing/opentracing-java" target="_blank" rel="noopener">Java</a></li><li><a href="https://github.com/opentracing/opentracing-python" target="_blank" rel="noopener">Python</a></li><li><a href="https://github.com/opentracing/opentracing-ruby" target="_blank" rel="noopener">Ruby</a></li><li><a href="https://github.com/opentracing/opentracing-php" target="_blank" rel="noopener">PHP</a></li><li><a href="https://github.com/opentracing/opentracing-objc" target="_blank" rel="noopener">Objective-C</a></li><li><a href="https://github.com/opentracing/opentracing-cpp" target="_blank" rel="noopener">C++</a></li><li><a href="https://github.com/opentracing/opentracing-csharp" target="_blank" rel="noopener">C#</a></li></ul><h3 id="框架支持"><a href="#框架支持" class="headerlink" title="框架支持"></a>框架支持</h3><ul><li><a href="https://opentracing.io/docs/supported-tracers/#cncf-jaeger" target="_blank" rel="noopener">CNCF Jaeger</a></li><li><a href="https://opentracing.io/docs/supported-tracers/#lightstep" target="_blank" rel="noopener">LightStep</a></li><li><a href="https://opentracing.io/docs/supported-tracers/#instana" target="_blank" rel="noopener">Instana</a></li><li><a href="https://opentracing.io/docs/supported-tracers/#apache-skywalking" target="_blank" rel="noopener">Apache SkyWalking</a></li><li><a href="https://opentracing.io/docs/supported-tracers/#inspectit" target="_blank" rel="noopener">inspectIT</a></li><li><a href="https://opentracing.io/docs/supported-tracers/#stagemonitor" target="_blank" rel="noopener">stagemonitor</a></li><li><a href="https://opentracing.io/docs/supported-tracers/#datadog" target="_blank" rel="noopener">Datadog</a></li><li><a href="https://opentracing.io/docs/supported-tracers/#wavefront-by-vmware" target="_blank" rel="noopener">Wavefront by VMware</a></li><li><a href="https://opentracing.io/docs/supported-tracers/#elastic-apm" target="_blank" rel="noopener">Elastic APM</a></li></ul><p>通过cncf社区链接也可以查询到相关框架</p><p> <a href="https://landscape.cncf.io/category=tracing&amp;format=card-mode&amp;grouping=category" target="_blank" rel="noopener">https://landscape.cncf.io/category=tracing&amp;format=card-mode&amp;grouping=category</a> </p><p><img data-src="/images/microservice/cncf-tracing.png" alt="cncf-tracing"></p><h3 id="框架选型"><a href="#框架选型" class="headerlink" title="框架选型"></a>框架选型</h3><p>如果公司用的Java体系可以选择 Zipkin 或者 SkyWalking 。Zipkin 主要是tracing，而SkyWalking整体是APM，包含tracing。如果不打算做二次开发建议选SkyWalking，开箱即用（目前存储主要支持ElasticSearch）。</p><p>目前云原生体系在大力推Jaeger (Go语言研发)，如果公司有go体系，也是个不错的选择。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p> <a href="https://opentracing.io/" target="_blank" rel="noopener">https://opentracing.io/</a> </p><p> <a href="https://github.com/opentracing/specification" target="_blank" rel="noopener">https://github.com/opentracing/specification</a> </p><p> <a href="https://github.com/opentracing-contrib" target="_blank" rel="noopener">https://github.com/opentracing-contrib</a></p><p> <a href="https://wu-sheng.gitbooks.io/opentracing-io/content/" target="_blank" rel="noopener">https://wu-sheng.gitbooks.io/opentracing-io/content/</a> </p><p> <a href="https://opencensus.io/" target="_blank" rel="noopener">https://opencensus.io/</a> </p><p> <a href="https://opentelemetry.io/" target="_blank" rel="noopener">https://opentelemetry.io/</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;当我们把系统微服务化后，想查询某个接口一次请求的耗时信息，需要登录多台机器查询相关日志才行。 如下图所示架构，当对应服务集群化部署后，想要查询到某一次请求信息更是难上加难。那我们有什么办法可以解决这个问题么？&lt;/p&gt;
&lt;p&gt;答案当然是有的，分布式追踪系统正是为了解决这个问题而生。分布式跟踪为描述和分析跨进程事务提供了一种解决方案。如&lt;a href=&quot;https://research.google/pubs/pub36356/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Google Dapper论文&lt;/a&gt; (业界的分布式追踪系统基本都是以这篇论文为基础进行实现)所述，分布式跟踪的一些使用场景包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;异常检测，问题诊断&lt;/li&gt;
&lt;li&gt;分布式系统内各组件的调用情况 &lt;/li&gt;
&lt;li&gt;性能/延迟优化 &lt;/li&gt;
&lt;li&gt;服务依赖性分析 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&quot;/images/microservice/micro-arch.jpg&quot; alt=&quot;micro-arch&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="微服务" scheme="http://haoyunlaile.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="分布式跟踪" scheme="http://haoyunlaile.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E8%B7%9F%E8%B8%AA/"/>
    
      <category term="opentracing" scheme="http://haoyunlaile.github.io/tags/opentracing/"/>
    
  </entry>
  
  <entry>
    <title>交易中台技术栈全景</title>
    <link href="http://haoyunlaile.github.io/2020/microservice/tarde-middle-platform/"/>
    <id>http://haoyunlaile.github.io/2020/microservice/tarde-middle-platform/</id>
    <published>2020-04-30T12:00:00.000Z</published>
    <updated>2020-04-30T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="交易中台技术全景图"><a href="#交易中台技术全景图" class="headerlink" title="交易中台技术全景图"></a>交易中台技术全景图</h2><p><img data-src="/images/microservice/%E4%BA%A4%E6%98%93%E4%B8%AD%E5%8F%B0%E6%8A%80%E6%9C%AF%E6%A0%88%E5%85%A8%E6%99%AF.svg" alt="交易中台技术栈全景"></p><p>上图是个人根据之前的一些工作积累描绘出来的，当然这些只是冰山一角。其中大部分组件都有在公司实际使用过，里面都是开源组件，因为平常工作都是使用Java，所以基本都是从Java里面做的选型。</p><p>至于最终技术栈的选择，每个人有不同的认知及经验差异，可能会有其他的一些更好的想法，这个非常好。没有最好的，只有更合适的。可以结合公司的需求，团队的成员熟知度等因素综合考量后，完成这个技术体系的搭建即可。</p><a id="more"></a><p>下面的表格为项目对应的github地址，方便查阅</p><table><thead><tr><th align="center">序号</th><th>组件名</th><th>github地址</th></tr></thead><tbody><tr><td align="center">1</td><td>apollo</td><td><a href="https://github.com/ctripcorp/apollo" target="_blank" rel="noopener">https://github.com/ctripcorp/apollo</a></td></tr><tr><td align="center">2</td><td>nacos</td><td><a href="https://github.com/alibaba/nacos" target="_blank" rel="noopener">https://github.com/alibaba/nacos</a></td></tr><tr><td align="center">3</td><td>soul</td><td><a href="https://github.com/Dromara/soul" target="_blank" rel="noopener">https://github.com/Dromara/soul</a></td></tr><tr><td align="center">4</td><td>redis</td><td><a href="https://github.com/antirez/redis" target="_blank" rel="noopener">https://github.com/antirez/redis</a></td></tr><tr><td align="center">5</td><td>sentinel</td><td><a href="https://github.com/alibaba/Sentinel" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel</a></td></tr><tr><td align="center">6</td><td>rocketmq</td><td><a href="https://github.com/apache/rocketmq" target="_blank" rel="noopener">https://github.com/apache/rocketmq</a></td></tr><tr><td align="center">7</td><td>lmstfy</td><td><a href="https://github.com/bitleak/lmstfy" target="_blank" rel="noopener">https://github.com/bitleak/lmstfy</a></td></tr><tr><td align="center">8</td><td>saturn</td><td><a href="https://github.com/vipshop/Saturn" target="_blank" rel="noopener">https://github.com/vipshop/Saturn</a></td></tr><tr><td align="center">9</td><td>flink</td><td><a href="https://github.com/apache/flink" target="_blank" rel="noopener">https://github.com/apache/flink</a></td></tr><tr><td align="center">10</td><td>shardingsphere</td><td><a href="https://github.com/apache/shardingsphere" target="_blank" rel="noopener">https://github.com/apache/shardingsphere</a></td></tr><tr><td align="center">11</td><td>seata</td><td><a href="https://github.com/seata/seata" target="_blank" rel="noopener">https://github.com/seata/seata</a></td></tr><tr><td align="center">12</td><td>elasticsearch</td><td><a href="https://github.com/elastic/elasticsearch" target="_blank" rel="noopener">https://github.com/elastic/elasticsearch</a></td></tr><tr><td align="center">13</td><td>porter</td><td><a href="https://github.com/sxfad/porter" target="_blank" rel="noopener">https://github.com/sxfad/porter</a></td></tr><tr><td align="center">14</td><td>skywalking</td><td><a href="https://github.com/apache/skywalking" target="_blank" rel="noopener">https://github.com/apache/skywalking</a></td></tr><tr><td align="center">15</td><td>prometheus</td><td><a href="https://github.com/prometheus/prometheus" target="_blank" rel="noopener">https://github.com/prometheus/prometheus</a></td></tr><tr><td align="center">16</td><td>id-generator</td><td><a href="https://github.com/Meituan-Dianping/Leaf" target="_blank" rel="noopener">https://github.com/Meituan-Dianping/Leaf</a></td></tr></tbody></table><h2 id="中台实践体验"><a href="#中台实践体验" class="headerlink" title="中台实践体验"></a>中台实践体验</h2><ol><li>中台是一把手工程，全员共识是关键</li><li>中台是一次变革，避免急功近利，企业要有中长期投入的准备</li><li>要选择成熟的技术平台，关注稳定性和未来 </li><li>中台本身不能解决所有问题。跟任何的方法论一样，只适用于特定场景、特定问题</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;交易中台技术全景图&quot;&gt;&lt;a href=&quot;#交易中台技术全景图&quot; class=&quot;headerlink&quot; title=&quot;交易中台技术全景图&quot;&gt;&lt;/a&gt;交易中台技术全景图&lt;/h2&gt;&lt;p&gt;&lt;img data-src=&quot;/images/microservice/%E4%BA%A4%E6%98%93%E4%B8%AD%E5%8F%B0%E6%8A%80%E6%9C%AF%E6%A0%88%E5%85%A8%E6%99%AF.svg&quot; alt=&quot;交易中台技术栈全景&quot;&gt;&lt;/p&gt;
&lt;p&gt;上图是个人根据之前的一些工作积累描绘出来的，当然这些只是冰山一角。其中大部分组件都有在公司实际使用过，里面都是开源组件，因为平常工作都是使用Java，所以基本都是从Java里面做的选型。&lt;/p&gt;
&lt;p&gt;至于最终技术栈的选择，每个人有不同的认知及经验差异，可能会有其他的一些更好的想法，这个非常好。没有最好的，只有更合适的。可以结合公司的需求，团队的成员熟知度等因素综合考量后，完成这个技术体系的搭建即可。&lt;/p&gt;
    
    </summary>
    
    
      <category term="微服务" scheme="http://haoyunlaile.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="交易中台" scheme="http://haoyunlaile.github.io/tags/%E4%BA%A4%E6%98%93%E4%B8%AD%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>微服务平台架构</title>
    <link href="http://haoyunlaile.github.io/2020/microservice/microservice-architecture/"/>
    <id>http://haoyunlaile.github.io/2020/microservice/microservice-architecture/</id>
    <published>2020-04-30T11:30:00.000Z</published>
    <updated>2020-04-30T11:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="微服务概念"><a href="#微服务概念" class="headerlink" title="微服务概念"></a>微服务概念</h2><p>微服务是一种用于构建应用的架构方案。微服务架构有别于更为传统的单体式方案，可将应用拆分成多个核心功能。每个功能都被称为一项服务，可以单独构建和部署，这意味着各项服务在工作和出现故障时不会相互影响。 </p><p><img data-src="/images/microservice/monolithic-vs-microservices.png" alt="monolithic-vs-microservices"></p><h2 id="微服务组件"><a href="#微服务组件" class="headerlink" title="微服务组件"></a>微服务组件</h2><p>下图为搭建微服务平台常用到的一些生态组件</p><p><img data-src="/images/microservice/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%BB%84%E4%BB%B6.svg" alt="微服务架构组件"></p><a id="more"></a><p>下图为对应生态组件的一些开源实现，相关源码在github中全部可以找到</p><p><img data-src="/images/microservice/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0.svg" alt="微服务架构组件实现"></p><p>后续我会根据之前的一些使用经验来试着分析这中间部分组件的架构及原理(给自己挖坑)，这么多不知道一个个写完不知道要到什么时候了！！！</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://zh.wikipedia.org/wiki/微服務" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/微服務</a> </p><p><a href="https://microservices.io/" target="_blank" rel="noopener">https://microservices.io/</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;微服务概念&quot;&gt;&lt;a href=&quot;#微服务概念&quot; class=&quot;headerlink&quot; title=&quot;微服务概念&quot;&gt;&lt;/a&gt;微服务概念&lt;/h2&gt;&lt;p&gt;微服务是一种用于构建应用的架构方案。微服务架构有别于更为传统的单体式方案，可将应用拆分成多个核心功能。每个功能都被称为一项服务，可以单独构建和部署，这意味着各项服务在工作和出现故障时不会相互影响。 &lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;/images/microservice/monolithic-vs-microservices.png&quot; alt=&quot;monolithic-vs-microservices&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;微服务组件&quot;&gt;&lt;a href=&quot;#微服务组件&quot; class=&quot;headerlink&quot; title=&quot;微服务组件&quot;&gt;&lt;/a&gt;微服务组件&lt;/h2&gt;&lt;p&gt;下图为搭建微服务平台常用到的一些生态组件&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;/images/microservice/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%BB%84%E4%BB%B6.svg&quot; alt=&quot;微服务架构组件&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="微服务" scheme="http://haoyunlaile.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="microservice" scheme="http://haoyunlaile.github.io/tags/microservice/"/>
    
  </entry>
  
  <entry>
    <title>Istio Sidecar</title>
    <link href="http://haoyunlaile.github.io/2020/istio/istio-sidecar/"/>
    <id>http://haoyunlaile.github.io/2020/istio/istio-sidecar/</id>
    <published>2020-04-28T13:00:00.000Z</published>
    <updated>2020-04-28T13:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Istio-Sidecar"><a href="#Istio-Sidecar" class="headerlink" title="Istio  Sidecar"></a>Istio  Sidecar</h2><h3 id="概念及示例"><a href="#概念及示例" class="headerlink" title="概念及示例"></a>概念及示例</h3><p> <code>Sidecar</code>描述了sidecar代理的配置。默认情况下，Istio 让每个 Envoy 代理都可以访问来自和它关联的工作负载的所有端口的请求，然后转发到对应的工作负载。您可以使用 <a href="https://preliminary.istio.io/zh/docs/reference/config/networking/sidecar/#Sidecar" target="_blank" rel="noopener">Sidecar</a> 配置去做下面的事情：</p><ul><li>微调 Envoy 代理接受的端口和协议集。</li><li>限制 Envoy 代理可以访问的服务集合。</li></ul><p>您可能希望在较庞大的应用程序中限制这样的 sidecar 可达性，配置每个代理能访问网格中的任意服务可能会因为高内存使用量而影响网格的性能。</p><p>您可以指定将 sidecar 配置应用于特定命名空间中的所有工作负载，或者使用 <code>workloadSelector</code> 选择特定的工作负载。例如，下面的 sidecar 配置将 <code>bookinfo</code> 命名空间中的所有服务配置为仅能访问运行在相同命名空间和 Istio 控制平面中的服务。</p><blockquote><p> 每个名称空间只能有一个没有任何配置 <code>workloadSelector</code>的<code>Sidecar</code>配置 ， 如果<code>Sidecar</code>给定名称空间中存在多个不使用选择器的配置，则系统的行为是不确定的。 </p></blockquote><a id="more"></a><p>下面声明的<code>Sidecar</code>在根名称空间中声明了全局默认配置<code>istio-config</code>，该配置在所有名称空间中配置了sidecar，以仅允许将流量发送到同一名称空间中的其他工作负载以及该名称空间中的服务<code>istio-system</code>。 </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Sidecar</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">`istio-config`</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">egress:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"./*"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"istio-system/*"</span></span><br></pre></td></tr></table></figure><p>下面声明的<code>Sidecar</code>在配置<code>prod-us1</code> 命名空间覆盖全局默认以上定义，使出口流量到公共服务中<code>prod-us1</code>，<code>prod-apis</code>和<code>istio-system</code> 命名空间。 </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Sidecar</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">prod-us1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">egress:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"prod-us1/*"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"prod-apis/*"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"istio-system/*"</span></span><br></pre></td></tr></table></figure><p>下面的示例<code>Sidecar</code>在<code>prod-us1</code>名称空间中声明一个配置，该配置接受端口9080上的入站HTTP通信并将其转发到侦听Unix域套接字的附加工作负载实例。在出口方向上，除了<code>istio-system</code>名称空间外，Sidecar仅代理绑定到端口9080的HTTP流量，以用于<code>prod-us1</code>名称空间中的服务 </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Sidecar</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">prod-us1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ingress:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span></span><br><span class="line">      <span class="attr">number:</span> <span class="number">9080</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">HTTP</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">somename</span></span><br><span class="line">    <span class="attr">defaultEndpoint:</span> <span class="string">unix:///var/run/someuds.sock</span></span><br><span class="line">  <span class="attr">egress:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span></span><br><span class="line">      <span class="attr">number:</span> <span class="number">9080</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">HTTP</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">egresshttp</span></span><br><span class="line">    <span class="attr">hosts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"prod-us1/*"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"istio-system/*"</span></span><br></pre></td></tr></table></figure><h2 id="Sidecar配置"><a href="#Sidecar配置" class="headerlink" title="Sidecar配置"></a>Sidecar配置</h2><table><thead><tr><th>Field</th><th>Type</th><th>Description</th><th>Required</th></tr></thead><tbody><tr><td><code>workloadSelector</code></td><td><code>WorkloadSelector</code></td><td>表示工作负载的选择器，Sidecar 的配置可以使用 workloadSelector 应用到命名空间下的一个或多个负载，如果未配置 workloadSelector，则应用到整个命名空间。每个命名空间都只能定义一个没有 workloadSelector 的 Sidecar，表示对命名空间的全局配置</td><td>No</td></tr><tr><td><code>ingress</code></td><td><code>IstioIngressListener[]</code></td><td>IstioIngressListener 类型，配置 Sidecar 对于的工作负载的 Inbound 流量。</td><td>No</td></tr><tr><td><code>egress</code></td><td><code>IstioEgressListener[]</code></td><td>是一种 istioEgressListener 类型，可用来配置 Sidecar 对网络内其他服务的访问，如果没有配置，则只要命名空间可见，命名空间里的服务就都可以被访问。</td><td>Yes</td></tr><tr><td><code>outboundTrafficPolicy</code></td><td><code>OutboundTrafficPolicy</code></td><td>允许配置出站流量策略</td><td>No</td></tr></tbody></table><h3 id="WorkloadSelector配置"><a href="#WorkloadSelector配置" class="headerlink" title="WorkloadSelector配置"></a>WorkloadSelector配置</h3><p><code>WorkloadSelector</code>指定的标准来确定是否<code>Gateway</code>， <code>Sidecar</code>或<code>EnvoyFilter</code>配置可被应用到一个代理。匹配条件包括与代理关联的元数据，工作负载实例信息或代理在初始握手期间提供给Istio的任何其他信息。如果指定了多个条件，则必须匹配所有条件才能选择工作负载实例。当前，仅支持基于标签的选择机制。 </p><table><thead><tr><th>Field</th><th>Type</th><th>Description</th><th>Required</th></tr></thead><tbody><tr><td><code>labels</code></td><td><code>map</code></td><td>一个或多个标签，指示<code>Sidecar</code>应在其上应用此配置的一组特定的Pod / VM 。标签搜索的范围仅限于存在资源的配置名称空间。</td><td>Yes</td></tr></tbody></table><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://preliminary.istio.io/zh/docs/reference/config/networking/sidecar/#Sidecar" target="_blank" rel="noopener">https://preliminary.istio.io/zh/docs/reference/config/networking/sidecar/#Sidecar</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Istio-Sidecar&quot;&gt;&lt;a href=&quot;#Istio-Sidecar&quot; class=&quot;headerlink&quot; title=&quot;Istio  Sidecar&quot;&gt;&lt;/a&gt;Istio  Sidecar&lt;/h2&gt;&lt;h3 id=&quot;概念及示例&quot;&gt;&lt;a href=&quot;#概念及示例&quot; class=&quot;headerlink&quot; title=&quot;概念及示例&quot;&gt;&lt;/a&gt;概念及示例&lt;/h3&gt;&lt;p&gt; &lt;code&gt;Sidecar&lt;/code&gt;描述了sidecar代理的配置。默认情况下，Istio 让每个 Envoy 代理都可以访问来自和它关联的工作负载的所有端口的请求，然后转发到对应的工作负载。您可以使用 &lt;a href=&quot;https://preliminary.istio.io/zh/docs/reference/config/networking/sidecar/#Sidecar&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Sidecar&lt;/a&gt; 配置去做下面的事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;微调 Envoy 代理接受的端口和协议集。&lt;/li&gt;
&lt;li&gt;限制 Envoy 代理可以访问的服务集合。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;您可能希望在较庞大的应用程序中限制这样的 sidecar 可达性，配置每个代理能访问网格中的任意服务可能会因为高内存使用量而影响网格的性能。&lt;/p&gt;
&lt;p&gt;您可以指定将 sidecar 配置应用于特定命名空间中的所有工作负载，或者使用 &lt;code&gt;workloadSelector&lt;/code&gt; 选择特定的工作负载。例如，下面的 sidecar 配置将 &lt;code&gt;bookinfo&lt;/code&gt; 命名空间中的所有服务配置为仅能访问运行在相同命名空间和 Istio 控制平面中的服务。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 每个名称空间只能有一个没有任何配置 &lt;code&gt;workloadSelector&lt;/code&gt;的&lt;code&gt;Sidecar&lt;/code&gt;配置 ， 如果&lt;code&gt;Sidecar&lt;/code&gt;给定名称空间中存在多个不使用选择器的配置，则系统的行为是不确定的。 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="istio" scheme="http://haoyunlaile.github.io/categories/istio/"/>
    
    
      <category term="istio" scheme="http://haoyunlaile.github.io/tags/istio/"/>
    
      <category term="istio-sidecar" scheme="http://haoyunlaile.github.io/tags/istio-sidecar/"/>
    
  </entry>
  
  <entry>
    <title>Istio ServiceEntry</title>
    <link href="http://haoyunlaile.github.io/2020/istio/istio-serviceentry/"/>
    <id>http://haoyunlaile.github.io/2020/istio/istio-serviceentry/</id>
    <published>2020-04-28T12:00:00.000Z</published>
    <updated>2020-04-28T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Istio-ServiceEntry-外部服务引入"><a href="#Istio-ServiceEntry-外部服务引入" class="headerlink" title="Istio  ServiceEntry 外部服务引入"></a>Istio  ServiceEntry 外部服务引入</h2><h3 id="概念及示例"><a href="#概念及示例" class="headerlink" title="概念及示例"></a>概念及示例</h3><p>使用服务入口<code>Service Entry</code>来添加一个入口到 Istio 内部维护的服务注册中心。添加了服务入口后，Envoy 代理可以向服务发送流量，就好像它是网格内部的服务一样。配置服务入口允许您管理运行在网格外的服务的流量，它包括以下几种能力：</p><ul><li>为外部目标 redirect 和转发请求，例如来自 web 端的 API 调用，或者流向遗留老系统的服务。</li><li>为外部目标定义重试、超时和故障注入策略。</li><li>添加一个运行在虚拟机的服务来扩展您的网格。</li><li>从逻辑上添加来自不同集群的服务到网格，在 Kubernetes 上实现一个<a href="https://preliminary.istio.io/zh/docs/setup/install/multicluster/gateways/#configure-the-example-services" target="_blank" rel="noopener">多集群 Istio 网格</a>。</li></ul><a id="more"></a><p>您不需要为网格服务要使用的每个外部服务都添加服务入口。默认情况下，Istio 配置 Envoy 代理会将请求传递给未知服务。但是，您不能使用 Istio 的特性来控制没有在网格中注册的目标流量。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceEntry</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">svc-entry</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">hosts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ext-svc.example.com</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">number:</span> <span class="number">443</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">https</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">HTTPS</span></span><br><span class="line">  <span class="attr">location:</span> <span class="string">MESH_EXTERNAL</span></span><br><span class="line">  <span class="attr">resolution:</span> <span class="string">DNS</span></span><br></pre></td></tr></table></figure><p>您指定的外部资源使用 <code>hosts</code> 字段。可以使用完全限定名或通配符作为前缀域名。</p><p>您可以配置虚拟服务和目标规则，以更细粒度的方式控制到服务入口的流量，这与网格中的任何其他服务配置流量的方式相同。例如，下面的目标规则配置流量路由以使用双向 TLS 来保护到 <code>ext-svc.example.com</code> 外部服务的连接，我们使用服务入口配置了该外部服务：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceEntry</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">external-svc-httpbin</span></span><br><span class="line">  <span class="attr">namespace :</span> <span class="string">egress</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">hosts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">httpbin.com</span></span><br><span class="line">  <span class="attr">exportTo:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"."</span></span><br><span class="line">  <span class="attr">location:</span> <span class="string">MESH_EXTERNAL</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">number:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">HTTP</span></span><br><span class="line">  <span class="attr">resolution:</span> <span class="string">DNS</span></span><br></pre></td></tr></table></figure><h2 id="ServiceEntry配置"><a href="#ServiceEntry配置" class="headerlink" title="ServiceEntry配置"></a>ServiceEntry配置</h2><table><thead><tr><th>Field</th><th>Type</th><th>Description</th><th>Required</th></tr></thead><tbody><tr><td><code>hosts</code></td><td><code>string[]</code></td><td>绑定到 <code>ServiceEntry</code> 上的主机名。可以是一个带有通配符前缀的 DNS 名称。如果服务不是 HTTP 协议的，例如 <code>mongo</code>、TCP 以及 HTTPS 中，<code>hosts</code> 中的 DNS 名称会被忽略，这种情况下会使用 <code>endpoints</code> 中的 <code>address</code> 以及 <code>port</code> 来甄别调用目标。</td><td>Yes</td></tr><tr><td><code>addresses</code></td><td><code>string[]</code></td><td>服务相关的虚拟 IP。可以是 CIDR 前缀。对 HTTP 服务来说，这一字段会被忽略，而会使用 HTTP 的 <code>HOST/Authority</code> Header。而对于非 HTTP 服务，例如 <code>mongo</code>、TCP 以及 HTTPS 中，这些主机会被忽略。如果指定了一个或者多个 IP 地址，对于在列表范围内的 IP 的访问会被判定为属于这一服务。如果地址字段为空，服务的鉴别就只能靠目标端口了。在这种情况下，被访问服务的端口一定不能和其他网格内的服务进行共享。换句话说，这里的 Sidecar 会简单的做为 TCP 代理，将特定端口的访问转发到指定目标端点的 IP、主机上去。就无法支持 Unix socket 了。</td><td>No</td></tr><tr><td><code>ports</code></td><td><code>Port[]</code></td><td>和外部服务关联的端口。如果 <code>endpoints</code> 是 Unix socket 地址，这里必须只有一个端口。</td><td>Yes</td></tr><tr><td><code>location</code></td><td><code>Location</code></td><td>用于指定该服务的位置，属于网格内部还是外部。</td><td>No</td></tr><tr><td><code>resolution</code></td><td><code>Resolution</code></td><td>主机的服务发现模式。在没有附带 IP 地址的情况下，为 TCP 端口设置解析模式为 NONE 时必须小心。在这种情况下，对任何 IP 的指定端口的流量都是允许的（例如 <code>0.0.0.0:</code>）。</td><td>Yes</td></tr><tr><td><code>endpoints</code></td><td><code>Endpoint[]</code></td><td>一个或者多个关联到这一服务的 <code>endpoint</code></td><td>No</td></tr><tr><td><code>exportTo</code></td><td><code>string[]</code></td><td>此服务导出到的名称空间列表。导出服务允许它被其他名称空间中定义的边车，网关和虚拟服务使用。此功能为服务所有者和网格管理员提供了一种机制，可以控制跨名称空间边界的服务的可见性。 如果未指定名称空间，则默认情况下会将服务导出到所有名称空间</td><td>No</td></tr><tr><td><code>subjectAltNames</code></td><td><code>string[]</code></td><td>实施此服务的工作负载实例允许使用的使用者备用名称列表。此信息用于强制执行安全命名。如果指定，则代理将验证服务器证书的使用者备用名称是否与指定值之一匹配。</td><td>No</td></tr></tbody></table><h3 id="ServiceEntry-Location"><a href="#ServiceEntry-Location" class="headerlink" title="ServiceEntry.Location"></a>ServiceEntry.Location</h3><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>MESH_EXTERNAL</code></td><td>表示服务在网格外部。通常用于指示通过API使用的外部服务。</td></tr><tr><td><code>MESH_INTERNAL</code></td><td>表示服务是网格的一部分。通常用于指示在扩展服务网格以包括不受管理的基础架构时显式添加的服务</td></tr></tbody></table><p>具体细节的参数明细可查阅： <a href="https://preliminary.istio.io/zh/docs/reference/config/networking/service-entry" target="_blank" rel="noopener">https://preliminary.istio.io/zh/docs/reference/config/networking/service-entry</a> </p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p> <a href="https://preliminary.istio.io/zh/docs/concepts/traffic-management/#service-entries" target="_blank" rel="noopener">https://preliminary.istio.io/zh/docs/concepts/traffic-management/#service-entries</a> </p><p> <a href="https://preliminary.istio.io/zh/docs/reference/config/networking/service-entry" target="_blank" rel="noopener">https://preliminary.istio.io/zh/docs/reference/config/networking/service-entry</a> </p><p> <a href="https://skyao.io/learning-istio/crd/network/serviceentry.html" target="_blank" rel="noopener">https://skyao.io/learning-istio/crd/network/serviceentry.html</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Istio-ServiceEntry-外部服务引入&quot;&gt;&lt;a href=&quot;#Istio-ServiceEntry-外部服务引入&quot; class=&quot;headerlink&quot; title=&quot;Istio  ServiceEntry 外部服务引入&quot;&gt;&lt;/a&gt;Istio  ServiceEntry 外部服务引入&lt;/h2&gt;&lt;h3 id=&quot;概念及示例&quot;&gt;&lt;a href=&quot;#概念及示例&quot; class=&quot;headerlink&quot; title=&quot;概念及示例&quot;&gt;&lt;/a&gt;概念及示例&lt;/h3&gt;&lt;p&gt;使用服务入口&lt;code&gt;Service Entry&lt;/code&gt;来添加一个入口到 Istio 内部维护的服务注册中心。添加了服务入口后，Envoy 代理可以向服务发送流量，就好像它是网格内部的服务一样。配置服务入口允许您管理运行在网格外的服务的流量，它包括以下几种能力：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为外部目标 redirect 和转发请求，例如来自 web 端的 API 调用，或者流向遗留老系统的服务。&lt;/li&gt;
&lt;li&gt;为外部目标定义重试、超时和故障注入策略。&lt;/li&gt;
&lt;li&gt;添加一个运行在虚拟机的服务来扩展您的网格。&lt;/li&gt;
&lt;li&gt;从逻辑上添加来自不同集群的服务到网格，在 Kubernetes 上实现一个&lt;a href=&quot;https://preliminary.istio.io/zh/docs/setup/install/multicluster/gateways/#configure-the-example-services&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;多集群 Istio 网格&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="istio" scheme="http://haoyunlaile.github.io/categories/istio/"/>
    
    
      <category term="istio" scheme="http://haoyunlaile.github.io/tags/istio/"/>
    
      <category term="istio-serviceentry" scheme="http://haoyunlaile.github.io/tags/istio-serviceentry/"/>
    
  </entry>
  
  <entry>
    <title>Istio DestinationRule</title>
    <link href="http://haoyunlaile.github.io/2020/istio/istio-destinationrule/"/>
    <id>http://haoyunlaile.github.io/2020/istio/istio-destinationrule/</id>
    <published>2020-04-28T11:00:00.000Z</published>
    <updated>2020-04-28T11:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Istio-DestinationRule-目标规则"><a href="#Istio-DestinationRule-目标规则" class="headerlink" title="Istio  DestinationRule 目标规则"></a>Istio  DestinationRule 目标规则</h2><h3 id="概念及示例"><a href="#概念及示例" class="headerlink" title="概念及示例"></a>概念及示例</h3><p>与<code>VirtualService</code>一样，<code>DestinationRule</code>也是 Istio 流量路由功能的关键部分。您可以将虚拟服务视为将流量如何路由到给定目标地址，然后使用目标规则来配置该目标的流量。在评估虚拟服务路由规则之后，目标规则将应用于流量的“真实”目标地址。</p><p>特别是，您可以使用目标规则来指定命名的服务子集，例如按版本为所有给定服务的实例分组。然后可以在虚拟服务的路由规则中使用这些服务子集来控制到服务不同实例的流量。</p><p>目标规则还允许您在调用整个目的地服务或特定服务子集时定制 Envoy 的流量策略，比如您喜欢的负载均衡模型、TLS 安全模式或熔断器设置。在目标规则参考中可以看到目标规则选项的完整列表。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DestinationRule</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-destination-rule</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">my-svc</span></span><br><span class="line">  <span class="attr">trafficPolicy:</span></span><br><span class="line">    <span class="attr">loadBalancer:</span></span><br><span class="line">      <span class="attr">simple:</span> <span class="string">RANDOM</span></span><br><span class="line">  <span class="attr">subsets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">v1</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">v2</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">version:</span> <span class="string">v2</span></span><br><span class="line">    <span class="attr">trafficPolicy:</span></span><br><span class="line">      <span class="attr">loadBalancer:</span></span><br><span class="line">        <span class="attr">simple:</span> <span class="string">ROUND_ROBIN</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">v3</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">version:</span> <span class="string">v3</span></span><br></pre></td></tr></table></figure><p>每个子集都是基于一个或多个 <code>labels</code> 定义的，在 Kubernetes 中它是附加到像 Pod 这种对象上的键/值对。这些标签应用于 Kubernetes 服务的 Deployment 并作为 <code>metadata</code> 来识别不同的版本。</p><p>除了定义子集之外，目标规则对于所有子集都有默认的流量策略，而对于该子集，则有特定于子集的策略覆盖它。定义在 <code>subsets</code> 上的默认策略，为 <code>v1</code> 和 <code>v3</code> 子集设置了一个简单的随机负载均衡器。在 <code>v2</code> 策略中，轮询负载均衡器被指定在相应的子集字段上。</p><h3 id="host字段"><a href="#host字段" class="headerlink" title="host字段"></a>host字段</h3><p>使用 Kubernetes <code>Service</code>的短名称。含义同VirtualService 中destination 的 host字段一致。服务 一定要存在于对应的服务注册中心中，否则会被忽略。</p><h3 id="loadBalancer字段"><a href="#loadBalancer字段" class="headerlink" title="loadBalancer字段"></a>loadBalancer字段</h3><p>默认情况下，Istio 使用轮询的负载均衡策略，实例池中的每个实例依次获取请求。Istio 同时支持如下的负载均衡模型，可以在 <code>DestinationRule</code> 中为流向某个特定服务或服务子集的流量指定这些模型。</p><ul><li>随机：请求以随机的方式转到池中的实例。</li><li>权重：请求根据指定的百分比转到实例。</li><li>最少请求：请求被转到最少被访问的实例。</li></ul><h3 id="subsets字段"><a href="#subsets字段" class="headerlink" title="subsets字段"></a>subsets字段</h3><p><code>subsets</code>是服务端点的集合，可以用于 A/B 测试或者分版本路由等场景。可以将一个服务的流量切分成N份供客户端分场景使用。<code>name</code>字段定义后主要供 <code>VirtualService</code> 里destination 使用。 每个子集都是在<code>host</code>对应服务的基础上基于一个或多个 <code>labels</code> 定义的，在 Kubernetes 中它是附加到像 Pod 这种对象上的键/值对。这些标签应用于 Kubernetes 服务的 Deployment 并作为 <code>metadata</code> 来识别不同的版本。 </p><h2 id="DestinationRule配置"><a href="#DestinationRule配置" class="headerlink" title="DestinationRule配置"></a>DestinationRule配置</h2><table><thead><tr><th>Field</th><th>Type</th><th>Description</th><th>Required</th></tr></thead><tbody><tr><td><code>host</code></td><td><code>string</code></td><td>表示规则的适用对象，取值是在服务注册中心注册的服务名，可以是网格内的服务，也可以是以 ServiceEnrty 方式注册的网格外的服务。如果这个服务名在服务注册中心不存在，则这个规则无效。host 如果取短域名，则会根据规则所在的命名空间进行解析。</td><td>Yes</td></tr><tr><td><code>trafficPolicy</code></td><td><code>TrafficPolicy</code></td><td>流量策略，包括负载均衡、连接池策略、异常点检查等</td><td>No</td></tr><tr><td><code>subsets</code></td><td><code>Subset[]</code></td><td>是定义的一个服务的子集，经常用来定义一个服务版本，结合 VirtualService 使用</td><td>No</td></tr><tr><td><code>exportTo</code></td><td><code>string[]</code></td><td>当前destination rule要导出的 namespace 列表。 应用于 service 的 destination rule 的解析发生在 namespace 层次结构的上下文中。 destination rule 的导出允许将其包含在其他 namespace 中的服务的解析层次结构中。 此功能为服务所有者和网格管理员提供了一种机制，用于控制跨 namespace 边界的 destination rule 的可见性<br/>如果未指定任何 namespace，则默认情况下将 destination rule 导出到所有 namespace<br/>值<code>.</code> 被保留，用于定义导出到 destination rule 被声明所在的相同 namespace 。类似的值<code>*</code>保留，用于定义导出到所有 namespaces<br/>NOTE：在当前版本中，exportTo值被限制为<code>.</code>或<code>*</code>（即， 当前namespace或所有namespace）</td><td>No</td></tr></tbody></table><h3 id="subsets配置"><a href="#subsets配置" class="headerlink" title="subsets配置"></a>subsets配置</h3><table><thead><tr><th>Field</th><th>Type</th><th>Description</th><th>Required</th></tr></thead><tbody><tr><td><code>name</code></td><td><code>string</code></td><td>服务名和 <code>subset</code> 名称可以用于路由规则中的流量拆分</td><td>Yes</td></tr><tr><td><code>labels</code></td><td><code>map</code></td><td>使用标签对服务注册表中的服务端点进行筛选</td><td>No</td></tr><tr><td><code>trafficPolicy</code></td><td><code>TrafficPolicy</code></td><td>应用到这一 <code>subset</code> 的流量策略。缺省情况下 <code>subset</code> 会继承 <code>DestinationRule</code> 级别的策略，这一字段的定义则会覆盖缺省的继承策略</td><td>No</td></tr></tbody></table><p>具体细节的参数明细可查阅：<a href="https://preliminary.istio.io/zh/docs/reference/config/networking/destination-rule/#DestinationRule" target="_blank" rel="noopener">https://preliminary.istio.io/zh/docs/reference/config/networking/destination-rule/#DestinationRule</a> </p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p> <a href="https://preliminary.istio.io/zh/docs/concepts/traffic-management/#destination-rules" target="_blank" rel="noopener">https://preliminary.istio.io/zh/docs/concepts/traffic-management/#destination-rules</a> </p><p> <a href="https://preliminary.istio.io/zh/docs/reference/config/networking/destination-rule/" target="_blank" rel="noopener">https://preliminary.istio.io/zh/docs/reference/config/networking/destination-rule/</a> </p><p> <a href="https://preliminary.istio.io/zh/docs/reference/config/networking/destination-rule/#DestinationRule" target="_blank" rel="noopener">https://preliminary.istio.io/zh/docs/reference/config/networking/destination-rule/#DestinationRule</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Istio-DestinationRule-目标规则&quot;&gt;&lt;a href=&quot;#Istio-DestinationRule-目标规则&quot; class=&quot;headerlink&quot; title=&quot;Istio  DestinationRule 目标规则&quot;&gt;&lt;/a&gt;Istio  
      
    
    </summary>
    
    
      <category term="istio" scheme="http://haoyunlaile.github.io/categories/istio/"/>
    
    
      <category term="istio" scheme="http://haoyunlaile.github.io/tags/istio/"/>
    
      <category term="istio-destinationrule" scheme="http://haoyunlaile.github.io/tags/istio-destinationrule/"/>
    
  </entry>
  
  <entry>
    <title>Istio VirtualService</title>
    <link href="http://haoyunlaile.github.io/2020/istio/istio-virtualservice/"/>
    <id>http://haoyunlaile.github.io/2020/istio/istio-virtualservice/</id>
    <published>2020-04-28T05:00:00.000Z</published>
    <updated>2020-04-28T05:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Istio-VirtualService-虚拟服务"><a href="#Istio-VirtualService-虚拟服务" class="headerlink" title="Istio  VirtualService 虚拟服务"></a>Istio  VirtualService 虚拟服务</h2><h3 id="概念及示例"><a href="#概念及示例" class="headerlink" title="概念及示例"></a>概念及示例</h3><p><code>VirtualService</code> 描述了一个或多个用户可寻址目标到网格内实际工作负载之间的映射 。 虚拟服务让您配置如何在服务网格内将请求路由到服务，这基于 Istio 和平台提供的基本的连通性和服务发现能力。每个虚拟服务包含一组路由规则，Istio 按顺序评估它们，Istio 将每个给定的请求匹配到虚拟服务指定的实际目标地址。您的网格可以有多个虚拟服务，也可以没有，取决于您的使用场景。 </p><p>虚拟服务在增强 Istio 流量管理的灵活性和有效性方面，发挥着至关重要的作用，通过对客户端请求的目标地址与真实响应请求的目标工作负载进行解耦来实现。虚拟服务同时提供了丰富的方式，为发送至这些工作负载的流量指定不同的路由规则。 </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">VirtualService</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">reviews</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">hosts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">reviews</span></span><br><span class="line">  <span class="attr">gateways:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">bookinfo-gateway</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">mesh</span></span><br><span class="line">  <span class="attr">http:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">match:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">headers:</span></span><br><span class="line">        <span class="attr">end-user:</span></span><br><span class="line">          <span class="attr">exact:</span> <span class="string">jason</span></span><br><span class="line">    <span class="attr">route:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">destination:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="string">reviews</span></span><br><span class="line">        <span class="attr">subset:</span> <span class="string">v2</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">route:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">destination:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="string">reviews</span></span><br><span class="line">        <span class="attr">subset:</span> <span class="string">v3</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="gateways字段"><a href="#gateways字段" class="headerlink" title="gateways字段"></a>gateways字段</h3><p>通过将 <code>VirtualService</code> 绑定到同一 Host 的 <code>Gateway</code> 配置（如前一节所述 ），可向网格外部暴露这些 Host。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gateways:</span><br><span class="line"><span class="bullet">  - </span>bookinfo-gateway</span><br><span class="line"><span class="bullet">  - </span>mesh</span><br></pre></td></tr></table></figure><p>网格内部通信存在一个默认的<code>mesh</code> 保留字， <code>mesh</code> 用来指代网格中的所有 Sidecar。当这一字段被省略时，就会使用缺省值（<code>mesh</code>），也就是针对网格中的所有 Sidecar 生效。如果提供了 <code>gateways</code> 字段，这一规则就只会应用到声明的 <code>Gateway</code> 之中。要让规则同时对 <code>Gateway</code> 和网格内服务生效，需要显式的将 <code>mesh</code> 加入 <code>gateways</code> 列表。 </p><h3 id="Hosts字段"><a href="#Hosts字段" class="headerlink" title="Hosts字段"></a>Hosts字段</h3><p><code>VirtualService</code> 中  <code>hosts</code> 字段列举虚拟服务的目标主机 ——即用户指定的目标或是路由规则设定的目标。这是客户端向服务发送请求时使用的一个或多个地址 。  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hosts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">bookinfo.com</span></span><br></pre></td></tr></table></figure><p>虚拟服务目的地可以是 IP 地址、DNS 名称，或者依赖于平台的一个简称（例如 Kubernetes 服务的短名称），隐式或显式地指向一个完全限定域名（FQDN）。您也可以使用通配符（“*”）前缀，让您创建一组匹配所有服务的路由规则。虚拟服务的 <code>hosts</code> 字段实际上不必是 Istio 服务注册的一部分，它只是虚拟的目标地址。这让您可以为没有路由到网格内部的虚拟主机建模。 </p><h3 id="路由规则"><a href="#路由规则" class="headerlink" title="路由规则"></a>路由规则</h3><p>在 <code>http</code> 字段包含了虚拟服务的路由规则，用来描述匹配条件和路由行为，它们把 HTTP/1.1、HTTP2 和 gRPC 等流量发送到 hosts 字段指定的目标（您也可以用 <code>tcp</code> 和 <code>tls</code> 片段流量设置路由规则）。一个路由规则包含了指定的请求要流向哪个目标地址，具有 0 或多个匹配条件，取决于您的使用场景。 </p><h4 id="匹配条件"><a href="#匹配条件" class="headerlink" title="匹配条件"></a>匹配条件</h4><p>示例中的第一个路由规则有一个条件，因此以 <code>match</code> 字段开始。在本例中，您希望此路由应用于来自 ”jason“ 用户的所有请求，所以使用 <code>headers</code>、<code>end-user</code> 和 <code>exact</code> 字段选择适当的请求。 </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">match:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">headers:</span></span><br><span class="line">       <span class="attr">end-user:</span></span><br><span class="line">         <span class="attr">exact:</span> <span class="string">jason</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">VirtualService</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ratings-route</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">hosts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ratings.prod.svc.cluster.local</span></span><br><span class="line">  <span class="attr">http:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">match:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">headers:</span></span><br><span class="line">        <span class="attr">end-user:</span></span><br><span class="line">          <span class="attr">exact:</span> <span class="string">jason</span></span><br><span class="line">      <span class="attr">uri:</span></span><br><span class="line">        <span class="attr">prefix:</span> <span class="string">"/ratings/v2/"</span></span><br><span class="line">      <span class="attr">ignoreUriCase:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">route:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">destination:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="string">ratings.prod.svc.cluster.local</span></span><br></pre></td></tr></table></figure><h4 id="Destination"><a href="#Destination" class="headerlink" title="Destination"></a>Destination</h4><p>route 部分的 <code>destination</code> 字段指定了符合此条件的流量的实际目标地址。与虚拟服务的 <code>hosts</code> 不同，destination 的 host 必须是存在于 Istio 服务注册中心的实际目标地址，否则 Envoy 不知道该将请求发送到哪里。可以是一个有代理的服务网格，或者是一个通过服务入口被添加进来的非网格服务。本示例运行在 Kubernetes 环境中，host 名为一个 Kubernetes 中运行着<code>Service</code> 的名称：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">route:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">destination:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">reviews</span></span><br><span class="line">    <span class="attr">subset:</span> <span class="string">v2</span></span><br></pre></td></tr></table></figure><p>请注意，在该示例和本页其它示例中，为了简单，我们使用 Kubernetes <code>Service</code>的短名称设置 destination 的 host。在评估此规则时，Istio 会添加一个基于虚拟服务命名空间的域后缀，这个虚拟服务包含要获取主机的完全限定名的路由规则。在我们的示例中使用短名称也意味着您可以复制并在任何喜欢的命名空间中尝试它们。</p><blockquote><p> 只有在目标主机和虚拟服务位于相同的 Kubernetes 命名空间时才可以使用这样的短名称 , 建议您在生产环境中指定完全限定的主机名。  </p></blockquote><p>destination 片段还指定了 Kubernetes 服务的子集，将符合此规则条件的请求转入其中。在本例中子集名称是 v2。您可以在DestinationRule章节中看到如何定义服务子集。</p><h3 id="Subset字段"><a href="#Subset字段" class="headerlink" title="Subset字段"></a>Subset字段</h3><p><code>subset</code> 不属于 Istio 创建的 CRD，但是它是一条重要的配置信息，有必要单独说明下。<code>subset</code> 是服务端点的集合，可以用于 A/B 测试或者分版本路由等场景。另外在 <code>subset</code> 中可以覆盖服务级别的即 <code>VirtualService</code> 中的定义的流量策略。</p><p>以下是<code>subset</code> 的配置信息。对于 Kubernetes 中的服务，一个 <code>subset</code> 相当于使用 label 的匹配条件选出来的 <code>Service</code></p><table><thead><tr><th>Field</th><th>Type</th><th>Description</th><th>Required</th></tr></thead><tbody><tr><td><code>name</code></td><td><code>string</code></td><td>服务名和 <code>subset</code> 名称可以用于路由规则中的流量拆分</td><td>Yes</td></tr><tr><td><code>labels</code></td><td><code>map</code></td><td>使用标签对服务注册表中的服务端点进行筛选</td><td>No</td></tr><tr><td><code>trafficPolicy</code></td><td><code>TrafficPolicy</code></td><td>应用到这一 <code>subset</code> 的流量策略。缺省情况下 <code>subset</code> 会继承 <code>DestinationRule</code> 级别的策略，这一字段的定义则会覆盖缺省的继承策略</td><td>No</td></tr></tbody></table><h4 id="路由规则优先级"><a href="#路由规则优先级" class="headerlink" title="路由规则优先级"></a>路由规则优先级</h4><p><strong>路由规则</strong>按从上到下的顺序选择，虚拟服务中定义的第一条规则有最高优先级。本示例中，不满足第一个路由规则的流量均流向一个默认的目标，该目标在第二条规则中指定。因此，第二条规则没有 match 条件，直接将流量导向 v3 子集。 我们建议提供一个默认的“无条件”或基于权重的规则作为每一个虚拟服务的最后一条规则，从而确保流经虚拟服务的流量至少能够匹配一条路由规则。 </p><h2 id="VirtualService配置"><a href="#VirtualService配置" class="headerlink" title="VirtualService配置"></a>VirtualService配置</h2><table><thead><tr><th>Field</th><th>Type</th><th>Description</th><th>Required</th></tr></thead><tbody><tr><td><code>hosts</code></td><td><code>string[]</code></td><td>流量的目标主机。可以是带有通配符前缀的 DNS 名称，也可以是 IP 地址。根据所在平台情况，还可能使用短名称来代替 FQDN。这种场景下，短名称到 FQDN 的具体转换过程是要靠下层平台完成的。<strong>一个主机名只能在一个 VirtualService 中定义。</strong>同一个 <code>VirtualService</code> 中可以用于控制多个 HTTP 和 TCP 端口的流量属性。Kubernetes 用户注意：当使用服务的短名称时（例如使用 <code>reviews</code>，而不是 <code>reviews.default.svc.cluster.local</code>），Istio 会根据规则所在的命名空间来处理这一名称，而非服务所在的命名空间。假设 “default” 命名空间的一条规则中包含了一个 <code>reviews</code> 的 <code>host</code> 引用，就会被视为 <code>reviews.default.svc.cluster.local</code>，而不会考虑 <code>reviews</code> 服务所在的命名空间。<strong>为了避免可能的错误配置，建议使用 FQDN 来进行服务引用。</strong> <code>hosts</code> 字段对 HTTP 和 TCP 服务都是有效的。网格中的服务也就是在服务注册表中注册的服务，必须使用他们的注册名进行引用；只有 <code>Gateway</code> 定义的服务才可以使用 IP 地址。</td><td>Yes</td></tr><tr><td><code>gateways</code></td><td><code>string[]</code></td><td><code>Gateway</code> 名称列表，Sidecar 会据此使用路由。<code>VirtualService</code> 对象可以用于网格中的 Sidecar，也可以用于一个或多个 <code>Gateway</code>。这里公开的选择条件可以在协议相关的路由过滤条件中进行覆盖。保留字 <code>mesh</code> 用来指代网格中的所有 Sidecar。当这一字段被省略时，就会使用缺省值（<code>mesh</code>），也就是针对网格中的所有 Sidecar 生效。如果提供了 <code>gateways</code> 字段，这一规则就只会应用到声明的 <code>Gateway</code> 之中。要让规则同时对 <code>Gateway</code> 和网格内服务生效，需要显式的将 <code>mesh</code> 加入 <code>gateways</code> 列表。</td><td>No</td></tr><tr><td><code>http</code></td><td><code>HTTPRoute[]</code></td><td>HTTP 流量规则的有序列表。这个列表对名称前缀为 <code>http-</code>、<code>http2-</code>、<code>grpc-</code> 的服务端口，或者协议为 <code>HTTP</code>、<code>HTTP2</code>、<code>GRPC</code> 以及终结的 TLS，另外还有使用 <code>HTTP</code>、<code>HTTP2</code> 以及 <code>GRPC</code> 协议的 <code>ServiceEntry</code> 都是有效的。进入流量会使用匹配到的第一条规则。</td><td>No</td></tr><tr><td><code>tls</code></td><td><code>TLSRoute[]</code></td><td>一个有序列表，对应的是透传 TLS 和 HTTPS 流量。路由过程通常利用 <code>ClientHello</code> 消息中的 SNI 来完成。TLS 路由通常应用在 <code>https-</code>、<code>tls-</code> 前缀的平台服务端口，或者经 <code>Gateway</code> 透传的 HTTPS、TLS 协议端口，以及使用 HTTPS 或者 TLS 协议的 <code>ServiceEntry</code> 端口上。<strong>注意：没有关联 VirtualService 的 https- 或者 tls- 端口流量会被视为透传 TCP 流量。</strong></td><td>No</td></tr><tr><td><code>tcp</code></td><td><code>TCPRoute[]</code></td><td>一个针对透传 TCP 流量的有序路由列表。TCP 路由对所有 HTTP 和 TLS 之外的端口生效。进入流量会使用匹配到的第一条规则。</td><td>No</td></tr><tr><td><code>exportTo</code></td><td><code>string[]</code></td><td>当前vritual service要导出的 namespace 列表。 应用于 vritual service 的解析发生在 namespace 层次结构的上下文中。 vritual service 的导出允许将其包含在其他 namespace 中的服务的解析层次结构中。 此功能为服务所有者和网格管理员提供了一种机制，用于控制跨 namespace 边界的 vritual service 的可见性<br/>如果未指定任何 namespace，则默认情况下将 vritual service rule 导出到所有 namespace<br/>值<code>.</code> 被保留，用于定义导出到 vritual service 被声明所在的相同 namespace 。类似的值<code>*</code>保留，用于定义导出到所有 namespaces<br/>NOTE：在当前版本中，exportTo值被限制为<code>.</code>或<code>*</code>（即， 当前namespace或所有namespace）</td><td></td></tr></tbody></table><h3 id="HTTPRoute配置"><a href="#HTTPRoute配置" class="headerlink" title="HTTPRoute配置"></a>HTTPRoute配置</h3><table><thead><tr><th>Field</th><th>Type</th><th>Description</th><th>Required</th></tr></thead><tbody><tr><td><code>name</code></td><td><code>string</code></td><td>为route分配给路由的名称</td><td>No</td></tr><tr><td><code>match</code></td><td><code>HTTPMatchRequest[]</code></td><td>匹配要激活的规则要满足的条件。单个匹配块内的所有条件都具有AND语义，而匹配块列表具有OR语义。如果任何一个匹配块成功，则匹配该规则。</td><td>No</td></tr><tr><td><code>route</code></td><td><code>HTTPRouteDestination[]</code></td><td>http规则可以重定向或转发（默认）流量</td><td>No</td></tr><tr><td><code>redirect</code></td><td><code>HTTPRedirect</code></td><td>http规则可以重定向或转发（默认）流量. 如果在规则中指定了流量通过选项，则将忽略路由/重定向。重定向原语可用于将HTTP 301重定向发送到其他URI或Authority。</td><td>No</td></tr><tr><td><code>rewrite</code></td><td><code>HTTPRewrite</code></td><td>重写 HTTP URIs and Authority header. 重写不能与重定向原语一起使用</td><td>No</td></tr><tr><td><code>timeout</code></td><td><code>Duration</code></td><td>Timeout for HTTP requests.</td><td>No</td></tr><tr><td><code>retries</code></td><td><code>HTTPRetry</code></td><td>Retry policy for HTTP requests.</td><td>No</td></tr><tr><td><code>fault</code></td><td><code>HTTPFaultInjection</code></td><td>故障注入策略，适用于客户端的HTTP通信。请注意，如果在客户端启用了故障注入策略，则不会启用超时或重试。</td><td>No</td></tr><tr><td><code>mirror</code></td><td><code>Destination</code></td><td>除了将请求转发到预期目标之外，还可以将HTTP流量镜像到另一个目标。</td><td>No</td></tr><tr><td><code>mirrorPercent</code></td><td><code>UInt32Value</code></td><td><code>mirror</code> 字段是设置流量的百分比。如果不存在该字段，则将镜像所有流量（100％）。最大值为100。</td><td>No</td></tr><tr><td><code>corsPolicy</code></td><td><code>CorsPolicy</code></td><td>有关跨源资源共享的更多详细信息，请参考 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS" target="_blank" rel="noopener">CORS</a></td><td>No</td></tr><tr><td><code>headers</code></td><td><code>Headers</code></td><td>Header 规则</td><td>No</td></tr></tbody></table><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">VirtualService</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">bookinfo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">hosts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">bookinfo.com</span></span><br><span class="line">  <span class="attr">http:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">match:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uri:</span></span><br><span class="line">        <span class="attr">prefix:</span> <span class="string">/reviews</span></span><br><span class="line">    <span class="attr">route:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">destination:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="string">reviews</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">match:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uri:</span></span><br><span class="line">        <span class="attr">prefix:</span> <span class="string">/ratings</span></span><br><span class="line">    <span class="attr">route:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">destination:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="string">ratings</span></span><br><span class="line">        <span class="string">...</span></span><br></pre></td></tr></table></figure><h3 id="TCPRoute配置"><a href="#TCPRoute配置" class="headerlink" title="TCPRoute配置"></a>TCPRoute配置</h3><table><thead><tr><th>Field</th><th>Type</th><th>Description</th><th>Required</th></tr></thead><tbody><tr><td><code>match</code></td><td><code>L4MatchAttributes[]</code></td><td>匹配要激活的规则要满足的条件。单个匹配块内的所有条件都具有AND语义，而匹配块列表具有OR语义。如果任何一个匹配块成功，则匹配该规则。</td><td>No</td></tr><tr><td><code>route</code></td><td><code>RouteDestination[]</code></td><td>连接应转发到的目的地</td><td>No</td></tr></tbody></table><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">VirtualService</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">bookinfo-Mongo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">hosts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">mongo.prod.svc.cluster.local</span></span><br><span class="line">  <span class="attr">tcp:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">match:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">27017</span></span><br><span class="line">    <span class="attr">route:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">destination:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="string">mongo.backup.svc.cluster.local</span></span><br><span class="line">        <span class="attr">port:</span></span><br><span class="line">          <span class="attr">number:</span> <span class="number">5555</span></span><br></pre></td></tr></table></figure><h3 id="TLSRoute配置"><a href="#TLSRoute配置" class="headerlink" title="TLSRoute配置"></a>TLSRoute配置</h3><table><thead><tr><th>Type</th><th>Type</th><th>Description</th><th>Required</th></tr></thead><tbody><tr><td><code>match</code></td><td><code>TLSMatchAttributes[]</code></td><td>匹配要激活的规则要满足的条件。单个匹配块内的所有条件都具有AND语义，而匹配块列表具有OR语义。如果任何一个匹配块成功，则匹配该规则。</td><td>Yes</td></tr><tr><td><code>route</code></td><td><code>RouteDestination[]</code></td><td>连接应转发到的目的地</td><td>No</td></tr></tbody></table><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">VirtualService</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">bookinfo-sni</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">hosts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"*.bookinfo.com"</span></span><br><span class="line">  <span class="attr">gateways:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">mygateway</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">match:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">      <span class="attr">sniHosts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">login.bookinfo.com</span></span><br><span class="line">    <span class="attr">route:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">destination:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="string">login.prod.svc.cluster.local</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">match:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">      <span class="attr">sniHosts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">reviews.bookinfo.com</span></span><br><span class="line">    <span class="attr">route:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">destination:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="string">reviews.prod.svc.cluster.local</span></span><br></pre></td></tr></table></figure><p>具体细节的参数明细可查阅：<a href="https://preliminary.istio.io/zh/docs/reference/config/networking/virtual-service/#VirtualService" target="_blank" rel="noopener">https://preliminary.istio.io/zh/docs/reference/config/networking/virtual-service/#VirtualService</a></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p> <a href="https://preliminary.istio.io/zh/docs/concepts/traffic-management/#virtual-services" target="_blank" rel="noopener">https://preliminary.istio.io/zh/docs/concepts/traffic-management/#virtual-services</a> </p><p> <a href="https://preliminary.istio.io/zh//blog/2018/v1alpha3-routing/" target="_blank" rel="noopener">https://preliminary.istio.io/zh//blog/2018/v1alpha3-routing/</a></p><p> <a href="https://preliminary.istio.io/zh/docs/reference/config/networking/virtual-service/#VirtualService" target="_blank" rel="noopener">https://preliminary.istio.io/zh/docs/reference/config/networking/virtual-service/#VirtualService</a></p><p> <a href="https://jimmysong.io/istio-handbook/concepts/traffic-management-basic.html" target="_blank" rel="noopener">https://jimmysong.io/istio-handbook/concepts/traffic-management-basic.html</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Istio-VirtualService-虚拟服务&quot;&gt;&lt;a href=&quot;#Istio-VirtualService-虚拟服务&quot; class=&quot;headerlink&quot; title=&quot;Istio  VirtualService 虚拟服务&quot;&gt;&lt;/a&gt;Istio  VirtualService 虚拟服务&lt;/h2&gt;&lt;h3 id=&quot;概念及示例&quot;&gt;&lt;a href=&quot;#概念及示例&quot; class=&quot;headerlink&quot; title=&quot;概念及示例&quot;&gt;&lt;/a&gt;概念及示例&lt;/h3&gt;&lt;p&gt;&lt;code&gt;VirtualService&lt;/code&gt; 描述了一个或多个用户可寻址目标到网格内实际工作负载之间的映射 。 虚拟服务让您配置如何在服务网格内将请求路由到服务，这基于 Istio 和平台提供的基本的连通性和服务发现能力。每个虚拟服务包含一组路由规则，Istio 按顺序评估它们，Istio 将每个给定的请求匹配到虚拟服务指定的实际目标地址。您的网格可以有多个虚拟服务，也可以没有，取决于您的使用场景。 &lt;/p&gt;
&lt;p&gt;虚拟服务在增强 Istio 流量管理的灵活性和有效性方面，发挥着至关重要的作用，通过对客户端请求的目标地址与真实响应请求的目标工作负载进行解耦来实现。虚拟服务同时提供了丰富的方式，为发送至这些工作负载的流量指定不同的路由规则。 &lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;networking.istio.io/v1alpha3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;VirtualService&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;reviews&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;hosts:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;reviews&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;gateways:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;bookinfo-gateway&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;mesh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;http:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;match:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;headers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;end-user:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;exact:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;jason&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;route:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;destination:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;host:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;reviews&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;subset:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;v2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;route:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;destination:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;host:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;reviews&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;subset:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;v3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="istio" scheme="http://haoyunlaile.github.io/categories/istio/"/>
    
    
      <category term="istio" scheme="http://haoyunlaile.github.io/tags/istio/"/>
    
      <category term="istio-virtualservice" scheme="http://haoyunlaile.github.io/tags/istio-virtualservice/"/>
    
  </entry>
  
  <entry>
    <title>Istio Gateway</title>
    <link href="http://haoyunlaile.github.io/2020/istio/istio-gateway/"/>
    <id>http://haoyunlaile.github.io/2020/istio/istio-gateway/</id>
    <published>2020-04-26T16:00:00.000Z</published>
    <updated>2020-04-26T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Istio-Ingress-Gateway-概述"><a href="#Istio-Ingress-Gateway-概述" class="headerlink" title="Istio  Ingress Gateway 概述"></a>Istio  Ingress Gateway 概述</h2><p><img data-src="/images/istio-gateways.svg" alt="istio-gateways"></p><p>​                                                                    <em>Istio 服务网格中的网关</em> </p><p>使用网关为网格来管理入站和出站流量，可以让用户指定要进入或离开网格的流量。</p><p>网关配置被用于运行在网格内独立 Envoy 代理中，而不是服务工作负载的应用 Sidecar 代理。</p><p> <a href="https://preliminary.istio.io/zh/docs/reference/config/networking/gateway/" target="_blank" rel="noopener"><code>Gateway</code></a> 用于为 HTTP / TCP 流量配置负载均衡器，并不管该负载均衡器将在哪里运行。网格中可以存在任意数量的 <a href="https://preliminary.istio.io/zh/docs/reference/config/networking/gateway/" target="_blank" rel="noopener"><code>Gateway</code></a>，并且多个不同的 <a href="https://preliminary.istio.io/zh/docs/reference/config/networking/gateway/" target="_blank" rel="noopener"><code>Gateway</code></a> 实现可以共存。实际上，通过在配置中指定一组工作负载（Pod）标签，可以将 Gateway 配置绑定到特定的工作负载，从而允许用户通过编写简单的 Gateway Controller 来重用现成的网络设备。</p><p><code>Gateway</code> 只用于配置 L4-L6 功能（例如，对外公开的端口，TLS 配置），所有主流的 L7 代理均以统一的方式实现了这些功能。然后，通过在 <code>Gateway</code> 上绑定 <code>VirtualService</code> 的方式，可以使用标准的 Istio 规则来控制进入 <code>Gateway</code> 的 HTTP 和 TCP 流量。 </p><a id="more"></a> <p>例如，下面这个简单的 <code>Gateway</code> 配置了一个 Load Balancer，以允许访问 host <code>bookinfo.com</code> 的 https 外部流量进入网格中： </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Gateway</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">bookinfo-gateway</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-ingress-gateway</span></span><br><span class="line">  <span class="attr">servers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span></span><br><span class="line">      <span class="attr">number:</span> <span class="number">443</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">https</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">HTTPS</span></span><br><span class="line">    <span class="attr">hosts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">bookinfo.com</span></span><br><span class="line">    <span class="attr">tls:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">SIMPLE</span></span><br><span class="line">      <span class="attr">serverCertificate:</span> <span class="string">/tmp/tls.crt</span></span><br><span class="line">      <span class="attr">privateKey:</span> <span class="string">/tmp/tls.key</span></span><br></pre></td></tr></table></figure><p> 要为进入上面的 Gateway 的流量配置相应的路由，必须为同一个 host 定义一个 <code>VirtualService</code>（在下一节中描述），并使用配置中的 <code>gateways</code> 字段绑定到前面定义的 <code>Gateway</code> 上： </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">VirtualService</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">bookinfo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">hosts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">bookinfo.com</span></span><br><span class="line">  <span class="attr">gateways:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">bookinfo-gateway</span> <span class="comment"># &lt;---- bind to gateway</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">match:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uri:</span></span><br><span class="line">        <span class="attr">prefix:</span> <span class="string">/reviews</span></span><br><span class="line">    <span class="attr">route:</span></span><br><span class="line">    <span class="string">...</span></span><br></pre></td></tr></table></figure><p>然后就可以为出口流量配置带有路由规则的虚拟服务。 </p><h3 id="Gateway-配置信息"><a href="#Gateway-配置信息" class="headerlink" title="Gateway 配置信息"></a><code>Gateway</code> 配置信息</h3><table><thead><tr><th>Field</th><th>Type</th><th>Description</th><th>Required</th></tr></thead><tbody><tr><td>servers</td><td>Server[]</td><td>开放的服务列表</td><td>是</td></tr><tr><td>selector</td><td>map</td><td>通过这个Label来找到执行 Gateway 规则的 Envoy</td><td>是</td></tr></tbody></table><h3 id="Server-配置信息"><a href="#Server-配置信息" class="headerlink" title="Server 配置信息"></a><code>Server</code> 配置信息</h3><table><thead><tr><th>Field</th><th>Type</th><th>Description</th><th>Required</th></tr></thead><tbody><tr><td><code>port</code></td><td><code>Port</code></td><td>服务对外监听的端口</td><td>是</td></tr><tr><td><code>hosts</code></td><td><code>string[]</code></td><td>Gateway 发布的服务地址，是一个 FQDN 域名，可以支持左侧通配符来进行模糊查询</td><td>是</td></tr><tr><td><code>tls</code></td><td><code>TLSOptions</code></td><td>TLS安全配置</td><td>否</td></tr><tr><td><code>defaultEndpoint</code></td><td><code>string</code></td><td>默认情况下，应将流量转发到的环回IP端点或Unix域套接字</td><td>否</td></tr></tbody></table><h3 id="Port-配置信息"><a href="#Port-配置信息" class="headerlink" title="Port 配置信息"></a><code>Port</code> 配置信息</h3><table><thead><tr><th>Field</th><th>Type</th><th>Description</th><th>Required</th></tr></thead><tbody><tr><td><code>number</code></td><td><code>uint32</code></td><td>一个有效的端口号</td><td>是</td></tr><tr><td><code>protocol</code></td><td><code>string</code></td><td>所使用的协议，支持HTTP|HTTPS|GRPC|HTTP2|MONGO|TCP|TLS.</td><td>是</td></tr><tr><td><code>name</code></td><td><code>string</code></td><td>给端口分配一个名称</td><td>否</td></tr></tbody></table><h3 id="Server-TLSOptions-配置信息"><a href="#Server-TLSOptions-配置信息" class="headerlink" title="Server.TLSOptions 配置信息"></a><code>Server.TLSOptions</code> 配置信息</h3><table><thead><tr><th>Field</th><th>Type</th><th>Description</th><th>Required</th></tr></thead><tbody><tr><td><code>httpsRedirect</code></td><td><code>bool</code></td><td>是否要做 HTTP 重定向</td><td>否</td></tr><tr><td><code>mode</code></td><td><code>TLSmode</code></td><td>在配置的外部端口上使用 TLS 服务时，可以取 PASSTHROUGH、SIMPLE、MUTUAL、AUTO_PASSTHROUGH 这 4 种模式</td><td>否</td></tr><tr><td><code>serverCertificate</code></td><td><code>string</code></td><td>服务端证书的路径。当模式是 SIMPLE 和 MUTUAL 时必须指定</td><td>否</td></tr><tr><td><code>privateKey</code></td><td><code>string</code></td><td>服务端密钥的路径。当模式是 SIMPLE 和 MUTUAL 时必须指定</td><td>否</td></tr><tr><td><code>caCertificates</code></td><td><code>string</code></td><td>CA 证书路径。当模式是 MUTUAL 时指定</td><td>否</td></tr><tr><td><code>credentialName</code></td><td><code>string</code></td><td>用于唯一标识服务端证书和秘钥。Gateway 使用 credentialName 从远端的凭证存储中获取证书和秘钥，而不是使用 Mount 的文件</td><td>否</td></tr><tr><td><code>subjectAltNames</code></td><td><code>string[]</code></td><td>SAN 列表，SubjectAltName 允许一个证书指定多个域名</td><td>否</td></tr><tr><td><code>verifyCertificateSpki</code></td><td><code>string[]</code></td><td>授权客户端证书的SKPI的base64编码的SHA-256哈希值的可选列表</td><td>否</td></tr><tr><td><code>verifyCertificateHash</code></td><td><code>string[]</code></td><td>授权客户端证书的十六进制编码SHA-256哈希值的可选列表</td><td>否</td></tr><tr><td><code>minProtocolVersion</code></td><td><code>TLSProtocol</code></td><td>TLS 协议的最小版本</td><td>否</td></tr><tr><td><code>maxProtocolVersion</code></td><td><code>TLSProtocol</code></td><td>TLS 协议的最大版本</td><td>否</td></tr><tr><td><code>cipherSuites</code></td><td><code>string[]</code></td><td>指定的加密套件，默认使用 Envoy 支持的加密套件</td><td>否</td></tr></tbody></table><h3 id="Server-TLSOptions-TLSmode-配置信息"><a href="#Server-TLSOptions-TLSmode-配置信息" class="headerlink" title="Server.TLSOptions.TLSmode 配置信息"></a><code>Server.TLSOptions.TLSmode</code> 配置信息</h3><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>PASSTHROUGH</code></td><td>客户端提供的SNI字符串将用作VirtualService TLS路由中的匹配条件，以根据服务注册表确定目标服务</td></tr><tr><td><code>SIMPLE</code></td><td>使用标准TLS语义的安全连接</td></tr><tr><td><code>MUTUAL</code></td><td>通过提供服务器证书进行身份验证，使用双边TLS来保护与下游的连接</td></tr><tr><td><code>AUTO_PASSTHROUGH</code></td><td>与直通模式相似，不同之处在于具有此TLS模式的服务器不需要关联的VirtualService即可从SNI值映射到注册表中的服务。目标详细信息（例如服务/子集/端口）被编码在SNI值中。代理将转发到SNI值指定的上游（Envoy）群集（一组端点）。</td></tr><tr><td><code>ISTIO_MUTUAL</code></td><td>通过提供用于身份验证的服务器证书，使用相互TLS使用来自下游的安全连接</td></tr></tbody></table><h3 id="Server-TLSOptions-TLSProtocol-配置信息"><a href="#Server-TLSOptions-TLSProtocol-配置信息" class="headerlink" title="Server.TLSOptions.TLSProtocol 配置信息"></a><code>Server.TLSOptions.TLSProtocol</code> 配置信息</h3><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>TLS_AUTO</code></td><td>自动选择DLS版本</td></tr><tr><td><code>TLSV1_0</code></td><td>TLS 1.0</td></tr><tr><td><code>TLSV1_1</code></td><td>TLS 1.1</td></tr><tr><td><code>TLSV1_2</code></td><td>TLS 1.2</td></tr><tr><td><code>TLSV1_3</code></td><td>TLS 1.3</td></tr></tbody></table><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p> <a href="https://preliminary.istio.io/zh/docs/concepts/traffic-management/#gateways" target="_blank" rel="noopener">https://preliminary.istio.io/zh/docs/concepts/traffic-management/#gateways</a> </p><p> <a href="https://preliminary.istio.io/zh//blog/2018/v1alpha3-routing/" target="_blank" rel="noopener">https://preliminary.istio.io/zh//blog/2018/v1alpha3-routing/</a></p><p> <a href="https://preliminary.istio.io/zh/docs/reference/config/networking/gateway/#Gateway" target="_blank" rel="noopener">https://preliminary.istio.io/zh/docs/reference/config/networking/gateway/#Gateway</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Istio-Ingress-Gateway-概述&quot;&gt;&lt;a href=&quot;#Istio-Ingress-Gateway-概述&quot; class=&quot;headerlink&quot; title=&quot;Istio  Ingress Gateway 概述&quot;&gt;&lt;/a&gt;Istio  Ingress Gateway 概述&lt;/h2&gt;&lt;p&gt;&lt;img data-src=&quot;/images/istio-gateways.svg&quot; alt=&quot;istio-gateways&quot;&gt;&lt;/p&gt;
&lt;p&gt;​                                                                    &lt;em&gt;Istio 服务网格中的网关&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;使用网关为网格来管理入站和出站流量，可以让用户指定要进入或离开网格的流量。&lt;/p&gt;
&lt;p&gt;网关配置被用于运行在网格内独立 Envoy 代理中，而不是服务工作负载的应用 Sidecar 代理。&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://preliminary.istio.io/zh/docs/reference/config/networking/gateway/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Gateway&lt;/code&gt;&lt;/a&gt; 用于为 HTTP / TCP 流量配置负载均衡器，并不管该负载均衡器将在哪里运行。网格中可以存在任意数量的 &lt;a href=&quot;https://preliminary.istio.io/zh/docs/reference/config/networking/gateway/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Gateway&lt;/code&gt;&lt;/a&gt;，并且多个不同的 &lt;a href=&quot;https://preliminary.istio.io/zh/docs/reference/config/networking/gateway/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Gateway&lt;/code&gt;&lt;/a&gt; 实现可以共存。实际上，通过在配置中指定一组工作负载（Pod）标签，可以将 Gateway 配置绑定到特定的工作负载，从而允许用户通过编写简单的 Gateway Controller 来重用现成的网络设备。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Gateway&lt;/code&gt; 只用于配置 L4-L6 功能（例如，对外公开的端口，TLS 配置），所有主流的 L7 代理均以统一的方式实现了这些功能。然后，通过在 &lt;code&gt;Gateway&lt;/code&gt; 上绑定 &lt;code&gt;VirtualService&lt;/code&gt; 的方式，可以使用标准的 Istio 规则来控制进入 &lt;code&gt;Gateway&lt;/code&gt; 的 HTTP 和 TCP 流量。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="istio" scheme="http://haoyunlaile.github.io/categories/istio/"/>
    
    
      <category term="istio" scheme="http://haoyunlaile.github.io/tags/istio/"/>
    
      <category term="istio-gateway" scheme="http://haoyunlaile.github.io/tags/istio-gateway/"/>
    
  </entry>
  
  <entry>
    <title>Istio 使用的端口</title>
    <link href="http://haoyunlaile.github.io/2020/istio/istio-port/"/>
    <id>http://haoyunlaile.github.io/2020/istio/istio-port/</id>
    <published>2020-04-24T16:00:00.000Z</published>
    <updated>2020-04-24T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Istio-常用端口"><a href="#Istio-常用端口" class="headerlink" title="Istio 常用端口"></a>Istio 常用端口</h2><table><thead><tr><th>端口</th><th>协议</th><th align="left">使用者</th><th>描述</th></tr></thead><tbody><tr><td>8060</td><td>HTTP</td><td align="left">Citadel</td><td>GRPC 服务器</td></tr><tr><td>8080</td><td>HTTP</td><td align="left">Citadel agent</td><td>SDS service 监控</td></tr><tr><td>9090</td><td>HTTP</td><td align="left">Prometheus</td><td>Prometheus</td></tr><tr><td>9091</td><td>HTTP</td><td align="left">Mixer</td><td>策略/遥测</td></tr><tr><td>9876</td><td>HTTP</td><td align="left">Citadel, Citadel agent</td><td>ControlZ 用户界面</td></tr><tr><td>9901</td><td>GRPC</td><td align="left">Galley</td><td>网格配置协议</td></tr><tr><td>15000</td><td>TCP</td><td align="left">Envoy</td><td>Envoy 管理端口 (commands/diagnostics)</td></tr><tr><td>15001</td><td>TCP</td><td align="left">Envoy</td><td>Envoy 传出</td></tr><tr><td>15006</td><td>TCP</td><td align="left">Envoy</td><td>Envoy 传入</td></tr><tr><td>15004</td><td>HTTP</td><td align="left">Mixer, Pilot</td><td>策略/遥测 - <code>mTLS</code></td></tr><tr><td>15010</td><td>HTTP</td><td align="left">Pilot</td><td>Pilot service - XDS pilot - 发现</td></tr><tr><td>15011</td><td>TCP</td><td align="left">Pilot</td><td>Pilot service - <code>mTLS</code> - Proxy - 发现</td></tr><tr><td>15014</td><td>HTTP</td><td align="left">Citadel, Citadel agent, Galley, Mixer, Pilot, Sidecar Injector</td><td>控制平面监控</td></tr><tr><td>15020</td><td>HTTP</td><td align="left">Ingress Gateway</td><td>Pilot 健康检查</td></tr><tr><td>15029</td><td>HTTP</td><td align="left">Kiali</td><td>Kiali 用户界面</td></tr><tr><td>15030</td><td>HTTP</td><td align="left">Prometheus</td><td>Prometheus 用户界面</td></tr><tr><td>15031</td><td>HTTP</td><td align="left">Grafana</td><td>Grafana 用户界面</td></tr><tr><td>15032</td><td>HTTP</td><td align="left">Tracing</td><td>Tracing 用户界面</td></tr><tr><td>15443</td><td>TLS</td><td align="left">Ingress and Egress Gateways</td><td>SNI</td></tr><tr><td>15090</td><td>HTTP</td><td align="left">Mixer</td><td>Proxy</td></tr><tr><td>42422</td><td>TCP</td><td align="left">Mixer</td><td>遥测 - Prometheus</td></tr></tbody></table><a id="more"></a> <h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p> <a href="https://preliminary.istio.io/docs/ops/deployment/requirements/" target="_blank" rel="noopener">https://preliminary.istio.io/docs/ops/deployment/requirements/</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Istio-常用端口&quot;&gt;&lt;a href=&quot;#Istio-常用端口&quot; class=&quot;headerlink&quot; title=&quot;Istio 常用端口&quot;&gt;&lt;/a&gt;Istio 常用端口&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;端口&lt;/th&gt;
&lt;th&gt;协议&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;使用者&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;8060&lt;/td&gt;
&lt;td&gt;HTTP&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Citadel&lt;/td&gt;
&lt;td&gt;GRPC 服务器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8080&lt;/td&gt;
&lt;td&gt;HTTP&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Citadel agent&lt;/td&gt;
&lt;td&gt;SDS service 监控&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9090&lt;/td&gt;
&lt;td&gt;HTTP&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Prometheus&lt;/td&gt;
&lt;td&gt;Prometheus&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9091&lt;/td&gt;
&lt;td&gt;HTTP&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Mixer&lt;/td&gt;
&lt;td&gt;策略/遥测&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9876&lt;/td&gt;
&lt;td&gt;HTTP&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Citadel, Citadel agent&lt;/td&gt;
&lt;td&gt;ControlZ 用户界面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9901&lt;/td&gt;
&lt;td&gt;GRPC&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Galley&lt;/td&gt;
&lt;td&gt;网格配置协议&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15000&lt;/td&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Envoy&lt;/td&gt;
&lt;td&gt;Envoy 管理端口 (commands/diagnostics)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15001&lt;/td&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Envoy&lt;/td&gt;
&lt;td&gt;Envoy 传出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15006&lt;/td&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Envoy&lt;/td&gt;
&lt;td&gt;Envoy 传入&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15004&lt;/td&gt;
&lt;td&gt;HTTP&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Mixer, Pilot&lt;/td&gt;
&lt;td&gt;策略/遥测 - &lt;code&gt;mTLS&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15010&lt;/td&gt;
&lt;td&gt;HTTP&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Pilot&lt;/td&gt;
&lt;td&gt;Pilot service - XDS pilot - 发现&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15011&lt;/td&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Pilot&lt;/td&gt;
&lt;td&gt;Pilot service - &lt;code&gt;mTLS&lt;/code&gt; - Proxy - 发现&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15014&lt;/td&gt;
&lt;td&gt;HTTP&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Citadel, Citadel agent, Galley, Mixer, Pilot, Sidecar Injector&lt;/td&gt;
&lt;td&gt;控制平面监控&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15020&lt;/td&gt;
&lt;td&gt;HTTP&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Ingress Gateway&lt;/td&gt;
&lt;td&gt;Pilot 健康检查&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15029&lt;/td&gt;
&lt;td&gt;HTTP&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Kiali&lt;/td&gt;
&lt;td&gt;Kiali 用户界面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15030&lt;/td&gt;
&lt;td&gt;HTTP&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Prometheus&lt;/td&gt;
&lt;td&gt;Prometheus 用户界面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15031&lt;/td&gt;
&lt;td&gt;HTTP&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Grafana&lt;/td&gt;
&lt;td&gt;Grafana 用户界面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15032&lt;/td&gt;
&lt;td&gt;HTTP&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Tracing&lt;/td&gt;
&lt;td&gt;Tracing 用户界面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15443&lt;/td&gt;
&lt;td&gt;TLS&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Ingress and Egress Gateways&lt;/td&gt;
&lt;td&gt;SNI&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15090&lt;/td&gt;
&lt;td&gt;HTTP&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Mixer&lt;/td&gt;
&lt;td&gt;Proxy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;42422&lt;/td&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Mixer&lt;/td&gt;
&lt;td&gt;遥测 - Prometheus&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
    
      <category term="istio" scheme="http://haoyunlaile.github.io/categories/istio/"/>
    
    
      <category term="istio" scheme="http://haoyunlaile.github.io/tags/istio/"/>
    
  </entry>
  
  <entry>
    <title>Istio 1.6架构及性能</title>
    <link href="http://haoyunlaile.github.io/2020/istio/istio-architecture-performance/"/>
    <id>http://haoyunlaile.github.io/2020/istio/istio-architecture-performance/</id>
    <published>2020-04-24T16:00:00.000Z</published>
    <updated>2020-04-24T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Istio-架构"><a href="#Istio-架构" class="headerlink" title="Istio 架构"></a>Istio 架构</h2><p> Istio 服务网格从逻辑上分为数据平面和控制平面。</p><ul><li><strong>数据平面</strong> 由一组智能代理（<a href="https://www.envoyproxy.io/" target="_blank" rel="noopener">Envoy</a>）组成，被部署为 sidecar。这些代理负责协调和控制微服务之间的所有网络通信。他们还收集和报告所有网格流量的遥测数据。</li><li><strong>控制平面</strong> 管理并配置代理来进行流量路由。</li></ul><h2 id="Istio-核心组件"><a href="#Istio-核心组件" class="headerlink" title="Istio 核心组件"></a>Istio 核心组件</h2><p>下图展示了组成每个平面的不同组件： </p><p><img data-src="/images/istio-arch.svg" alt="istio-arch"></p><p> Istio 中的流量分为数据平面流量和控制平面流量。</p><ul><li>数据平面流量是指工作负载的业务逻辑发送和接收的消息</li><li>控制平面流量是指在 Istio 组件之间发送的配置和控制消息用来编排网格的行为</li><li>Istio  中的流量管理特指数据平面流量</li></ul><a id="more"></a> <h3 id="Envoy"><a href="#Envoy" class="headerlink" title="Envoy"></a>Envoy</h3><p>Istio 使用 <a href="https://envoyproxy.github.io/envoy/" target="_blank" rel="noopener">Envoy</a> 代理的扩展版本。Envoy 是用 C++ 开发的高性能代理，用于协调服务网格中所有服务的入站和出站流量。Envoy 代理是唯一与数据平面流量交互的 Istio 组件。</p><p>Envoy 代理被部署为服务的 sidecar，在逻辑上为服务增加了 Envoy 的许多内置特性，例如:</p><ul><li><p>动态服务发现</p></li><li><p>负载均衡</p></li><li><p>TLS 终端</p></li><li><p>HTTP/2 与 gRPC 代理</p></li><li><p>熔断器</p></li><li><p>健康检查</p></li><li><p>基于百分比流量分割的分阶段发布</p></li><li><p>故障注入</p></li><li><p>丰富的指标</p><p>这种 sidecar 部署允许 Istio 提取大量关于流量行为的信号作为属性。Istio 可以使用这些属性来实施策略决策，并将其发送到监视系统以提供有关整个网格行为的信息。 </p></li></ul><p>由 Envoy 代理启用的一些 Istio 的功能和任务包括:</p><ul><li>流量控制功能：通过丰富的 HTTP、gRPC、WebSocket 和 TCP 流量路由规则来执行细粒度的流量控制。</li><li>网络弹性特性：重试设置、故障转移、熔断器和故障注入。</li><li>安全性和身份验证特性：执行安全性策略以及通过配置 API 定义的访问控制和速率限制。</li><li>基于 WebAssembly 的可插拔扩展模型，允许通过自定义策略实施和生成网格流量的遥测。</li></ul><h3 id="Pilot"><a href="#Pilot" class="headerlink" title="Pilot"></a>Pilot</h3><p><code>Pilot</code> 为 Envoy sidecar 提供服务发现、用于智能路由的流量管理功能（例如，A/B 测试、金丝雀发布等）以及弹性功能（超时、重试、熔断器等）。</p><p><code>Pilot</code> 将控制流量行为的高级路由规则转换为特定于环境的配置，并在运行时将它们传播到 sidecar。Pilot 将特定于平台的服务发现机制抽象出来，并将它们合成为任何符合 <a href="https://www.envoyproxy.io/docs/envoy/latest/api/api" target="_blank" rel="noopener">Envoy API</a> 的 sidecar 都可以使用的标准格式。</p><p>下图展示了平台适配器和 Envoy 代理如何交互。</p><p><img data-src="/images/pilot-discovery.svg" alt="pilot-discovery"></p><ol><li>平台启动一个服务的新实例，该实例通知其平台适配器。</li><li>平台适配器使用 <code>Pilot</code> 抽象模型注册实例。</li><li><code>Pilot</code> 将流量规则和配置派发给 <code>Envoy</code> 代理，来传达此次更改。</li></ol><h3 id="Citadel"><a href="#Citadel" class="headerlink" title="Citadel"></a>Citadel</h3><p><code>Citadel</code>通过内置的身份和证书管理，可以支持强大的服务到服务以及最终用户的身份验证。您可以使用 Citadel 来升级服务网格中的未加密流量。使用 <code>Citadel</code> operator 可以执行基于服务身份的策略。</p><h3 id="Galley"><a href="#Galley" class="headerlink" title="Galley"></a>Galley</h3><p><code>Galley</code> 是 Istio 的配置验证、提取、处理和分发组件。它负责将其余的 Istio 组件与从底层平台（例如 Kubernetes）获取用户配置的细节隔离开来。</p><h2 id="Istio-部署模型"><a href="#Istio-部署模型" class="headerlink" title="Istio 部署模型"></a>Istio 部署模型</h2><p>您可以将单个网格配置为包括多集群。多集群部署可为您提供更大程度的隔离和可用性，但会增加复杂性。 如果您的系统具有高可用性要求，则可能需要集群跨多个可用区和地域。 对于应用变更或新的版本，您可以在一个集群中配置金丝雀发布，这有助于把对用户的影响降到最低。 此外，如果某个集群有问题，您可以暂时将流量路由到附近的集群，直到解决该问题为止。 </p><p> <img data-src="/images/istio-multi-cluster.svg" alt="istio-multi-cluster"></p><h2 id="Istio-1-6-性能总结"><a href="#Istio-1-6-性能总结" class="headerlink" title="Istio 1.6 性能总结"></a>Istio 1.6 性能总结</h2><p><a href="https://github.com/istio/tools/tree/master/perf/load" target="_blank" rel="noopener">Istio 负载测试</a> 网格包含了 <strong>1000</strong> 个服务和 <strong>2000</strong> 个 sidecar，全网格范围内，QPS 为 70,000。 在使用 Istio 1.6 运行测试后，我们得到了如下结果：</p><ul><li>通过代理的 QPS 有 1000 时，Envoy 使用了 <strong>0.5 vCPU</strong> 和 <strong>50 MB 内存</strong>。</li><li>网格总的 QPS 为 1000 时，<code>istio-telemetry</code> 服务使用了 <strong>0.6 vCPU</strong>。</li><li>Pilot 使用了 <strong>1 vCPU</strong> 和 <strong>1.5 GB</strong> 内存。</li><li><strong>90%</strong> 的情况 Envoy 代理只增加了 <strong>2.8 ms</strong> 的延迟。</li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p> <a href="https://preliminary.istio.io/docs/ops/deployment/architecture/" target="_blank" rel="noopener">https://preliminary.istio.io/docs/ops/deployment/architecture/</a> </p><p> <a href="https://preliminary.istio.io/zh/docs/ops/deployment/architecture/" target="_blank" rel="noopener">https://preliminary.istio.io/zh/docs/ops/deployment/architecture/</a> </p><p> <a href="https://preliminary.istio.io/zh/docs/ops/deployment/deployment-models/" target="_blank" rel="noopener">https://preliminary.istio.io/zh/docs/ops/deployment/deployment-models/</a></p><p> <a href="https://preliminary.istio.io/docs/ops/deployment/performance-and-scalability/" target="_blank" rel="noopener">https://preliminary.istio.io/docs/ops/deployment/performance-and-scalability/</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Istio-架构&quot;&gt;&lt;a href=&quot;#Istio-架构&quot; class=&quot;headerlink&quot; title=&quot;Istio 架构&quot;&gt;&lt;/a&gt;Istio 架构&lt;/h2&gt;&lt;p&gt; Istio 服务网格从逻辑上分为数据平面和控制平面。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据平面&lt;/strong&gt; 由一组智能代理（&lt;a href=&quot;https://www.envoyproxy.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Envoy&lt;/a&gt;）组成，被部署为 sidecar。这些代理负责协调和控制微服务之间的所有网络通信。他们还收集和报告所有网格流量的遥测数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;控制平面&lt;/strong&gt; 管理并配置代理来进行流量路由。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Istio-核心组件&quot;&gt;&lt;a href=&quot;#Istio-核心组件&quot; class=&quot;headerlink&quot; title=&quot;Istio 核心组件&quot;&gt;&lt;/a&gt;Istio 核心组件&lt;/h2&gt;&lt;p&gt;下图展示了组成每个平面的不同组件： &lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;/images/istio-arch.svg&quot; alt=&quot;istio-arch&quot;&gt;&lt;/p&gt;
&lt;p&gt; Istio 中的流量分为数据平面流量和控制平面流量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据平面流量是指工作负载的业务逻辑发送和接收的消息&lt;/li&gt;
&lt;li&gt;控制平面流量是指在 Istio 组件之间发送的配置和控制消息用来编排网格的行为&lt;/li&gt;
&lt;li&gt;Istio  中的流量管理特指数据平面流量&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="istio" scheme="http://haoyunlaile.github.io/categories/istio/"/>
    
    
      <category term="istio" scheme="http://haoyunlaile.github.io/tags/istio/"/>
    
  </entry>
  
  <entry>
    <title>Istio install</title>
    <link href="http://haoyunlaile.github.io/2020/istio/istio-install/"/>
    <id>http://haoyunlaile.github.io/2020/istio/istio-install/</id>
    <published>2020-04-22T16:00:00.000Z</published>
    <updated>2020-04-22T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>搭建istio基础环境</p><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>在安装 Istio 之前，需要一个运行着 Kubernetes 的环境，安装步骤可以参考前面的文章</p><p>下载istio，然后解压，然后将 <code>istioctl</code> 增加到 path 环境变量中 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://istio.io/downloadIstio | sh -</span><br><span class="line"><span class="built_in">cd</span> istio-1.5.1</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PWD</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p> 新建<code>istio-1.5.1.yaml</code> 配置文件、按照官方文档操作安装会出现错误，导致不能正常进行sidecar 自动注入</p><a id="more"></a> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">vim</span> <span class="selector-tag">istio-1</span><span class="selector-class">.5</span><span class="selector-class">.1</span><span class="selector-class">.yaml</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: install.istio.io/v1alpha1</span><br><span class="line">kind: IstioOperator</span><br><span class="line">spec:</span><br><span class="line">  components:</span><br><span class="line">    egressGateways:</span><br><span class="line">    - name: istio-egressgateway</span><br><span class="line">      enabled: <span class="literal">true</span></span><br><span class="line">      k8s:</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 10m</span><br><span class="line">            memory: 40Mi</span><br><span class="line"></span><br><span class="line">    ingressGateways:</span><br><span class="line">    - name: istio-ingressgateway</span><br><span class="line">      enabled: <span class="literal">true</span></span><br><span class="line">      k8s:</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 10m</span><br><span class="line">            memory: 40Mi</span><br><span class="line">        service:</span><br><span class="line">          ports:</span><br><span class="line">            <span class="comment">## You can add custom gateway ports in user values overrides, but it must include those ports since helm replaces.</span></span><br><span class="line">            <span class="comment"># Note that AWS ELB will by default perform health checks on the first port</span></span><br><span class="line">            <span class="comment"># on this list. Setting this to the health check port will ensure that health</span></span><br><span class="line">            <span class="comment"># checks always work. https://github.com/istio/istio/issues/12503</span></span><br><span class="line">            - port: 15020</span><br><span class="line">              targetPort: 15020</span><br><span class="line">              name: status-port</span><br><span class="line">            - port: 80</span><br><span class="line">              targetPort: 8080</span><br><span class="line">              name: http2</span><br><span class="line">            - port: 443</span><br><span class="line">              targetPort: 8443</span><br><span class="line">              name: https</span><br><span class="line">            - port: 31400</span><br><span class="line">              targetPort: 31400</span><br><span class="line">              name: tcp</span><br><span class="line">              <span class="comment"># This is the port where sni routing happens</span></span><br><span class="line">            - port: 15443</span><br><span class="line">              targetPort: 15443</span><br><span class="line">              name: tls</span><br><span class="line"></span><br><span class="line">    policy:</span><br><span class="line">      enabled: <span class="literal">false</span></span><br><span class="line">      k8s:</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 10m</span><br><span class="line">            memory: 100Mi</span><br><span class="line"></span><br><span class="line">    telemetry:</span><br><span class="line">      k8s:</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 50m</span><br><span class="line">            memory: 100Mi</span><br><span class="line"></span><br><span class="line">    pilot:</span><br><span class="line">      k8s:</span><br><span class="line">        env:</span><br><span class="line">          - name: POD_NAME</span><br><span class="line">            valueFrom:</span><br><span class="line">              fieldRef:</span><br><span class="line">                apiVersion: v1</span><br><span class="line">                fieldPath: metadata.name</span><br><span class="line">          - name: POD_NAMESPACE</span><br><span class="line">            valueFrom:</span><br><span class="line">              fieldRef:</span><br><span class="line">                apiVersion: v1</span><br><span class="line">                fieldPath: metadata.namespace</span><br><span class="line">          - name: GODEBUG</span><br><span class="line">            value: gctrace=1</span><br><span class="line">          - name: PILOT_TRACE_SAMPLING</span><br><span class="line">            value: <span class="string">"100"</span></span><br><span class="line">          - name: CONFIG_NAMESPACE</span><br><span class="line">            value: istio-config</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 10m</span><br><span class="line">            memory: 100Mi</span><br><span class="line"></span><br><span class="line">  addonComponents:</span><br><span class="line">    kiali:</span><br><span class="line">      enabled: <span class="literal">true</span></span><br><span class="line">    grafana:</span><br><span class="line">      enabled: <span class="literal">true</span></span><br><span class="line">    tracing:</span><br><span class="line">      enabled: <span class="literal">true</span></span><br><span class="line">    prometheus:</span><br><span class="line">      enabled: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  values:</span><br><span class="line">    global:</span><br><span class="line">      disablePolicyChecks: <span class="literal">false</span></span><br><span class="line">      proxy:</span><br><span class="line">        accessLogFile: /dev/stdout</span><br><span class="line">        includeIPRanges: 192.168.16.0/20,192.168.32.0/20</span><br><span class="line">        autoInject: enabled  <span class="comment">#配置自动注入</span></span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 10m</span><br><span class="line">            memory: 40Mi</span><br><span class="line">    sidecarInjectorWebhook:</span><br><span class="line">      enableNamespacesByDefault: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    pilot:</span><br><span class="line">      autoscaleEnabled: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    mixer:</span><br><span class="line">      adapters:</span><br><span class="line">        useAdapterCRDs: <span class="literal">false</span></span><br><span class="line">        kubernetesenv:</span><br><span class="line">          enabled: <span class="literal">true</span></span><br><span class="line">        prometheus:</span><br><span class="line">          enabled: <span class="literal">true</span></span><br><span class="line">          metricsExpiryDuration: 10m</span><br><span class="line">        stackdriver:</span><br><span class="line">          enabled: <span class="literal">false</span></span><br><span class="line">        stdio:</span><br><span class="line">          enabled: <span class="literal">true</span></span><br><span class="line">          outputAsJson: <span class="literal">false</span></span><br><span class="line">      policy:</span><br><span class="line">        autoscaleEnabled: <span class="literal">false</span></span><br><span class="line">      telemetry:</span><br><span class="line">        autoscaleEnabled: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    gateways:</span><br><span class="line">      istio-egressgateway:</span><br><span class="line">        autoscaleEnabled: <span class="literal">true</span></span><br><span class="line">      istio-ingressgateway:</span><br><span class="line">        autoscaleEnabled: <span class="literal">true</span></span><br><span class="line">    kiali:</span><br><span class="line">      createDemoSecret: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>安装对应配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">istioctl manifest apply -f istio-1.5.1.yaml</span><br></pre></td></tr></table></figure><p> 验证是否安装成功 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">kubectl get svc -n istio-system</span><br><span class="line"></span><br><span class="line">NAME                        TYPE           CLUSTER-IP       EXTERNAL-IP   PORT(S)                                                                      AGE</span><br><span class="line">grafana                     ClusterIP      10.106.222.1     &lt;none&gt;        3000/TCP                                                                     72m</span><br><span class="line">istio-egressgateway         ClusterIP      10.105.147.175   &lt;none&gt;        80/TCP,443/TCP,15443/TCP                                                     72m</span><br><span class="line">istio-ingressgateway        LoadBalancer   10.101.90.130    &lt;pending&gt;     15020:31121/TCP,80:31729/TCP,443:31903/TCP,31400:32746/TCP,15443:31084/TCP   72m</span><br><span class="line">istio-pilot                 ClusterIP      10.101.28.124    &lt;none&gt;        15010/TCP,15011/TCP,15012/TCP,8080/TCP,15014/TCP,443/TCP                     80m</span><br><span class="line">istiod                      ClusterIP      10.99.35.177     &lt;none&gt;        15012/TCP,443/TCP                                                            80m</span><br><span class="line">jaeger-agent                ClusterIP      None             &lt;none&gt;        5775/UDP,6831/UDP,6832/UDP                                                   72m</span><br><span class="line">jaeger-collector            ClusterIP      10.109.237.212   &lt;none&gt;        14267/TCP,14268/TCP,14250/TCP                                                72m</span><br><span class="line">jaeger-collector-headless   ClusterIP      None             &lt;none&gt;        14250/TCP                                                                    72m</span><br><span class="line">jaeger-query                ClusterIP      10.103.4.63      &lt;none&gt;        16686/TCP                                                                    72m</span><br><span class="line">kiali                       ClusterIP      10.100.49.221    &lt;none&gt;        20001/TCP                                                                    72m</span><br><span class="line">prometheus                  ClusterIP      10.110.124.176   &lt;none&gt;        9090/TCP                                                                     72m</span><br><span class="line">tracing                     ClusterIP      10.106.75.109    &lt;none&gt;        80/TCP                                                                       72m</span><br><span class="line">zipkin                      ClusterIP      10.103.9.94      &lt;none&gt;        9411/TCP</span><br></pre></td></tr></table></figure><p> 确保关联的 Kubernetes pod 已经部署，并且 <code>STATUS</code> 为 <code>Running</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -n istio-system</span><br><span class="line"></span><br><span class="line">NAME                                    READY   STATUS    RESTARTS   AGE</span><br><span class="line">grafana-5f6f8cbf75-trjl6                1/1     Running   0          73m</span><br><span class="line">istio-egressgateway-74896c8487-9qnwg    1/1     Running   0          73m</span><br><span class="line">istio-ingressgateway-56f7dd5d6b-9c22z   1/1     Running   0          73m</span><br><span class="line">istio-tracing-9dd6c4f7c-qr7vl           1/1     Running   0          73m</span><br><span class="line">istiod-756bd84654-fqp7b                 1/1     Running   0          73m</span><br><span class="line">istiod-756bd84654-hxpqt                 1/1     Running   0          73m</span><br><span class="line">kiali-869c6894c5-p4h7r                  1/1     Running   0          73m</span><br><span class="line">prometheus-c89875c74-lvq52              2/2     Running   0          73m</span><br></pre></td></tr></table></figure><p>卸载istio</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">istioctl manifest generate --<span class="built_in">set</span> profile=demo | kubectl delete -f -</span><br></pre></td></tr></table></figure><h2 id="部署Bookinfo"><a href="#部署Bookinfo" class="headerlink" title="部署Bookinfo"></a>部署Bookinfo</h2><p> Istio 默认自动注入 Sidecar. 请为 <code>default</code> 命名空间打上标签 <code>istio-injection=enabled</code>： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl label namespace default istio-injection=enabled</span><br></pre></td></tr></table></figure><p> 使用 <code>kubectl</code> 部署应用： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml</span><br></pre></td></tr></table></figure><blockquote><p> 在实际部署中，微服务版本的启动过程需要持续一段时间，并不是同时完成的。 </p></blockquote><p>确认所有的服务和 Pod 都已经正确的定义和启动： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kubectl get services</span><br><span class="line">NAME                       CLUSTER-IP   EXTERNAL-IP   PORT(S)              AGE</span><br><span class="line">details                    10.0.0.31    &lt;none&gt;        9080/TCP             6m</span><br><span class="line">kubernetes                 10.0.0.1     &lt;none&gt;        443/TCP              7d</span><br><span class="line">productpage                10.0.0.120   &lt;none&gt;        9080/TCP             6m</span><br><span class="line">ratings                    10.0.0.15    &lt;none&gt;        9080/TCP             6m</span><br><span class="line">reviews                    10.0.0.170   &lt;none&gt;        9080/TCP             6m</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods</span><br><span class="line">NAME                                        READY     STATUS    RESTARTS   AGE</span><br><span class="line">details-v1-1520924117-48z17                 2/2       Running   0          6m</span><br><span class="line">productpage-v1-560495357-jk1lz              2/2       Running   0          6m</span><br><span class="line">ratings-v1-734492171-rnr5l                  2/2       Running   0          6m</span><br><span class="line">reviews-v1-874083890-f0qf0                  2/2       Running   0          6m</span><br><span class="line">reviews-v2-1343845940-b34q5                 2/2       Running   0          6m</span><br><span class="line">reviews-v3-1813607990-8ch52                 2/2       Running   0          6m</span><br></pre></td></tr></table></figure><p>确认 Bookinfo 应用是否正在运行，请在某个 Pod 中用 <code>curl</code> 命令对应用发送请求，例如 <code>ratings</code>： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl exec -it $(kubectl get pod -l app=ratings -o jsonpath='&#123;.items[0].metadata.name&#125;') -c ratings -- curl productpage:9080/productpage | grep -o "&lt;title&gt;.*&lt;/title&gt;"</span><br><span class="line">&lt;title&gt;Simple Bookstore App&lt;/title&gt;</span><br></pre></td></tr></table></figure><p>使用浏览器访问Bookinfo放在后面来讲解，因为是使用云环境而非本地，使用gateway/ingress开放外网端口还需要调整一些配置，跟官方文档在本地安装还有些差异。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p> <a href="https://preliminary.istio.io/zh/docs/setup/getting-started/" target="_blank" rel="noopener">https://preliminary.istio.io/zh/docs/setup/getting-started/</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;搭建istio基础环境&lt;/p&gt;
&lt;h2 id=&quot;安装步骤&quot;&gt;&lt;a href=&quot;#安装步骤&quot; class=&quot;headerlink&quot; title=&quot;安装步骤&quot;&gt;&lt;/a&gt;安装步骤&lt;/h2&gt;&lt;p&gt;在安装 Istio 之前，需要一个运行着 Kubernetes 的环境，安装步骤可以参考前面的文章&lt;/p&gt;
&lt;p&gt;下载istio，然后解压，然后将 &lt;code&gt;istioctl&lt;/code&gt; 增加到 path 环境变量中 &lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -L https://istio.io/downloadIstio | sh -&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; istio-1.5.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; PATH=&lt;span class=&quot;variable&quot;&gt;$PWD&lt;/span&gt;/bin:&lt;span class=&quot;variable&quot;&gt;$PATH&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt; 新建&lt;code&gt;istio-1.5.1.yaml&lt;/code&gt; 配置文件、按照官方文档操作安装会出现错误，导致不能正常进行sidecar 自动注入&lt;/p&gt;
    
    </summary>
    
    
      <category term="istio" scheme="http://haoyunlaile.github.io/categories/istio/"/>
    
    
      <category term="istio" scheme="http://haoyunlaile.github.io/tags/istio/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes资料</title>
    <link href="http://haoyunlaile.github.io/2020/kubernates/kubernates-basics/"/>
    <id>http://haoyunlaile.github.io/2020/kubernates/kubernates-basics/</id>
    <published>2020-04-22T16:00:00.000Z</published>
    <updated>2020-04-22T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>这篇文章用来记录Kubernetes 的基础资料，整体以最新官方文档为准。</p><p>因为k8s整体比较偏运维，作为研发可先大致了解其概念及初级使用方式，后面重点学习点会放在service mesh <code>istio</code> 上。因为<code>istio</code>目前的架构依赖k8s相关组件，后面在学习<code>istio</code> 的过程中使用到k8s具体组件后再回过头来针对性的学习。</p><h3 id="Kubernetes-集群所需的各种组件"><a href="#Kubernetes-集群所需的各种组件" class="headerlink" title="Kubernetes 集群所需的各种组件"></a>Kubernetes 集群所需的各种组件</h3><p><img data-src="/images/components-of-kubernetes.png" alt="components-of-kubernetes.png"></p><p>最好把官方相关文档全部都认认真真看一遍，然后跟着操作一遍会强化理解。因为涉及的体系非常庞大，里面使用到的一个组件可能都需要学习很久，不要着急，慢慢来，有计划一个一个的啃下来。术业有专攻、有目标性的学习与突破。道路且长、共勉</p><a id="more"></a> <h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://kubernetes.io/zh/docs/concepts/" target="_blank" rel="noopener">https://kubernetes.io/zh/docs/concepts/</a> </p><p><a href="https://kubernetes.io/zh/docs/concepts/overview/components/" target="_blank" rel="noopener">https://kubernetes.io/zh/docs/concepts/overview/components/</a> </p><p><a href="https://kubernetes.io/zh/docs/concepts/workloads/pods/pod-overview/" target="_blank" rel="noopener">https://kubernetes.io/zh/docs/concepts/workloads/pods/pod-overview/</a> </p><p><a href="https://kubernetes.io/zh/docs/tasks/" target="_blank" rel="noopener">https://kubernetes.io/zh/docs/tasks/</a> </p><p><a href="https://kubernetes.io/zh/docs/reference/" target="_blank" rel="noopener">https://kubernetes.io/zh/docs/reference/</a> </p><p><a href="https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#-strong-getting-started-strong-" target="_blank" rel="noopener">https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#-strong-getting-started-strong-</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;这篇文章用来记录Kubernetes 的基础资料，整体以最新官方文档为准。&lt;/p&gt;
&lt;p&gt;因为k8s整体比较偏运维，作为研发可先大致了解其概念及初级使用方式，后面重点学习点会放在service mesh &lt;code&gt;istio&lt;/code&gt; 上。因为&lt;code&gt;istio&lt;/code&gt;目前的架构依赖k8s相关组件，后面在学习&lt;code&gt;istio&lt;/code&gt; 的过程中使用到k8s具体组件后再回过头来针对性的学习。&lt;/p&gt;
&lt;h3 id=&quot;Kubernetes-集群所需的各种组件&quot;&gt;&lt;a href=&quot;#Kubernetes-集群所需的各种组件&quot; class=&quot;headerlink&quot; title=&quot;Kubernetes 集群所需的各种组件&quot;&gt;&lt;/a&gt;Kubernetes 集群所需的各种组件&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&quot;/images/components-of-kubernetes.png&quot; alt=&quot;components-of-kubernetes.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;最好把官方相关文档全部都认认真真看一遍，然后跟着操作一遍会强化理解。因为涉及的体系非常庞大，里面使用到的一个组件可能都需要学习很久，不要着急，慢慢来，有计划一个一个的啃下来。术业有专攻、有目标性的学习与突破。道路且长、共勉&lt;/p&gt;
    
    </summary>
    
    
      <category term="kubernetes" scheme="http://haoyunlaile.github.io/categories/kubernetes/"/>
    
    
      <category term="kubernetes资料" scheme="http://haoyunlaile.github.io/tags/kubernetes%E8%B5%84%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes dashboard install</title>
    <link href="http://haoyunlaile.github.io/2020/kubernates/kubernates-dashboard/"/>
    <id>http://haoyunlaile.github.io/2020/kubernates/kubernates-dashboard/</id>
    <published>2020-04-22T12:00:00.000Z</published>
    <updated>2020-04-22T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>基于网页查看Kubernetes 用户界面 </p><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>在控制面板节点部署dashborad</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml</span><br></pre></td></tr></table></figure><h3 id="放开外网端口映射"><a href="#放开外网端口映射" class="headerlink" title="放开外网端口映射"></a>放开外网端口映射</h3><blockquote><p>如果需要外网访问，需要使用NodePort的方式对外暴露端口，不能使用<code>kubectl proxy</code>的方式，因为该方式只能通过http访问，非本地环境无法正常登录，在这里折腾了好几个小时，主要还是没有一字一句看官方文档。</p></blockquote><p>更改原文件<code>type: ClusterIP</code> 为<code>type: NodePort</code>后保存</p><a id="more"></a> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">kubectl</span> <span class="string">-n</span> <span class="string">kubernetes-dashboard</span> <span class="string">edit</span> <span class="string">service</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Please edit the object below. Lines beginning with a '#' will be ignored,</span></span><br><span class="line"><span class="comment"># and an empty file will abort the edit. If an error occurs while saving this file will be</span></span><br><span class="line"><span class="comment"># reopened with the relevant failures.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">resourceVersion:</span> <span class="string">"343478"</span></span><br><span class="line">  <span class="attr">selfLink:</span> <span class="string">/api/v1/namespaces/kubernetes-dashboard/services/kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">uid:</span> <span class="string">8e48f478-993d-11e7-87e0-901b0e532516</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="number">10.100</span><span class="number">.124</span><span class="number">.90</span></span><br><span class="line">  <span class="attr">externalTrafficPolicy:</span> <span class="string">Cluster</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">8443</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">sessionAffinity:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line"><span class="attr">status:</span></span><br><span class="line">  <span class="attr">loadBalancer:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="下一步获取nodeport对外开放的https端口，注意这里为32443端口"><a href="#下一步获取nodeport对外开放的https端口，注意这里为32443端口" class="headerlink" title="下一步获取nodeport对外开放的https端口，注意这里为32443端口"></a>下一步获取nodeport对外开放的https端口，注意这里为32443端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kubernetes-dashboard get service kubernetes-dashboard</span><br><span class="line"></span><br><span class="line">NAME                   TYPE       CLUSTER-IP    EXTERNAL-IP   PORT(S)         AGE</span><br><span class="line">kubernetes-dashboard   NodePort   10.98.33.83   &lt;none&gt;        443:32443/TCP   77m</span><br></pre></td></tr></table></figure><h3 id="同时启动监控指标收集服务，不然会dashborad无法展示数据图表"><a href="#同时启动监控指标收集服务，不然会dashborad无法展示数据图表" class="headerlink" title="同时启动监控指标收集服务，不然会dashborad无法展示数据图表"></a>同时启动监控指标收集服务，不然会dashborad无法展示数据图表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/download/v0.3.6/components.yaml</span><br></pre></td></tr></table></figure><p>然后就可以访问下面的地址</p><p><code>https://&lt;master-ip&gt;:&lt;nodePort&gt;</code></p><p>访问上面的地址会出现登录的界面，如下图：</p><p><img data-src="/images/k8s-dashboard-login.png" alt="k8s-dashboard-login"></p><p>这里选择使用token登录</p><p>创建dashboard对应的admin账户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">touch dashboard-admin.yml</span><br><span class="line">vi dashboard-admin.yml</span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: admin-user</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: admin-user</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: admin-user</span><br><span class="line">  namespace: kubernetes-dashboard</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f dashboard-admin.yml</span><br></pre></td></tr></table></figure><p>然后通过如下命令获取登录的token</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line"></span><br><span class="line">Name:         admin-user-token-5j9gg</span><br><span class="line">Namespace:    kubernetes-dashboard</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  kubernetes.io/service-account.name: admin-user</span><br><span class="line">              kubernetes.io/service-account.uid: 8b1c0aa8-9ee1-4c06-a983-6cc8ebecf8b2</span><br><span class="line"></span><br><span class="line">Type:  kubernetes.io/service-account-token</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">ca.crt:     1025 bytes</span><br><span class="line">namespace:  20 bytes</span><br><span class="line">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6Im5BZWtISUdnVnloMDJiRjdLZ0pJdTMxNXZ2YTdtY2U2Z0p3QURlblFnSEEifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLTVqOWdnIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbbWluLXVzZXIiLCJrddWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiI4YjFjMGFhOC05ZWUxLTRjMDYtYTk4My02Y2M4ZWJlY2Y4YjIiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZXJuZXRlcy1kYXNoYm9hcmQ6YWRtaW4tdXNlciJ9.C4Ma3tp6GdMCusjPEaQNqm_92-PEEm02-68OvsMq1eExPvMZxYYrvmwSWwOnJIps5mL2BEu1XqchsWlNFYpawe5HIk_zrimfff-NpwVRqxu0qPt0MxN0KzVgMm5hOaOYKYJW0zz1mpFZI8-uvqdDzwJGFan7vLH1KTCUt5gTHlv-KJyYa6zmE2QKl0-IATcesCF0sU51K2F5NeSU9dvE9hJ92mcETuGwXsuPo5aPSu-1yi1WFnaWDQrcJseXxOWREaYv0o-9swCZOYYBdNy7G4h6xB6cWxUD7C5Un4lB-5VaBqD0D_hS5Cwh3S5ETKYikag6-tB_sOdG7w-KuONicQ</span><br></pre></td></tr></table></figure><p>取上图的token字段粘贴进登录界面即可。</p><blockquote><p>注意，有的文章会写此方式获取到的token还需要进行base64解密，可能是因为版本原因，本人测试是可以直接复制后进行登录的</p></blockquote><p>登录成功后界面如图</p><p><img data-src="/images/k8s-dashboard-nodes.png" alt="k8s-dashboard-nodes.png"></p><p>终于装好了，踩了不少坑，主要还是不熟悉。后面切记认真仔细阅读官方文档。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p> <a href="https://kubernetes.io/zh/docs/tasks/access-application-cluster/web-ui-dashboard/" target="_blank" rel="noopener">https://kubernetes.io/zh/docs/tasks/access-application-cluster/web-ui-dashboard/</a> </p><p> <a href="https://github.com/kubernetes/dashboard" target="_blank" rel="noopener">https://github.com/kubernetes/dashboard</a> </p><p> <a href="https://github.com/kubernetes-sigs/metrics-server" target="_blank" rel="noopener">https://github.com/kubernetes-sigs/metrics-server</a></p><p> <a href="https://github.com/kubernetes/dashboard/blob/master/docs/user/accessing-dashboard/1.7.x-and-above.md" target="_blank" rel="noopener">https://github.com/kubernetes/dashboard/blob/master/docs/user/accessing-dashboard/1.7.x-and-above.md</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;基于网页查看Kubernetes 用户界面 &lt;/p&gt;
&lt;h2 id=&quot;安装步骤&quot;&gt;&lt;a href=&quot;#安装步骤&quot; class=&quot;headerlink&quot; title=&quot;安装步骤&quot;&gt;&lt;/a&gt;安装步骤&lt;/h2&gt;&lt;p&gt;在控制面板节点部署dashborad&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;放开外网端口映射&quot;&gt;&lt;a href=&quot;#放开外网端口映射&quot; class=&quot;headerlink&quot; title=&quot;放开外网端口映射&quot;&gt;&lt;/a&gt;放开外网端口映射&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;如果需要外网访问，需要使用NodePort的方式对外暴露端口，不能使用&lt;code&gt;kubectl proxy&lt;/code&gt;的方式，因为该方式只能通过http访问，非本地环境无法正常登录，在这里折腾了好几个小时，主要还是没有一字一句看官方文档。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;更改原文件&lt;code&gt;type: ClusterIP&lt;/code&gt; 为&lt;code&gt;type: NodePort&lt;/code&gt;后保存&lt;/p&gt;
    
    </summary>
    
    
      <category term="kubernetes" scheme="http://haoyunlaile.github.io/categories/kubernetes/"/>
    
    
      <category term="kubernetes-dashboard" scheme="http://haoyunlaile.github.io/tags/kubernetes-dashboard/"/>
    
  </entry>
  
  <entry>
    <title>kubeadm built kubernetes cluster</title>
    <link href="http://haoyunlaile.github.io/2020/kubernates/kubeadm-install/"/>
    <id>http://haoyunlaile.github.io/2020/kubernates/kubeadm-install/</id>
    <published>2020-04-22T11:00:00.000Z</published>
    <updated>2020-04-22T11:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>kubeadm 搭建kubernetes集群环境</p><h2 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h2><ol><li>三台VPS（本文使用<strong>阿里云香港</strong> - centos7.7）- 用国内的服务器折腾的好一会儿都被墙了，先不把时间浪费在这，直接上香港的服务器</li><li>一台能SSH连接到VPS的本地电脑 （推荐连接工具xshell）</li></ol><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>在安装前需要配置国内的镜像源，这里推荐使用阿里云的</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; <span class="regexp">/etc/yum</span>.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=<span class="symbol">https:</span>/<span class="regexp">/mirrors.aliyun.com/kubernetes</span><span class="regexp">/yum/repos</span><span class="regexp">/kubernetes-el7-x86_64/</span></span><br><span class="line">enabled=<span class="number">1</span></span><br><span class="line">gpgcheck=<span class="number">1</span></span><br><span class="line">repo_gpgcheck=<span class="number">1</span></span><br><span class="line">gpgkey=<span class="symbol">https:</span>/<span class="regexp">/mirrors.aliyun.com/kubernetes</span><span class="regexp">/yum/doc</span><span class="regexp">/yum-key.gpg https:/</span><span class="regexp">/mirrors.aliyun.com/kubernetes</span><span class="regexp">/yum/doc</span><span class="regexp">/rpm-package-key.gpg</span></span><br><span class="line"><span class="regexp">EOF</span></span><br></pre></td></tr></table></figure><h3 id="安装kubelet、kubeadm、kubectl"><a href="#安装kubelet、kubeadm、kubectl" class="headerlink" title="安装kubelet、kubeadm、kubectl"></a>安装kubelet、kubeadm、kubectl</h3><a id="more"></a> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 禁用SELinux</span></span><br><span class="line">setenforce 0</span><br><span class="line">sed -i <span class="string">'s/^SELINUX=enforcing$/SELINUX=permissive/'</span> /etc/selinux/config</span><br><span class="line">yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes</span><br><span class="line">systemctl <span class="built_in">enable</span> --now kubelet</span><br></pre></td></tr></table></figure><h3 id="确保流量路由配置"><a href="#确保流量路由配置" class="headerlink" title="确保流量路由配置"></a>确保流量路由配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line">sysctl --system</span><br></pre></td></tr></table></figure><h3 id="初始化kubeadm"><a href="#初始化kubeadm" class="headerlink" title="初始化kubeadm"></a>初始化kubeadm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --pod-network-cidr=192.168.0.0/16 --ignore-preflight-errors=Swap --upload-certs</span><br><span class="line"></span><br><span class="line">W0423 19:49:48.841139   10624 configset.go:202] WARNING: kubeadm cannot validate component configs <span class="keyword">for</span> API groups [kubelet.config.k8s.io kubeproxy.config.k8s.io]</span><br><span class="line">[init] Using Kubernetes version: v1.18.2</span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">[WARNING IsDockerSystemdCheck]: detected <span class="string">"cgroupfs"</span> as the Docker cgroup driver. The recommended driver is <span class="string">"systemd"</span>. Please follow the guide at https://kubernetes.io/docs/setup/cri/</span><br><span class="line">[preflight] Pulling images required <span class="keyword">for</span> setting up a Kubernetes cluster</span><br><span class="line">[preflight] This might take a minute or two, depending on the speed of your internet connection</span><br><span class="line">[preflight] You can also perform this action <span class="keyword">in</span> beforehand using <span class="string">'kubeadm config images pull'</span></span><br><span class="line">[kubelet-start] Writing kubelet environment file with flags to file <span class="string">"/var/lib/kubelet/kubeadm-flags.env"</span></span><br><span class="line">[kubelet-start] Writing kubelet configuration to file <span class="string">"/var/lib/kubelet/config.yaml"</span></span><br><span class="line">[kubelet-start] Starting the kubelet</span><br><span class="line">[certs] Using certificateDir folder <span class="string">"/etc/kubernetes/pki"</span></span><br><span class="line">[certs] Generating <span class="string">"ca"</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">"apiserver"</span> certificate and key</span><br><span class="line">[certs] apiserver serving cert is signed <span class="keyword">for</span> DNS names [izj6cbqyoktgsdsn8q6woqz kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 172.31.199.150]</span><br><span class="line">[certs] Generating <span class="string">"apiserver-kubelet-client"</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">"front-proxy-ca"</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">"front-proxy-client"</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">"etcd/ca"</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">"etcd/server"</span> certificate and key</span><br><span class="line">[certs] etcd/server serving cert is signed <span class="keyword">for</span> DNS names [izj6cbqyoktgsdsn8q6woqz localhost] and IPs [172.31.199.150 127.0.0.1 ::1]</span><br><span class="line">[certs] Generating <span class="string">"etcd/peer"</span> certificate and key</span><br><span class="line">[certs] etcd/peer serving cert is signed <span class="keyword">for</span> DNS names [izj6cbqyoktgsdsn8q6woqz localhost] and IPs [172.31.199.150 127.0.0.1 ::1]</span><br><span class="line">[certs] Generating <span class="string">"etcd/healthcheck-client"</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">"apiserver-etcd-client"</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">"sa"</span> key and public key</span><br><span class="line">[kubeconfig] Using kubeconfig folder <span class="string">"/etc/kubernetes"</span></span><br><span class="line">[kubeconfig] Writing <span class="string">"admin.conf"</span> kubeconfig file</span><br><span class="line">[kubeconfig] Writing <span class="string">"kubelet.conf"</span> kubeconfig file</span><br><span class="line">[kubeconfig] Writing <span class="string">"controller-manager.conf"</span> kubeconfig file</span><br><span class="line">[kubeconfig] Writing <span class="string">"scheduler.conf"</span> kubeconfig file</span><br><span class="line">[control-plane] Using manifest folder <span class="string">"/etc/kubernetes/manifests"</span></span><br><span class="line">[control-plane] Creating static Pod manifest <span class="keyword">for</span> <span class="string">"kube-apiserver"</span></span><br><span class="line">[control-plane] Creating static Pod manifest <span class="keyword">for</span> <span class="string">"kube-controller-manager"</span></span><br><span class="line">W0423 19:49:54.088376   10624 manifests.go:225] the default kube-apiserver authorization-mode is <span class="string">"Node,RBAC"</span>; using <span class="string">"Node,RBAC"</span></span><br><span class="line">[control-plane] Creating static Pod manifest <span class="keyword">for</span> <span class="string">"kube-scheduler"</span></span><br><span class="line">W0423 19:49:54.090110   10624 manifests.go:225] the default kube-apiserver authorization-mode is <span class="string">"Node,RBAC"</span>; using <span class="string">"Node,RBAC"</span></span><br><span class="line">[etcd] Creating static Pod manifest <span class="keyword">for</span> <span class="built_in">local</span> etcd <span class="keyword">in</span> <span class="string">"/etc/kubernetes/manifests"</span></span><br><span class="line">[<span class="built_in">wait</span>-control-plane] Waiting <span class="keyword">for</span> the kubelet to boot up the control plane as static Pods from directory <span class="string">"/etc/kubernetes/manifests"</span>. This can take up to 4m0s</span><br><span class="line">[apiclient] All control plane components are healthy after 20.002596 seconds</span><br><span class="line">[upload-config] Storing the configuration used <span class="keyword">in</span> ConfigMap <span class="string">"kubeadm-config"</span> <span class="keyword">in</span> the <span class="string">"kube-system"</span> Namespace</span><br><span class="line">[kubelet] Creating a ConfigMap <span class="string">"kubelet-config-1.18"</span> <span class="keyword">in</span> namespace kube-system with the configuration <span class="keyword">for</span> the kubelets <span class="keyword">in</span> the cluster</span><br><span class="line">[upload-certs] Storing the certificates <span class="keyword">in</span> Secret <span class="string">"kubeadm-certs"</span> <span class="keyword">in</span> the <span class="string">"kube-system"</span> Namespace</span><br><span class="line">[upload-certs] Using certificate key:</span><br><span class="line">c19b62a94f05d67b78200edba2e17e755e790606f19a935889714d32e73b663d</span><br><span class="line">[mark-control-plane] Marking the node izj6cbqyoktgsdsn8q6woqz as control-plane by adding the label <span class="string">"node-role.kubernetes.io/master=''"</span></span><br><span class="line">[mark-control-plane] Marking the node izj6cbqyoktgsdsn8q6woqz as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]</span><br><span class="line">[bootstrap-token] Using token: hn5kpn.qkrhb88jauu9aglz</span><br><span class="line">[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to get nodes</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs <span class="keyword">in</span> order <span class="keyword">for</span> nodes to get long term certificate credentials</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow certificate rotation <span class="keyword">for</span> all node client certificates <span class="keyword">in</span> the cluster</span><br><span class="line">[bootstrap-token] Creating the <span class="string">"cluster-info"</span> ConfigMap <span class="keyword">in</span> the <span class="string">"kube-public"</span> namespace</span><br><span class="line">[kubelet-finalize] Updating <span class="string">"/etc/kubernetes/kubelet.conf"</span> to point to a rotatable kubelet client certificate and key</span><br><span class="line">[addons] Applied essential addon: CoreDNS</span><br><span class="line">[addons] Applied essential addon: kube-proxy</span><br><span class="line"></span><br><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run <span class="string">"kubectl apply -f [podnetwork].yaml"</span> with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm join 172.31.199.150:6443 --token hn5kpn.qkrhb88jauu9aglz \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:598ff568cd107d9ef9f780f86bd90051a0857da5197f5f8c19ed0dae8290366d</span><br></pre></td></tr></table></figure><p>请备份好 <code>kubeadm init</code> 输出中的 <code>kubeadm join</code> 命令，因为后面会需要这个命令来给集群添加节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join 172.31.199.150:6443 --token hn5kpn.qkrhb88jauu9aglz \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:598ff568cd107d9ef9f780f86bd90051a0857da5197f5f8c19ed0dae8290366d</span><br></pre></td></tr></table></figure><h3 id="允许普通用户可以运行-kubectl"><a href="#允许普通用户可以运行-kubectl" class="headerlink" title="允许普通用户可以运行 kubectl"></a>允许普通用户可以运行 kubectl</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><h3 id="配置Calico网络"><a href="#配置Calico网络" class="headerlink" title="配置Calico网络"></a>配置Calico网络</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml</span><br></pre></td></tr></table></figure><h3 id="接下来将node节点加入集群"><a href="#接下来将node节点加入集群" class="headerlink" title="接下来将node节点加入集群"></a>接下来将node节点加入集群</h3><p>node节点同样上前面的流程安装docker、kubelet、kubeadm、kubectl。都安装完成后执行上面的<code>kubeadm join</code>命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join 172.31.199.150:6443 --token okdyiw.o8qjxl4v3avct79p \</span><br><span class="line">&gt;     --discovery-token-ca-cert-hash sha256:fb936d4c8da2dc276c6b447eea36d90bd9a206e1344c487418067faf580948e6 </span><br><span class="line"></span><br><span class="line">W0422 12:27:17.321756    2133 join.go:346] [preflight] WARNING: JoinControlPane.controlPlane settings will be ignored when control-plane flag is not <span class="built_in">set</span>.</span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">[WARNING IsDockerSystemdCheck]: detected <span class="string">"cgroupfs"</span> as the Docker cgroup driver. The recommended driver is <span class="string">"systemd"</span>. Please follow the guide at https://kubernetes.io/docs/setup/cri/</span><br><span class="line">[preflight] Reading configuration from the cluster...</span><br><span class="line">[preflight] FYI: You can look at this config file with <span class="string">'kubectl -n kube-system get cm kubeadm-config -oyaml'</span></span><br><span class="line">[kubelet-start] Downloading configuration <span class="keyword">for</span> the kubelet from the <span class="string">"kubelet-config-1.18"</span> ConfigMap <span class="keyword">in</span> the kube-system namespace</span><br><span class="line">[kubelet-start] Writing kubelet configuration to file <span class="string">"/var/lib/kubelet/config.yaml"</span></span><br><span class="line">[kubelet-start] Writing kubelet environment file with flags to file <span class="string">"/var/lib/kubelet/kubeadm-flags.env"</span></span><br><span class="line">[kubelet-start] Starting the kubelet</span><br><span class="line">[kubelet-start] Waiting <span class="keyword">for</span> the kubelet to perform the TLS Bootstrap...</span><br><span class="line"></span><br><span class="line">This node has joined the cluster:</span><br><span class="line">* Certificate signing request was sent to apiserver and a response was received.</span><br><span class="line">* The Kubelet was informed of the new secure connection details.</span><br><span class="line"></span><br><span class="line">Run <span class="string">'kubectl get nodes'</span> on the control-plane to see this node join the cluster.</span><br></pre></td></tr></table></figure><p>然后在控制面板的机器上查看集群节点信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line">NAME                      STATUS     ROLES    AGE    VERSION</span><br><span class="line">izj6cbqyoktgsdsn8q6woqz   Ready      master   55m    v1.18.2</span><br><span class="line">izj6cbwwgp62jm8oudjra8z   Ready      &lt;none&gt;   2m7s   v1.18.2</span><br><span class="line">izj6cbwwgp62jm8oudjra9z   NotReady   &lt;none&gt;   8s     v1.18.2</span><br></pre></td></tr></table></figure><p>至此，kubeadm集群节点安装成功</p><p>清理集群节点信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeamd reset</span><br></pre></td></tr></table></figure><p>清理完成后记得执行下面的命令后重新配置config文件，不然会报错</p><blockquote><p>Unable to connect to the server: x509: certificate signed by unknown authority (possibly because of “crypto/rsa: verification error” while trying to verify candidate authority certificate “kubernetes”)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rm -rf <span class="variable">$HOME</span>/.kube</span><br><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p> <a href="https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/" target="_blank" rel="noopener">https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/</a> </p><p> <a href="https://kubernetes.io/zh/docs/setup/independent/create-cluster-kubeadm" target="_blank" rel="noopener">https://kubernetes.io/zh/docs/setup/independent/create-cluster-kubeadm</a> </p><p> <a href="https://kubernetes.io/zh/docs/reference/setup-tools/kubeadm/kubeadm/" target="_blank" rel="noopener">https://kubernetes.io/zh/docs/reference/setup-tools/kubeadm/kubeadm/</a> </p><p> <a href="https://docs.projectcalico.org/getting-started/kubernetes/quickstart" target="_blank" rel="noopener">https://docs.projectcalico.org/getting-started/kubernetes/quickstart</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;kubeadm 搭建kubernetes集群环境&lt;/p&gt;
&lt;h2 id=&quot;准备条件&quot;&gt;&lt;a href=&quot;#准备条件&quot; class=&quot;headerlink&quot; title=&quot;准备条件&quot;&gt;&lt;/a&gt;准备条件&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;三台VPS（本文使用&lt;strong&gt;阿里云香港&lt;/strong&gt; - centos7.7）- 用国内的服务器折腾的好一会儿都被墙了，先不把时间浪费在这，直接上香港的服务器&lt;/li&gt;
&lt;li&gt;一台能SSH连接到VPS的本地电脑 （推荐连接工具xshell）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;安装步骤&quot;&gt;&lt;a href=&quot;#安装步骤&quot; class=&quot;headerlink&quot; title=&quot;安装步骤&quot;&gt;&lt;/a&gt;安装步骤&lt;/h2&gt;&lt;p&gt;在安装前需要配置国内的镜像源，这里推荐使用阿里云的&lt;/p&gt;
&lt;figure class=&quot;highlight crystal&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cat &amp;lt;&amp;lt;EOF &amp;gt; &lt;span class=&quot;regexp&quot;&gt;/etc/yum&lt;/span&gt;.repos.d/kubernetes.repo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[kubernetes]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name=Kubernetes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;baseurl=&lt;span class=&quot;symbol&quot;&gt;https:&lt;/span&gt;/&lt;span class=&quot;regexp&quot;&gt;/mirrors.aliyun.com/kubernetes&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/yum/repos&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/kubernetes-el7-x86_64/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;enabled=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gpgcheck=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;repo_gpgcheck=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gpgkey=&lt;span class=&quot;symbol&quot;&gt;https:&lt;/span&gt;/&lt;span class=&quot;regexp&quot;&gt;/mirrors.aliyun.com/kubernetes&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/yum/doc&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/yum-key.gpg https:/&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/mirrors.aliyun.com/kubernetes&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/yum/doc&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/rpm-package-key.gpg&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;EOF&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;安装kubelet、kubeadm、kubectl&quot;&gt;&lt;a href=&quot;#安装kubelet、kubeadm、kubectl&quot; class=&quot;headerlink&quot; title=&quot;安装kubelet、kubeadm、kubectl&quot;&gt;&lt;/a&gt;安装kubelet、kubeadm、kubectl&lt;/h3&gt;
    
    </summary>
    
    
      <category term="kubernetes" scheme="http://haoyunlaile.github.io/categories/kubernetes/"/>
    
    
      <category term="kubernetes" scheme="http://haoyunlaile.github.io/tags/kubernetes/"/>
    
      <category term="kubeadm" scheme="http://haoyunlaile.github.io/tags/kubeadm/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes port list</title>
    <link href="http://haoyunlaile.github.io/2020/kubernates/k8s-port/"/>
    <id>http://haoyunlaile.github.io/2020/kubernates/k8s-port/</id>
    <published>2020-04-21T16:00:00.000Z</published>
    <updated>2020-04-21T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搭建k8s环境所需端口清单"><a href="#搭建k8s环境所需端口清单" class="headerlink" title="搭建k8s环境所需端口清单"></a>搭建k8s环境所需端口清单</h2><h3 id="控制平面节点端口清单"><a href="#控制平面节点端口清单" class="headerlink" title="控制平面节点端口清单"></a>控制平面节点端口清单</h3><table><thead><tr><th align="center">协议</th><th align="center">方向</th><th align="center">端口范围</th><th align="center">作用</th><th align="center">使用者</th></tr></thead><tbody><tr><td align="center">TCP</td><td align="center">入站</td><td align="center">6443</td><td align="center">Kubernetes API 服务器</td><td align="center">所有组件</td></tr><tr><td align="center">TCP</td><td align="center">入站</td><td align="center">2379-2380</td><td align="center">etcd server client API</td><td align="center">kube-apiserver, etcd</td></tr><tr><td align="center">TCP</td><td align="center">入站</td><td align="center">10250</td><td align="center">Kubelet API</td><td align="center">kubelet 自身、控制平面组件</td></tr><tr><td align="center">TCP</td><td align="center">入站</td><td align="center">10251</td><td align="center">kube-scheduler</td><td align="center">kube-scheduler 自身</td></tr><tr><td align="center">TCP</td><td align="center">入站</td><td align="center">10252</td><td align="center">kube-controller-manager</td><td align="center">kube-controller-manager 自身</td></tr></tbody></table><h3 id="Node节点端口清单"><a href="#Node节点端口清单" class="headerlink" title="Node节点端口清单"></a>Node节点端口清单</h3><table><thead><tr><th align="center">协议</th><th align="center">方向</th><th align="center">端口范围</th><th align="center">作用</th><th align="center">使用者</th></tr></thead><tbody><tr><td align="center">TCP</td><td align="center">入站</td><td align="center">10250</td><td align="center">Kubelet API</td><td align="center">kubelet 自身、控制平面组件</td></tr><tr><td align="center">TCP</td><td align="center">入站</td><td align="center">30000-32767</td><td align="center">NodePort 服务**</td><td align="center">所有组件</td></tr></tbody></table><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p> <a href="https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/" target="_blank" rel="noopener">https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;搭建k8s环境所需端口清单&quot;&gt;&lt;a href=&quot;#搭建k8s环境所需端口清单&quot; class=&quot;headerlink&quot; title=&quot;搭建k8s环境所需端口清单&quot;&gt;&lt;/a&gt;搭建k8s环境所需端口清单&lt;/h2&gt;&lt;h3 id=&quot;控制平面节点端口清单&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="kubernetes" scheme="http://haoyunlaile.github.io/categories/kubernetes/"/>
    
    
      <category term="kubernetes" scheme="http://haoyunlaile.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Minikube install</title>
    <link href="http://haoyunlaile.github.io/2020/kubernates/minikube-install/"/>
    <id>http://haoyunlaile.github.io/2020/kubernates/minikube-install/</id>
    <published>2020-04-21T05:00:00.000Z</published>
    <updated>2020-04-21T05:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>安装kubernetes - Minikube本地环境</p><h2 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h2><ol><li>一台VPS（本文使用<strong>阿里云香港</strong> - centos7.7）- 用国内的服务器折腾的好一会儿都被墙了，先不把时间浪费在这，直接上香港的服务器</li><li>一台能SSH连接到VPS的本地电脑 （推荐连接工具xshell）</li></ol><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>在安装前需要配置国内的镜像源</p><a id="more"></a> <figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; <span class="regexp">/etc/yum</span>.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=<span class="symbol">https:</span>/<span class="regexp">/mirrors.aliyun.com/kubernetes</span><span class="regexp">/yum/repos</span><span class="regexp">/kubernetes-el7-x86_64/</span></span><br><span class="line">enabled=<span class="number">1</span></span><br><span class="line">gpgcheck=<span class="number">1</span></span><br><span class="line">repo_gpgcheck=<span class="number">1</span></span><br><span class="line">gpgkey=<span class="symbol">https:</span>/<span class="regexp">/mirrors.aliyun.com/kubernetes</span><span class="regexp">/yum/doc</span><span class="regexp">/yum-key.gpg https:/</span><span class="regexp">/mirrors.aliyun.com/kubernetes</span><span class="regexp">/yum/doc</span><span class="regexp">/rpm-package-key.gpg</span></span><br><span class="line"><span class="regexp">EOF</span></span><br></pre></td></tr></table></figure><h3 id="安装kubectl"><a href="#安装kubectl" class="headerlink" title="安装kubectl"></a>安装kubectl</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y kubectl</span><br></pre></td></tr></table></figure><p>  shell 中开启 kubectl 命令自动补全 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install bash-completion -y</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"source &lt;(kubectl completion bash)"</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="安装minukube"><a href="#安装minukube" class="headerlink" title="安装minukube"></a>安装minukube</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 \</span><br><span class="line">  &amp;&amp; chmod +x minikube</span><br><span class="line">mkdir -p /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">install minikube /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">su - docker</span><br></pre></td></tr></table></figure><h3 id="启动本地-Kubernetes-集群、-检查集群的状态"><a href="#启动本地-Kubernetes-集群、-检查集群的状态" class="headerlink" title="启动本地 Kubernetes 集群、 检查集群的状态"></a>启动本地 Kubernetes 集群、 检查集群的状态</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">minikube start</span><br><span class="line"></span><br><span class="line">* minikube v1<span class="number">.9</span><span class="number">.2</span> on Centos <span class="number">7.7</span><span class="number">.1908</span></span><br><span class="line">* Automatically selected the docker driver</span><br><span class="line">* Starting control plane node m01 <span class="keyword">in</span> cluster minikube</span><br><span class="line">* Pulling base image ...</span><br><span class="line">* Downloading Kubernetes v1<span class="number">.18</span><span class="number">.0</span> preload ...</span><br><span class="line">    &gt; preloaded-images-k8s-v2-v1<span class="number">.18</span><span class="number">.0</span>-docker-overlay2-amd64.tar.lz4: <span class="number">542.91</span> MiB</span><br><span class="line">* Creating Kubernetes <span class="keyword">in</span> docker container with (CPUs=<span class="number">2</span>) (<span class="number">4</span> available), Memory=<span class="number">2200</span>MB (<span class="number">7821</span>MB available) ...</span><br><span class="line">* Preparing Kubernetes v1<span class="number">.18</span><span class="number">.0</span> on Docker <span class="number">19.03</span><span class="number">.2</span> ...</span><br><span class="line">  - kubeadm.pod-network-cidr=<span class="number">10.244</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">16</span></span><br><span class="line">* Enabling addons: <span class="keyword">default</span>-storageclass, storage-provisioner</span><br><span class="line">! Enabling <span class="string">'default-storageclass'</span> returned an error: running callbacks: [chmod: chmod deploy/addons/storageclass/storageclass.yaml.tmpl: permission denied]</span><br><span class="line">* Done! kubectl <span class="keyword">is</span> now configured to use <span class="string">"minikube"</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">minikube</span> <span class="string">status</span></span><br><span class="line"></span><br><span class="line"><span class="attr">m01</span></span><br><span class="line"><span class="attr">host</span>: <span class="string">Running</span></span><br><span class="line"><span class="attr">kubelet</span>: <span class="string">Running</span></span><br><span class="line"><span class="attr">apiserver</span>: <span class="string">Running</span></span><br><span class="line"><span class="attr">kubeconfig</span>: <span class="string">Configured</span></span><br></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="keyword">cluster</span>-<span class="keyword">info</span></span><br><span class="line"></span><br><span class="line">Kubernetes master <span class="keyword">is</span> running at https://<span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span>:<span class="number">8443</span></span><br><span class="line">KubeDNS <span class="keyword">is</span> running at https://<span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span>:<span class="number">8443</span>/api/v1/namespaces/kube-<span class="keyword">system</span>/services/kube-dns:dns/proxy</span><br><span class="line"></span><br><span class="line"><span class="keyword">To</span> further <span class="keyword">debug</span> <span class="keyword">and</span> diagnose <span class="keyword">cluster</span> problems, use <span class="string">'kubectl cluster-info dump'</span>.</span><br></pre></td></tr></table></figure><h3 id="开启Kubernetes-dashboard服务"><a href="#开启Kubernetes-dashboard服务" class="headerlink" title="开启Kubernetes dashboard服务"></a>开启Kubernetes dashboard服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">minikube dashboard --url</span><br><span class="line"></span><br><span class="line">* Enabling dashboard ...</span><br><span class="line">* Verifying dashboard health ...</span><br><span class="line">* Launching proxy ...</span><br><span class="line">* Verifying proxy health ...</span><br><span class="line">http://127.0.0.1:33457/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/</span><br></pre></td></tr></table></figure><h3 id="开启kube-proxy端口映射，使其可以远程访问"><a href="#开启kube-proxy端口映射，使其可以远程访问" class="headerlink" title="开启kube-proxy端口映射，使其可以远程访问"></a>开启kube-proxy端口映射，使其可以远程访问</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl<span class="built_in"> proxy </span><span class="attribute">--port</span>=33458 <span class="attribute">--address</span>=<span class="string">'0.0.0.0'</span> <span class="attribute">--accept-hosts</span>=<span class="string">'^.*'</span> &amp;</span><br></pre></td></tr></table></figure><p>这里需要记得去阿里云的安全组配置33458端口外网可以访问</p><p>然后就可以在浏览器访问k8s的dashborad了</p><p><a href="http://127.0.0.1:33458/" target="_blank" rel="noopener">http://127.0.0.1:33458/</a></p><p><img data-src="/images/k8s-dashboard.png" alt="k8s-dashboard"></p><p>清理 minikube 的本地状态 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube delete</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p> <a href="https://juejin.im/post/5b8a4536e51d4538c545645c" target="_blank" rel="noopener">https://juejin.im/post/5b8a4536e51d4538c545645c</a> </p><p> <a href="https://kubernetes.io/zh/docs/tasks/tools/install-minikube/" target="_blank" rel="noopener">https://kubernetes.io/zh/docs/tasks/tools/install-minikube/</a> </p><p> <a href="https://github.com/kubernetes/minikube" target="_blank" rel="noopener">https://github.com/kubernetes/minikube</a> </p><p> <a href="https://minikube.sigs.k8s.io/docs/handbook/dashboard/" target="_blank" rel="noopener">https://minikube.sigs.k8s.io/docs/handbook/dashboard/</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;安装kubernetes - Minikube本地环境&lt;/p&gt;
&lt;h2 id=&quot;准备条件&quot;&gt;&lt;a href=&quot;#准备条件&quot; class=&quot;headerlink&quot; title=&quot;准备条件&quot;&gt;&lt;/a&gt;准备条件&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;一台VPS（本文使用&lt;strong&gt;阿里云香港&lt;/strong&gt; - centos7.7）- 用国内的服务器折腾的好一会儿都被墙了，先不把时间浪费在这，直接上香港的服务器&lt;/li&gt;
&lt;li&gt;一台能SSH连接到VPS的本地电脑 （推荐连接工具xshell）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;安装步骤&quot;&gt;&lt;a href=&quot;#安装步骤&quot; class=&quot;headerlink&quot; title=&quot;安装步骤&quot;&gt;&lt;/a&gt;安装步骤&lt;/h2&gt;&lt;p&gt;在安装前需要配置国内的镜像源&lt;/p&gt;
    
    </summary>
    
    
      <category term="kubernetes" scheme="http://haoyunlaile.github.io/categories/kubernetes/"/>
    
    
      <category term="kubernetes" scheme="http://haoyunlaile.github.io/tags/kubernetes/"/>
    
      <category term="minikube" scheme="http://haoyunlaile.github.io/tags/minikube/"/>
    
  </entry>
  
</feed>
