<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>好运来了</title>
  
  <subtitle>分享知识、记录点滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://haoyunlaile.github.io/"/>
  <updated>2020-04-22T16:00:00.000Z</updated>
  <id>http://haoyunlaile.github.io/</id>
  
  <author>
    <name>好运来了</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>istio install</title>
    <link href="http://haoyunlaile.github.io/2020/istio/istio-install/"/>
    <id>http://haoyunlaile.github.io/2020/istio/istio-install/</id>
    <published>2020-04-22T16:00:00.000Z</published>
    <updated>2020-04-22T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>搭建istio基础环境</p><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>在安装 Istio 之前，需要一个运行着 Kubernetes 的环境，安装步骤可以参考前面的文章</p><p>下载istio，然后解压，然后将 <code>istioctl</code> 增加到 path 环境变量中 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://istio.io/downloadIstio | sh -</span><br><span class="line"><span class="built_in">cd</span> istio-1.5.1</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PWD</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p> 新建<code>istio-1.5.1.yaml</code> 配置文件、按照官方文档操作安装会出现错误，导致不能正常进行sidecar 自动注入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">vim</span> <span class="selector-tag">istio-1</span><span class="selector-class">.5</span><span class="selector-class">.1</span><span class="selector-class">.yaml</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: install.istio.io/v1alpha1</span><br><span class="line">kind: IstioOperator</span><br><span class="line">spec:</span><br><span class="line">  components:</span><br><span class="line">    egressGateways:</span><br><span class="line">    - name: istio-egressgateway</span><br><span class="line">      enabled: <span class="literal">true</span></span><br><span class="line">      k8s:</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 10m</span><br><span class="line">            memory: 40Mi</span><br><span class="line"></span><br><span class="line">    ingressGateways:</span><br><span class="line">    - name: istio-ingressgateway</span><br><span class="line">      enabled: <span class="literal">true</span></span><br><span class="line">      k8s:</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 10m</span><br><span class="line">            memory: 40Mi</span><br><span class="line">        service:</span><br><span class="line">          ports:</span><br><span class="line">            <span class="comment">## You can add custom gateway ports in user values overrides, but it must include those ports since helm replaces.</span></span><br><span class="line">            <span class="comment"># Note that AWS ELB will by default perform health checks on the first port</span></span><br><span class="line">            <span class="comment"># on this list. Setting this to the health check port will ensure that health</span></span><br><span class="line">            <span class="comment"># checks always work. https://github.com/istio/istio/issues/12503</span></span><br><span class="line">            - port: 15020</span><br><span class="line">              targetPort: 15020</span><br><span class="line">              name: status-port</span><br><span class="line">            - port: 80</span><br><span class="line">              targetPort: 8080</span><br><span class="line">              name: http2</span><br><span class="line">            - port: 443</span><br><span class="line">              targetPort: 8443</span><br><span class="line">              name: https</span><br><span class="line">            - port: 31400</span><br><span class="line">              targetPort: 31400</span><br><span class="line">              name: tcp</span><br><span class="line">              <span class="comment"># This is the port where sni routing happens</span></span><br><span class="line">            - port: 15443</span><br><span class="line">              targetPort: 15443</span><br><span class="line">              name: tls</span><br><span class="line"></span><br><span class="line">    policy:</span><br><span class="line">      enabled: <span class="literal">false</span></span><br><span class="line">      k8s:</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 10m</span><br><span class="line">            memory: 100Mi</span><br><span class="line"></span><br><span class="line">    telemetry:</span><br><span class="line">      k8s:</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 50m</span><br><span class="line">            memory: 100Mi</span><br><span class="line"></span><br><span class="line">    pilot:</span><br><span class="line">      k8s:</span><br><span class="line">        env:</span><br><span class="line">          - name: POD_NAME</span><br><span class="line">            valueFrom:</span><br><span class="line">              fieldRef:</span><br><span class="line">                apiVersion: v1</span><br><span class="line">                fieldPath: metadata.name</span><br><span class="line">          - name: POD_NAMESPACE</span><br><span class="line">            valueFrom:</span><br><span class="line">              fieldRef:</span><br><span class="line">                apiVersion: v1</span><br><span class="line">                fieldPath: metadata.namespace</span><br><span class="line">          - name: GODEBUG</span><br><span class="line">            value: gctrace=1</span><br><span class="line">          - name: PILOT_TRACE_SAMPLING</span><br><span class="line">            value: <span class="string">"100"</span></span><br><span class="line">          - name: CONFIG_NAMESPACE</span><br><span class="line">            value: istio-config</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 10m</span><br><span class="line">            memory: 100Mi</span><br><span class="line"></span><br><span class="line">  addonComponents:</span><br><span class="line">    kiali:</span><br><span class="line">      enabled: <span class="literal">true</span></span><br><span class="line">    grafana:</span><br><span class="line">      enabled: <span class="literal">true</span></span><br><span class="line">    tracing:</span><br><span class="line">      enabled: <span class="literal">true</span></span><br><span class="line">    prometheus:</span><br><span class="line">      enabled: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  values:</span><br><span class="line">    global:</span><br><span class="line">      disablePolicyChecks: <span class="literal">false</span></span><br><span class="line">      proxy:</span><br><span class="line">        accessLogFile: /dev/stdout</span><br><span class="line">        includeIPRanges: 192.168.16.0/20,192.168.32.0/20</span><br><span class="line">        autoInject: enabled  <span class="comment">#配置自动注入</span></span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 10m</span><br><span class="line">            memory: 40Mi</span><br><span class="line">    sidecarInjectorWebhook:</span><br><span class="line">      enableNamespacesByDefault: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    pilot:</span><br><span class="line">      autoscaleEnabled: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    mixer:</span><br><span class="line">      adapters:</span><br><span class="line">        useAdapterCRDs: <span class="literal">false</span></span><br><span class="line">        kubernetesenv:</span><br><span class="line">          enabled: <span class="literal">true</span></span><br><span class="line">        prometheus:</span><br><span class="line">          enabled: <span class="literal">true</span></span><br><span class="line">          metricsExpiryDuration: 10m</span><br><span class="line">        stackdriver:</span><br><span class="line">          enabled: <span class="literal">false</span></span><br><span class="line">        stdio:</span><br><span class="line">          enabled: <span class="literal">true</span></span><br><span class="line">          outputAsJson: <span class="literal">false</span></span><br><span class="line">      policy:</span><br><span class="line">        autoscaleEnabled: <span class="literal">false</span></span><br><span class="line">      telemetry:</span><br><span class="line">        autoscaleEnabled: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    gateways:</span><br><span class="line">      istio-egressgateway:</span><br><span class="line">        autoscaleEnabled: <span class="literal">true</span></span><br><span class="line">      istio-ingressgateway:</span><br><span class="line">        autoscaleEnabled: <span class="literal">true</span></span><br><span class="line">    kiali:</span><br><span class="line">      createDemoSecret: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>安装对应配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">istioctl manifest apply -f istio-1.5.1.yaml</span><br></pre></td></tr></table></figure><p> 验证是否安装成功 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">kubectl get svc -n istio-system</span><br><span class="line"></span><br><span class="line">NAME                        TYPE           CLUSTER-IP       EXTERNAL-IP   PORT(S)                                                                      AGE</span><br><span class="line">grafana                     ClusterIP      10.106.222.1     &lt;none&gt;        3000/TCP                                                                     72m</span><br><span class="line">istio-egressgateway         ClusterIP      10.105.147.175   &lt;none&gt;        80/TCP,443/TCP,15443/TCP                                                     72m</span><br><span class="line">istio-ingressgateway        LoadBalancer   10.101.90.130    &lt;pending&gt;     15020:31121/TCP,80:31729/TCP,443:31903/TCP,31400:32746/TCP,15443:31084/TCP   72m</span><br><span class="line">istio-pilot                 ClusterIP      10.101.28.124    &lt;none&gt;        15010/TCP,15011/TCP,15012/TCP,8080/TCP,15014/TCP,443/TCP                     80m</span><br><span class="line">istiod                      ClusterIP      10.99.35.177     &lt;none&gt;        15012/TCP,443/TCP                                                            80m</span><br><span class="line">jaeger-agent                ClusterIP      None             &lt;none&gt;        5775/UDP,6831/UDP,6832/UDP                                                   72m</span><br><span class="line">jaeger-collector            ClusterIP      10.109.237.212   &lt;none&gt;        14267/TCP,14268/TCP,14250/TCP                                                72m</span><br><span class="line">jaeger-collector-headless   ClusterIP      None             &lt;none&gt;        14250/TCP                                                                    72m</span><br><span class="line">jaeger-query                ClusterIP      10.103.4.63      &lt;none&gt;        16686/TCP                                                                    72m</span><br><span class="line">kiali                       ClusterIP      10.100.49.221    &lt;none&gt;        20001/TCP                                                                    72m</span><br><span class="line">prometheus                  ClusterIP      10.110.124.176   &lt;none&gt;        9090/TCP                                                                     72m</span><br><span class="line">tracing                     ClusterIP      10.106.75.109    &lt;none&gt;        80/TCP                                                                       72m</span><br><span class="line">zipkin                      ClusterIP      10.103.9.94      &lt;none&gt;        9411/TCP</span><br></pre></td></tr></table></figure><p> 确保关联的 Kubernetes pod 已经部署，并且 <code>STATUS</code> 为 <code>Running</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -n istio-system</span><br><span class="line"></span><br><span class="line">NAME                                    READY   STATUS    RESTARTS   AGE</span><br><span class="line">grafana-5f6f8cbf75-trjl6                1/1     Running   0          73m</span><br><span class="line">istio-egressgateway-74896c8487-9qnwg    1/1     Running   0          73m</span><br><span class="line">istio-ingressgateway-56f7dd5d6b-9c22z   1/1     Running   0          73m</span><br><span class="line">istio-tracing-9dd6c4f7c-qr7vl           1/1     Running   0          73m</span><br><span class="line">istiod-756bd84654-fqp7b                 1/1     Running   0          73m</span><br><span class="line">istiod-756bd84654-hxpqt                 1/1     Running   0          73m</span><br><span class="line">kiali-869c6894c5-p4h7r                  1/1     Running   0          73m</span><br><span class="line">prometheus-c89875c74-lvq52              2/2     Running   0          73m</span><br></pre></td></tr></table></figure><p>卸载istio</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">istioctl manifest generate --<span class="built_in">set</span> profile=demo | kubectl delete -f -</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p> <a href="https://preliminary.istio.io/zh/docs/setup/getting-started/" target="_blank" rel="noopener">https://preliminary.istio.io/zh/docs/setup/getting-started/</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;搭建istio基础环境&lt;/p&gt;
&lt;h2 id=&quot;安装步骤&quot;&gt;&lt;a href=&quot;#安装步骤&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
    
      <category term="istio" scheme="http://haoyunlaile.github.io/categories/istio/"/>
    
    
      <category term="istio" scheme="http://haoyunlaile.github.io/tags/istio/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes资料</title>
    <link href="http://haoyunlaile.github.io/2020/kubernates/kubernates-basics/"/>
    <id>http://haoyunlaile.github.io/2020/kubernates/kubernates-basics/</id>
    <published>2020-04-22T16:00:00.000Z</published>
    <updated>2020-04-22T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>这篇文章用来记录Kubernetes 的基础资料，整体以最新官方文档为准。</p><p>因为k8s整体比较偏运维，作为研发可先大致了解其概念及初级使用方式，后面重点学习点会放在service mesh <code>istio</code> 上。因为<code>istio</code>目前的架构依赖k8s相关组件，后面在学习<code>istio</code> 的过程中使用到k8s具体组件后再回过头来针对性的学习。</p><h3 id="Kubernetes-集群所需的各种组件"><a href="#Kubernetes-集群所需的各种组件" class="headerlink" title="Kubernetes 集群所需的各种组件"></a>Kubernetes 集群所需的各种组件</h3><p><img data-src="/images/components-of-kubernetes.png" alt="components-of-kubernetes.png"></p><p>最好把官方相关文档全部都认认真真看一遍，然后跟着操作一遍会强化理解。因为涉及的体系非常庞大，里面使用到的一个组件可能都需要学习很久，不要着急，慢慢来，有计划一个一个的啃下来。术业有专攻、有目标性的学习与突破。道路且长、共勉</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://kubernetes.io/zh/docs/concepts/" target="_blank" rel="noopener">https://kubernetes.io/zh/docs/concepts/</a> </p><p><a href="https://kubernetes.io/zh/docs/concepts/overview/components/" target="_blank" rel="noopener">https://kubernetes.io/zh/docs/concepts/overview/components/</a> </p><p><a href="https://kubernetes.io/zh/docs/concepts/workloads/pods/pod-overview/" target="_blank" rel="noopener">https://kubernetes.io/zh/docs/concepts/workloads/pods/pod-overview/</a> </p><p><a href="https://kubernetes.io/zh/docs/tasks/" target="_blank" rel="noopener">https://kubernetes.io/zh/docs/tasks/</a> </p><p><a href="https://kubernetes.io/zh/docs/reference/" target="_blank" rel="noopener">https://kubernetes.io/zh/docs/reference/</a> </p><p><a href="https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#-strong-getting-started-strong-" target="_blank" rel="noopener">https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#-strong-getting-started-strong-</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;这篇文章用来记录Kubernetes 的基础资料，整体以最新官方文档为准。&lt;/p&gt;
&lt;p&gt;因为k8s整体比较偏运维，作为研发可先大致了解其概
      
    
    </summary>
    
    
      <category term="kubernetes" scheme="http://haoyunlaile.github.io/categories/kubernetes/"/>
    
    
      <category term="kubernetes资料" scheme="http://haoyunlaile.github.io/tags/kubernetes%E8%B5%84%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes port list</title>
    <link href="http://haoyunlaile.github.io/2020/kubernates/k8s-port/"/>
    <id>http://haoyunlaile.github.io/2020/kubernates/k8s-port/</id>
    <published>2020-04-21T16:00:00.000Z</published>
    <updated>2020-04-21T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搭建k8s环境所需端口清单"><a href="#搭建k8s环境所需端口清单" class="headerlink" title="搭建k8s环境所需端口清单"></a>搭建k8s环境所需端口清单</h2><h3 id="控制平面节点端口清单"><a href="#控制平面节点端口清单" class="headerlink" title="控制平面节点端口清单"></a>控制平面节点端口清单</h3><table><thead><tr><th align="center">协议</th><th align="center">方向</th><th align="center">端口范围</th><th align="center">作用</th><th align="center">使用者</th></tr></thead><tbody><tr><td align="center">TCP</td><td align="center">入站</td><td align="center">6443</td><td align="center">Kubernetes API 服务器</td><td align="center">所有组件</td></tr><tr><td align="center">TCP</td><td align="center">入站</td><td align="center">2379-2380</td><td align="center">etcd server client API</td><td align="center">kube-apiserver, etcd</td></tr><tr><td align="center">TCP</td><td align="center">入站</td><td align="center">10250</td><td align="center">Kubelet API</td><td align="center">kubelet 自身、控制平面组件</td></tr><tr><td align="center">TCP</td><td align="center">入站</td><td align="center">10251</td><td align="center">kube-scheduler</td><td align="center">kube-scheduler 自身</td></tr><tr><td align="center">TCP</td><td align="center">入站</td><td align="center">10252</td><td align="center">kube-controller-manager</td><td align="center">kube-controller-manager 自身</td></tr></tbody></table><h3 id="Node节点端口清单"><a href="#Node节点端口清单" class="headerlink" title="Node节点端口清单"></a>Node节点端口清单</h3><table><thead><tr><th align="center">协议</th><th align="center">方向</th><th align="center">端口范围</th><th align="center">作用</th><th align="center">使用者</th></tr></thead><tbody><tr><td align="center">TCP</td><td align="center">入站</td><td align="center">10250</td><td align="center">Kubelet API</td><td align="center">kubelet 自身、控制平面组件</td></tr><tr><td align="center">TCP</td><td align="center">入站</td><td align="center">30000-32767</td><td align="center">NodePort 服务**</td><td align="center">所有组件</td></tr></tbody></table><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p> <a href="https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/" target="_blank" rel="noopener">https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;搭建k8s环境所需端口清单&quot;&gt;&lt;a href=&quot;#搭建k8s环境所需端口清单&quot; class=&quot;headerlink&quot; title=&quot;搭建k8s环境所需端口清单&quot;&gt;&lt;/a&gt;搭建k8s环境所需端口清单&lt;/h2&gt;&lt;h3 id=&quot;控制平面节点端口清单&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="kubernetes" scheme="http://haoyunlaile.github.io/categories/kubernetes/"/>
    
    
      <category term="kubernetes" scheme="http://haoyunlaile.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>kubeadm built kubernetes cluster</title>
    <link href="http://haoyunlaile.github.io/2020/kubernates/kubeadm-install/"/>
    <id>http://haoyunlaile.github.io/2020/kubernates/kubeadm-install/</id>
    <published>2020-04-21T16:00:00.000Z</published>
    <updated>2020-04-21T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>kubeadm 搭建kubernetes集群环境</p><h2 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h2><ol><li>三台VPS（本文使用<strong>阿里云香港</strong> - centos7.7）- 用国内的服务器折腾的好一会儿都被墙了，先不把时间浪费在这，直接上香港的服务器</li><li>一台能SSH连接到VPS的本地电脑 （推荐连接工具xshell）</li></ol><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>在安装前需要配置国内的镜像源，这里推荐使用阿里云的</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; <span class="regexp">/etc/yum</span>.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=<span class="symbol">https:</span>/<span class="regexp">/mirrors.aliyun.com/kubernetes</span><span class="regexp">/yum/repos</span><span class="regexp">/kubernetes-el7-x86_64/</span></span><br><span class="line">enabled=<span class="number">1</span></span><br><span class="line">gpgcheck=<span class="number">1</span></span><br><span class="line">repo_gpgcheck=<span class="number">1</span></span><br><span class="line">gpgkey=<span class="symbol">https:</span>/<span class="regexp">/mirrors.aliyun.com/kubernetes</span><span class="regexp">/yum/doc</span><span class="regexp">/yum-key.gpg https:/</span><span class="regexp">/mirrors.aliyun.com/kubernetes</span><span class="regexp">/yum/doc</span><span class="regexp">/rpm-package-key.gpg</span></span><br><span class="line"><span class="regexp">EOF</span></span><br></pre></td></tr></table></figure><h3 id="安装kubelet、kubeadm、kubectl"><a href="#安装kubelet、kubeadm、kubectl" class="headerlink" title="安装kubelet、kubeadm、kubectl"></a>安装kubelet、kubeadm、kubectl</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 禁用SELinux</span></span><br><span class="line">setenforce 0</span><br><span class="line">sed -i <span class="string">'s/^SELINUX=enforcing$/SELINUX=permissive/'</span> /etc/selinux/config</span><br><span class="line">yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes</span><br><span class="line">systemctl <span class="built_in">enable</span> --now kubelet</span><br></pre></td></tr></table></figure><h3 id="确保流量路由配置"><a href="#确保流量路由配置" class="headerlink" title="确保流量路由配置"></a>确保流量路由配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line">sysctl --system</span><br></pre></td></tr></table></figure><h3 id="初始化kubeadm"><a href="#初始化kubeadm" class="headerlink" title="初始化kubeadm"></a>初始化kubeadm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --pod-network-cidr=192.168.0.0/16 --ignore-preflight-errors=Swap --upload-certs</span><br><span class="line"></span><br><span class="line">W0423 19:49:48.841139   10624 configset.go:202] WARNING: kubeadm cannot validate component configs <span class="keyword">for</span> API groups [kubelet.config.k8s.io kubeproxy.config.k8s.io]</span><br><span class="line">[init] Using Kubernetes version: v1.18.2</span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">[WARNING IsDockerSystemdCheck]: detected <span class="string">"cgroupfs"</span> as the Docker cgroup driver. The recommended driver is <span class="string">"systemd"</span>. Please follow the guide at https://kubernetes.io/docs/setup/cri/</span><br><span class="line">[preflight] Pulling images required <span class="keyword">for</span> setting up a Kubernetes cluster</span><br><span class="line">[preflight] This might take a minute or two, depending on the speed of your internet connection</span><br><span class="line">[preflight] You can also perform this action <span class="keyword">in</span> beforehand using <span class="string">'kubeadm config images pull'</span></span><br><span class="line">[kubelet-start] Writing kubelet environment file with flags to file <span class="string">"/var/lib/kubelet/kubeadm-flags.env"</span></span><br><span class="line">[kubelet-start] Writing kubelet configuration to file <span class="string">"/var/lib/kubelet/config.yaml"</span></span><br><span class="line">[kubelet-start] Starting the kubelet</span><br><span class="line">[certs] Using certificateDir folder <span class="string">"/etc/kubernetes/pki"</span></span><br><span class="line">[certs] Generating <span class="string">"ca"</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">"apiserver"</span> certificate and key</span><br><span class="line">[certs] apiserver serving cert is signed <span class="keyword">for</span> DNS names [izj6cbqyoktgsdsn8q6woqz kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 172.31.199.150]</span><br><span class="line">[certs] Generating <span class="string">"apiserver-kubelet-client"</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">"front-proxy-ca"</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">"front-proxy-client"</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">"etcd/ca"</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">"etcd/server"</span> certificate and key</span><br><span class="line">[certs] etcd/server serving cert is signed <span class="keyword">for</span> DNS names [izj6cbqyoktgsdsn8q6woqz localhost] and IPs [172.31.199.150 127.0.0.1 ::1]</span><br><span class="line">[certs] Generating <span class="string">"etcd/peer"</span> certificate and key</span><br><span class="line">[certs] etcd/peer serving cert is signed <span class="keyword">for</span> DNS names [izj6cbqyoktgsdsn8q6woqz localhost] and IPs [172.31.199.150 127.0.0.1 ::1]</span><br><span class="line">[certs] Generating <span class="string">"etcd/healthcheck-client"</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">"apiserver-etcd-client"</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">"sa"</span> key and public key</span><br><span class="line">[kubeconfig] Using kubeconfig folder <span class="string">"/etc/kubernetes"</span></span><br><span class="line">[kubeconfig] Writing <span class="string">"admin.conf"</span> kubeconfig file</span><br><span class="line">[kubeconfig] Writing <span class="string">"kubelet.conf"</span> kubeconfig file</span><br><span class="line">[kubeconfig] Writing <span class="string">"controller-manager.conf"</span> kubeconfig file</span><br><span class="line">[kubeconfig] Writing <span class="string">"scheduler.conf"</span> kubeconfig file</span><br><span class="line">[control-plane] Using manifest folder <span class="string">"/etc/kubernetes/manifests"</span></span><br><span class="line">[control-plane] Creating static Pod manifest <span class="keyword">for</span> <span class="string">"kube-apiserver"</span></span><br><span class="line">[control-plane] Creating static Pod manifest <span class="keyword">for</span> <span class="string">"kube-controller-manager"</span></span><br><span class="line">W0423 19:49:54.088376   10624 manifests.go:225] the default kube-apiserver authorization-mode is <span class="string">"Node,RBAC"</span>; using <span class="string">"Node,RBAC"</span></span><br><span class="line">[control-plane] Creating static Pod manifest <span class="keyword">for</span> <span class="string">"kube-scheduler"</span></span><br><span class="line">W0423 19:49:54.090110   10624 manifests.go:225] the default kube-apiserver authorization-mode is <span class="string">"Node,RBAC"</span>; using <span class="string">"Node,RBAC"</span></span><br><span class="line">[etcd] Creating static Pod manifest <span class="keyword">for</span> <span class="built_in">local</span> etcd <span class="keyword">in</span> <span class="string">"/etc/kubernetes/manifests"</span></span><br><span class="line">[<span class="built_in">wait</span>-control-plane] Waiting <span class="keyword">for</span> the kubelet to boot up the control plane as static Pods from directory <span class="string">"/etc/kubernetes/manifests"</span>. This can take up to 4m0s</span><br><span class="line">[apiclient] All control plane components are healthy after 20.002596 seconds</span><br><span class="line">[upload-config] Storing the configuration used <span class="keyword">in</span> ConfigMap <span class="string">"kubeadm-config"</span> <span class="keyword">in</span> the <span class="string">"kube-system"</span> Namespace</span><br><span class="line">[kubelet] Creating a ConfigMap <span class="string">"kubelet-config-1.18"</span> <span class="keyword">in</span> namespace kube-system with the configuration <span class="keyword">for</span> the kubelets <span class="keyword">in</span> the cluster</span><br><span class="line">[upload-certs] Storing the certificates <span class="keyword">in</span> Secret <span class="string">"kubeadm-certs"</span> <span class="keyword">in</span> the <span class="string">"kube-system"</span> Namespace</span><br><span class="line">[upload-certs] Using certificate key:</span><br><span class="line">c19b62a94f05d67b78200edba2e17e755e790606f19a935889714d32e73b663d</span><br><span class="line">[mark-control-plane] Marking the node izj6cbqyoktgsdsn8q6woqz as control-plane by adding the label <span class="string">"node-role.kubernetes.io/master=''"</span></span><br><span class="line">[mark-control-plane] Marking the node izj6cbqyoktgsdsn8q6woqz as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]</span><br><span class="line">[bootstrap-token] Using token: hn5kpn.qkrhb88jauu9aglz</span><br><span class="line">[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to get nodes</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs <span class="keyword">in</span> order <span class="keyword">for</span> nodes to get long term certificate credentials</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow certificate rotation <span class="keyword">for</span> all node client certificates <span class="keyword">in</span> the cluster</span><br><span class="line">[bootstrap-token] Creating the <span class="string">"cluster-info"</span> ConfigMap <span class="keyword">in</span> the <span class="string">"kube-public"</span> namespace</span><br><span class="line">[kubelet-finalize] Updating <span class="string">"/etc/kubernetes/kubelet.conf"</span> to point to a rotatable kubelet client certificate and key</span><br><span class="line">[addons] Applied essential addon: CoreDNS</span><br><span class="line">[addons] Applied essential addon: kube-proxy</span><br><span class="line"></span><br><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run <span class="string">"kubectl apply -f [podnetwork].yaml"</span> with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm join 172.31.199.150:6443 --token hn5kpn.qkrhb88jauu9aglz \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:598ff568cd107d9ef9f780f86bd90051a0857da5197f5f8c19ed0dae8290366d</span><br></pre></td></tr></table></figure><p>请备份好 <code>kubeadm init</code> 输出中的 <code>kubeadm join</code> 命令，因为后面会需要这个命令来给集群添加节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join 172.31.199.150:6443 --token hn5kpn.qkrhb88jauu9aglz \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:598ff568cd107d9ef9f780f86bd90051a0857da5197f5f8c19ed0dae8290366d</span><br></pre></td></tr></table></figure><h3 id="允许普通用户可以运行-kubectl"><a href="#允许普通用户可以运行-kubectl" class="headerlink" title="允许普通用户可以运行 kubectl"></a>允许普通用户可以运行 kubectl</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><h3 id="配置Calico网络"><a href="#配置Calico网络" class="headerlink" title="配置Calico网络"></a>配置Calico网络</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml</span><br></pre></td></tr></table></figure><h3 id="接下来将node节点加入集群"><a href="#接下来将node节点加入集群" class="headerlink" title="接下来将node节点加入集群"></a>接下来将node节点加入集群</h3><p>node节点同样上前面的流程安装docker、kubelet、kubeadm、kubectl。都安装完成后执行上面的<code>kubeadm join</code>命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join 172.31.199.150:6443 --token okdyiw.o8qjxl4v3avct79p \</span><br><span class="line">&gt;     --discovery-token-ca-cert-hash sha256:fb936d4c8da2dc276c6b447eea36d90bd9a206e1344c487418067faf580948e6 </span><br><span class="line"></span><br><span class="line">W0422 12:27:17.321756    2133 join.go:346] [preflight] WARNING: JoinControlPane.controlPlane settings will be ignored when control-plane flag is not <span class="built_in">set</span>.</span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">[WARNING IsDockerSystemdCheck]: detected <span class="string">"cgroupfs"</span> as the Docker cgroup driver. The recommended driver is <span class="string">"systemd"</span>. Please follow the guide at https://kubernetes.io/docs/setup/cri/</span><br><span class="line">[preflight] Reading configuration from the cluster...</span><br><span class="line">[preflight] FYI: You can look at this config file with <span class="string">'kubectl -n kube-system get cm kubeadm-config -oyaml'</span></span><br><span class="line">[kubelet-start] Downloading configuration <span class="keyword">for</span> the kubelet from the <span class="string">"kubelet-config-1.18"</span> ConfigMap <span class="keyword">in</span> the kube-system namespace</span><br><span class="line">[kubelet-start] Writing kubelet configuration to file <span class="string">"/var/lib/kubelet/config.yaml"</span></span><br><span class="line">[kubelet-start] Writing kubelet environment file with flags to file <span class="string">"/var/lib/kubelet/kubeadm-flags.env"</span></span><br><span class="line">[kubelet-start] Starting the kubelet</span><br><span class="line">[kubelet-start] Waiting <span class="keyword">for</span> the kubelet to perform the TLS Bootstrap...</span><br><span class="line"></span><br><span class="line">This node has joined the cluster:</span><br><span class="line">* Certificate signing request was sent to apiserver and a response was received.</span><br><span class="line">* The Kubelet was informed of the new secure connection details.</span><br><span class="line"></span><br><span class="line">Run <span class="string">'kubectl get nodes'</span> on the control-plane to see this node join the cluster.</span><br></pre></td></tr></table></figure><p>然后在控制面板的机器上查看集群节点信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line">NAME                      STATUS     ROLES    AGE    VERSION</span><br><span class="line">izj6cbqyoktgsdsn8q6woqz   Ready      master   55m    v1.18.2</span><br><span class="line">izj6cbwwgp62jm8oudjra8z   Ready      &lt;none&gt;   2m7s   v1.18.2</span><br><span class="line">izj6cbwwgp62jm8oudjra9z   NotReady   &lt;none&gt;   8s     v1.18.2</span><br></pre></td></tr></table></figure><p>至此，kubeadm集群节点安装成功</p><p>清理集群节点信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeamd reset</span><br></pre></td></tr></table></figure><p>清理完成后记得执行下面的命令后重新配置config文件，不然会报错</p><blockquote><p>Unable to connect to the server: x509: certificate signed by unknown authority (possibly because of “crypto/rsa: verification error” while trying to verify candidate authority certificate “kubernetes”)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rm -rf <span class="variable">$HOME</span>/.kube</span><br><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p> <a href="https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/" target="_blank" rel="noopener">https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/</a> </p><p> <a href="https://kubernetes.io/zh/docs/setup/independent/create-cluster-kubeadm" target="_blank" rel="noopener">https://kubernetes.io/zh/docs/setup/independent/create-cluster-kubeadm</a> </p><p> <a href="https://kubernetes.io/zh/docs/reference/setup-tools/kubeadm/kubeadm/" target="_blank" rel="noopener">https://kubernetes.io/zh/docs/reference/setup-tools/kubeadm/kubeadm/</a> </p><p> <a href="https://docs.projectcalico.org/getting-started/kubernetes/quickstart" target="_blank" rel="noopener">https://docs.projectcalico.org/getting-started/kubernetes/quickstart</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;kubeadm 搭建kubernetes集群环境&lt;/p&gt;
&lt;h2 id=&quot;准备条件&quot;&gt;&lt;a href=&quot;#准备条件&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="kubernetes" scheme="http://haoyunlaile.github.io/categories/kubernetes/"/>
    
    
      <category term="kubernetes" scheme="http://haoyunlaile.github.io/tags/kubernetes/"/>
    
      <category term="kubeadm" scheme="http://haoyunlaile.github.io/tags/kubeadm/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes dashboard install</title>
    <link href="http://haoyunlaile.github.io/2020/kubernates/kubernates-dashboard/"/>
    <id>http://haoyunlaile.github.io/2020/kubernates/kubernates-dashboard/</id>
    <published>2020-04-21T16:00:00.000Z</published>
    <updated>2020-04-21T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>基于网页查看Kubernetes 用户界面 </p><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>在控制面板节点部署dashborad</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml</span><br></pre></td></tr></table></figure><h3 id="放开外网端口映射"><a href="#放开外网端口映射" class="headerlink" title="放开外网端口映射"></a>放开外网端口映射</h3><blockquote><p>如果需要外网访问，需要使用NodePort的方式对外暴露端口，不能使用<code>kubectl proxy</code>的方式，因为该方式只能通过http访问，非本地环境无法正常登录，在这里折腾了好几个小时，主要还是没有一字一句看官方文档。</p></blockquote><p>更改原文件<code>type: ClusterIP</code> 为<code>type: NodePort</code>后保存</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">kubectl</span> <span class="string">-n</span> <span class="string">kubernetes-dashboard</span> <span class="string">edit</span> <span class="string">service</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Please edit the object below. Lines beginning with a '#' will be ignored,</span></span><br><span class="line"><span class="comment"># and an empty file will abort the edit. If an error occurs while saving this file will be</span></span><br><span class="line"><span class="comment"># reopened with the relevant failures.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">resourceVersion:</span> <span class="string">"343478"</span></span><br><span class="line">  <span class="attr">selfLink:</span> <span class="string">/api/v1/namespaces/kubernetes-dashboard/services/kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">uid:</span> <span class="string">8e48f478-993d-11e7-87e0-901b0e532516</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="number">10.100</span><span class="number">.124</span><span class="number">.90</span></span><br><span class="line">  <span class="attr">externalTrafficPolicy:</span> <span class="string">Cluster</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">8443</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">sessionAffinity:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line"><span class="attr">status:</span></span><br><span class="line">  <span class="attr">loadBalancer:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="下一步获取nodeport对外开放的https端口，注意这里为32443端口"><a href="#下一步获取nodeport对外开放的https端口，注意这里为32443端口" class="headerlink" title="下一步获取nodeport对外开放的https端口，注意这里为32443端口"></a>下一步获取nodeport对外开放的https端口，注意这里为32443端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kubernetes-dashboard get service kubernetes-dashboard</span><br><span class="line"></span><br><span class="line">NAME                   TYPE       CLUSTER-IP    EXTERNAL-IP   PORT(S)         AGE</span><br><span class="line">kubernetes-dashboard   NodePort   10.98.33.83   &lt;none&gt;        443:32443/TCP   77m</span><br></pre></td></tr></table></figure><h3 id="同时启动监控指标收集服务，不然会dashborad无法展示数据图表"><a href="#同时启动监控指标收集服务，不然会dashborad无法展示数据图表" class="headerlink" title="同时启动监控指标收集服务，不然会dashborad无法展示数据图表"></a>同时启动监控指标收集服务，不然会dashborad无法展示数据图表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/download/v0.3.6/components.yaml</span><br></pre></td></tr></table></figure><p>然后就可以访问下面的地址</p><p><code>https://&lt;master-ip&gt;:&lt;nodePort&gt;</code></p><p>访问上面的地址会出现登录的界面，如下图：</p><p><img data-src="/images/k8s-dashboard-login.png" alt="k8s-dashboard-login"></p><p>这里选择使用token登录</p><p>创建dashboard对应的admin账户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">touch dashboard-admin.yml</span><br><span class="line">vi dashboard-admin.yml</span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: admin-user</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: admin-user</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: admin-user</span><br><span class="line">  namespace: kubernetes-dashboard</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f dashboard-admin.yml</span><br></pre></td></tr></table></figure><p>然后通过如下命令获取登录的token</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line"></span><br><span class="line">Name:         admin-user-token-5j9gg</span><br><span class="line">Namespace:    kubernetes-dashboard</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  kubernetes.io/service-account.name: admin-user</span><br><span class="line">              kubernetes.io/service-account.uid: 8b1c0aa8-9ee1-4c06-a983-6cc8ebecf8b2</span><br><span class="line"></span><br><span class="line">Type:  kubernetes.io/service-account-token</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">ca.crt:     1025 bytes</span><br><span class="line">namespace:  20 bytes</span><br><span class="line">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6Im5BZWtISUdnVnloMDJiRjdLZ0pJdTMxNXZ2YTdtY2U2Z0p3QURlblFnSEEifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLTVqOWdnIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbbWluLXVzZXIiLCJrddWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiI4YjFjMGFhOC05ZWUxLTRjMDYtYTk4My02Y2M4ZWJlY2Y4YjIiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZXJuZXRlcy1kYXNoYm9hcmQ6YWRtaW4tdXNlciJ9.C4Ma3tp6GdMCusjPEaQNqm_92-PEEm02-68OvsMq1eExPvMZxYYrvmwSWwOnJIps5mL2BEu1XqchsWlNFYpawe5HIk_zrimfff-NpwVRqxu0qPt0MxN0KzVgMm5hOaOYKYJW0zz1mpFZI8-uvqdDzwJGFan7vLH1KTCUt5gTHlv-KJyYa6zmE2QKl0-IATcesCF0sU51K2F5NeSU9dvE9hJ92mcETuGwXsuPo5aPSu-1yi1WFnaWDQrcJseXxOWREaYv0o-9swCZOYYBdNy7G4h6xB6cWxUD7C5Un4lB-5VaBqD0D_hS5Cwh3S5ETKYikag6-tB_sOdG7w-KuONicQ</span><br></pre></td></tr></table></figure><p>取上图的token字段粘贴进登录界面即可。</p><blockquote><p>注意，有的文章会写此方式获取到的token还需要进行base64解密，可能是因为版本原因，本人测试是可以直接复制后进行登录的</p></blockquote><p>登录成功后界面如图</p><p><img data-src="/images/k8s-dashboard-nodes.png" alt="k8s-dashboard-nodes.png"></p><p>终于装好了，踩了不少坑，主要还是不熟悉。后面切记认真仔细阅读官方文档。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p> <a href="https://kubernetes.io/zh/docs/tasks/access-application-cluster/web-ui-dashboard/" target="_blank" rel="noopener">https://kubernetes.io/zh/docs/tasks/access-application-cluster/web-ui-dashboard/</a> </p><p> <a href="https://github.com/kubernetes/dashboard" target="_blank" rel="noopener">https://github.com/kubernetes/dashboard</a> </p><p> <a href="https://github.com/kubernetes-sigs/metrics-server" target="_blank" rel="noopener">https://github.com/kubernetes-sigs/metrics-server</a></p><p> <a href="https://github.com/kubernetes/dashboard/blob/master/docs/user/accessing-dashboard/1.7.x-and-above.md" target="_blank" rel="noopener">https://github.com/kubernetes/dashboard/blob/master/docs/user/accessing-dashboard/1.7.x-and-above.md</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;基于网页查看Kubernetes 用户界面 &lt;/p&gt;
&lt;h2 id=&quot;安装步骤&quot;&gt;&lt;a href=&quot;#安装步骤&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="kubernetes" scheme="http://haoyunlaile.github.io/categories/kubernetes/"/>
    
    
      <category term="kubernetes-dashboard" scheme="http://haoyunlaile.github.io/tags/kubernetes-dashboard/"/>
    
  </entry>
  
  <entry>
    <title>centos7 install docker</title>
    <link href="http://haoyunlaile.github.io/2020/docker/docker-install/"/>
    <id>http://haoyunlaile.github.io/2020/docker/docker-install/</id>
    <published>2020-04-20T16:00:00.000Z</published>
    <updated>2020-04-20T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>安装docker运行环境</p><h2 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h2><ol><li>一台VPS（本文使用<strong>阿里云香港</strong> - centos7.7）</li><li>一台能SSH连接到VPS的本地电脑 （推荐连接工具xshell）</li></ol><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>安装docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">sh get-docker.sh --mirror Aliyun</span><br></pre></td></tr></table></figure><p>配置docker访问加速</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="string">"registry-mirrors"</span>: [</span><br><span class="line">  <span class="string">"https://ze9vyrof.mirror.aliyuncs.com"</span>,</span><br><span class="line">     <span class="string">"https://registry.docker-cn.com"</span>,</span><br><span class="line">     <span class="string">"http://f1361db2.m.daocloud.io"</span>,</span><br><span class="line">     <span class="string">"https://docker.mirrors.ustc.edu.cn"</span></span><br><span class="line"> ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>创建用户并加入docker组</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">useradd</span> <span class="string">-g docker docker</span></span><br><span class="line"><span class="attr">usermod</span> <span class="string">-aG docker docker</span></span><br></pre></td></tr></table></figure><p>加入开启启动、启动docker应用</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="keyword">enable</span> docker</span><br><span class="line">systemctl <span class="keyword">start</span> docker</span><br></pre></td></tr></table></figure><p>测试 Docker 是否安装正确</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br><span class="line"></span><br><span class="line">Unable to find image <span class="string">'hello-world:latest'</span> locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">0e03bdcc26d7: Pulling fs layer </span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">0e03bdcc26d7: Pull complete </span><br><span class="line">Digest: sha256:8e3114318a995a1ee497790535e7b88365222a21771ae7e53687ad76563e8e76</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the <span class="string">"hello-world"</span> image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image <span class="built_in">which</span> runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, <span class="built_in">which</span> sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p> <a href="https://docs.docker.com/engine/install/centos/" target="_blank" rel="noopener">https://docs.docker.com/engine/install/centos/</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;安装docker运行环境&lt;/p&gt;
&lt;h2 id=&quot;准备条件&quot;&gt;&lt;a href=&quot;#准备条件&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="docker" scheme="http://haoyunlaile.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="http://haoyunlaile.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Minikube install</title>
    <link href="http://haoyunlaile.github.io/2020/kubernates/minikube-install/"/>
    <id>http://haoyunlaile.github.io/2020/kubernates/minikube-install/</id>
    <published>2020-04-20T16:00:00.000Z</published>
    <updated>2020-04-20T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>安装kubernetes - Minikube本地环境</p><h2 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h2><ol><li>一台VPS（本文使用<strong>阿里云香港</strong> - centos7.7）- 用国内的服务器折腾的好一会儿都被墙了，先不把时间浪费在这，直接上香港的服务器</li><li>一台能SSH连接到VPS的本地电脑 （推荐连接工具xshell）</li></ol><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>在安装前需要配置国内的镜像源，这里推荐使用阿里云的</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; <span class="regexp">/etc/yum</span>.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=<span class="symbol">https:</span>/<span class="regexp">/mirrors.aliyun.com/kubernetes</span><span class="regexp">/yum/repos</span><span class="regexp">/kubernetes-el7-x86_64/</span></span><br><span class="line">enabled=<span class="number">1</span></span><br><span class="line">gpgcheck=<span class="number">1</span></span><br><span class="line">repo_gpgcheck=<span class="number">1</span></span><br><span class="line">gpgkey=<span class="symbol">https:</span>/<span class="regexp">/mirrors.aliyun.com/kubernetes</span><span class="regexp">/yum/doc</span><span class="regexp">/yum-key.gpg https:/</span><span class="regexp">/mirrors.aliyun.com/kubernetes</span><span class="regexp">/yum/doc</span><span class="regexp">/rpm-package-key.gpg</span></span><br><span class="line"><span class="regexp">EOF</span></span><br></pre></td></tr></table></figure><h3 id="安装kubectl"><a href="#安装kubectl" class="headerlink" title="安装kubectl"></a>安装kubectl</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y kubectl</span><br></pre></td></tr></table></figure><p>  shell 中开启 kubectl 命令自动补全 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install bash-completion -y</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"source &lt;(kubectl completion bash)"</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="安装minukube"><a href="#安装minukube" class="headerlink" title="安装minukube"></a>安装minukube</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 \</span><br><span class="line">  &amp;&amp; chmod +x minikube</span><br><span class="line">mkdir -p /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">install minikube /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">su - docker</span><br></pre></td></tr></table></figure><h3 id="启动本地-Kubernetes-集群、-检查集群的状态"><a href="#启动本地-Kubernetes-集群、-检查集群的状态" class="headerlink" title="启动本地 Kubernetes 集群、 检查集群的状态"></a>启动本地 Kubernetes 集群、 检查集群的状态</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">minikube start</span><br><span class="line"></span><br><span class="line">* minikube v1<span class="number">.9</span><span class="number">.2</span> on Centos <span class="number">7.7</span><span class="number">.1908</span></span><br><span class="line">* Automatically selected the docker driver</span><br><span class="line">* Starting control plane node m01 <span class="keyword">in</span> cluster minikube</span><br><span class="line">* Pulling base image ...</span><br><span class="line">* Downloading Kubernetes v1<span class="number">.18</span><span class="number">.0</span> preload ...</span><br><span class="line">    &gt; preloaded-images-k8s-v2-v1<span class="number">.18</span><span class="number">.0</span>-docker-overlay2-amd64.tar.lz4: <span class="number">542.91</span> MiB</span><br><span class="line">* Creating Kubernetes <span class="keyword">in</span> docker container with (CPUs=<span class="number">2</span>) (<span class="number">4</span> available), Memory=<span class="number">2200</span>MB (<span class="number">7821</span>MB available) ...</span><br><span class="line">* Preparing Kubernetes v1<span class="number">.18</span><span class="number">.0</span> on Docker <span class="number">19.03</span><span class="number">.2</span> ...</span><br><span class="line">  - kubeadm.pod-network-cidr=<span class="number">10.244</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">16</span></span><br><span class="line">* Enabling addons: <span class="keyword">default</span>-storageclass, storage-provisioner</span><br><span class="line">! Enabling <span class="string">'default-storageclass'</span> returned an error: running callbacks: [chmod: chmod deploy/addons/storageclass/storageclass.yaml.tmpl: permission denied]</span><br><span class="line">* Done! kubectl <span class="keyword">is</span> now configured to use <span class="string">"minikube"</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">minikube</span> <span class="string">status</span></span><br><span class="line"></span><br><span class="line"><span class="attr">m01</span></span><br><span class="line"><span class="attr">host</span>: <span class="string">Running</span></span><br><span class="line"><span class="attr">kubelet</span>: <span class="string">Running</span></span><br><span class="line"><span class="attr">apiserver</span>: <span class="string">Running</span></span><br><span class="line"><span class="attr">kubeconfig</span>: <span class="string">Configured</span></span><br></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="keyword">cluster</span>-<span class="keyword">info</span></span><br><span class="line"></span><br><span class="line">Kubernetes master <span class="keyword">is</span> running at https://<span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span>:<span class="number">8443</span></span><br><span class="line">KubeDNS <span class="keyword">is</span> running at https://<span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span>:<span class="number">8443</span>/api/v1/namespaces/kube-<span class="keyword">system</span>/services/kube-dns:dns/proxy</span><br><span class="line"></span><br><span class="line"><span class="keyword">To</span> further <span class="keyword">debug</span> <span class="keyword">and</span> diagnose <span class="keyword">cluster</span> problems, use <span class="string">'kubectl cluster-info dump'</span>.</span><br></pre></td></tr></table></figure><h3 id="开启Kubernetes-dashboard服务"><a href="#开启Kubernetes-dashboard服务" class="headerlink" title="开启Kubernetes dashboard服务"></a>开启Kubernetes dashboard服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">minikube dashboard --url</span><br><span class="line"></span><br><span class="line">* Enabling dashboard ...</span><br><span class="line">* Verifying dashboard health ...</span><br><span class="line">* Launching proxy ...</span><br><span class="line">* Verifying proxy health ...</span><br><span class="line">http://127.0.0.1:33457/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/</span><br></pre></td></tr></table></figure><h3 id="开启kube-proxy端口映射，使其可以远程访问"><a href="#开启kube-proxy端口映射，使其可以远程访问" class="headerlink" title="开启kube-proxy端口映射，使其可以远程访问"></a>开启kube-proxy端口映射，使其可以远程访问</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl<span class="built_in"> proxy </span><span class="attribute">--port</span>=33458 <span class="attribute">--address</span>=<span class="string">'0.0.0.0'</span> <span class="attribute">--accept-hosts</span>=<span class="string">'^.*'</span> &amp;</span><br></pre></td></tr></table></figure><p>这里需要记得去阿里云的安全组配置33458端口外网可以访问</p><p>然后就可以在浏览器访问k8s的dashborad了</p><p><a href="http://127.0.0.1:33458/" target="_blank" rel="noopener">http://127.0.0.1:33458/</a></p><p><img data-src="/images/k8s-dashboard.png" alt="k8s-dashboard"></p><p>清理 minikube 的本地状态 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube delete</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p> <a href="https://juejin.im/post/5b8a4536e51d4538c545645c" target="_blank" rel="noopener">https://juejin.im/post/5b8a4536e51d4538c545645c</a> </p><p> <a href="https://kubernetes.io/zh/docs/tasks/tools/install-minikube/" target="_blank" rel="noopener">https://kubernetes.io/zh/docs/tasks/tools/install-minikube/</a> </p><p> <a href="https://github.com/kubernetes/minikube" target="_blank" rel="noopener">https://github.com/kubernetes/minikube</a> </p><p> <a href="https://minikube.sigs.k8s.io/docs/handbook/dashboard/" target="_blank" rel="noopener">https://minikube.sigs.k8s.io/docs/handbook/dashboard/</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;安装kubernetes - Minikube本地环境&lt;/p&gt;
&lt;h2 id=&quot;准备条件&quot;&gt;&lt;a href=&quot;#准备条件&quot; class=&quot;h
      
    
    </summary>
    
    
      <category term="kubernetes" scheme="http://haoyunlaile.github.io/categories/kubernetes/"/>
    
    
      <category term="kubernetes" scheme="http://haoyunlaile.github.io/tags/kubernetes/"/>
    
      <category term="minikube" scheme="http://haoyunlaile.github.io/tags/minikube/"/>
    
  </entry>
  
  <entry>
    <title>快速部署 Shadowsocks Docker版</title>
    <link href="http://haoyunlaile.github.io/2020/docker/docker-install-shadowsocks-libev/"/>
    <id>http://haoyunlaile.github.io/2020/docker/docker-install-shadowsocks-libev/</id>
    <published>2020-03-05T16:00:00.000Z</published>
    <updated>2020-03-05T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>搭梯子翻墙访问google</p><h2 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h2><ol><li>一台墙外VPS（本文使用腾讯云香港 - centos7.6）</li><li>一台能SSH连接到VPS的本地电脑 （推荐连接工具xshell）</li></ol><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>因为在腾讯上直接安装使用shadowsocks遇到了”connect reset by peer”的问题，在公司访问(可直连境外)是正常的，用4g/家里wifi访问就会出现上述错误，怀疑是腾讯云做了相关网站的流量拦截，故想到这用docker再代理一层。</p><h2 id="服务端安装步骤"><a href="#服务端安装步骤" class="headerlink" title="服务端安装步骤"></a>服务端安装步骤</h2><p>安装docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- get.docker.com | bash</span><br></pre></td></tr></table></figure><p>查看docker的版本信息、加入开启启动、启动docker应用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><p>拉取docker版shadowsocks-libev</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull appso/shadowsocks-libev</span><br></pre></td></tr></table></figure><p>创建shadowssocks配置文件，主要不要变动配置文件目录，默认配置路径为 <strong>/etc/shadowsocks-libev/config.json</strong></p>  <a id="more"></a> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/shadowsocks-libev/</span><br><span class="line">touch /etc/shadowsocks-libev/config.json</span><br><span class="line">vi /etc/shadowsocks-libev/config.json</span><br></pre></td></tr></table></figure><p>config.json 配置内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server"</span>:<span class="string">"0.0.0.0"</span>,</span><br><span class="line">    <span class="attr">"server_port"</span>:<span class="number">443</span>,</span><br><span class="line">    <span class="attr">"password"</span>:<span class="string">"your client connection password"</span>,</span><br><span class="line">    <span class="attr">"timeout"</span>:<span class="number">300</span>,</span><br><span class="line">    <span class="attr">"method"</span>:<span class="string">"aes-256-gcm"</span>,</span><br><span class="line">    <span class="attr">"fast_open"</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"mode"</span>:<span class="string">"tcp_and_udp"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">名称</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">server</td><td align="center">服务端监听地址</td></tr><tr><td align="center">server_port</td><td align="center">客户端用于连接的端口</td></tr><tr><td align="center">password</td><td align="center">客户端用于连接的密码</td></tr><tr><td align="center">timeout</td><td align="center">超时时间</td></tr><tr><td align="center">method</td><td align="center">默认为 <code>aes-256-cfb</code>，参阅 <a href="https://github.com/shadowsocks/shadowsocks/wiki/Encryption" target="_blank" rel="noopener">Encryption</a></td></tr><tr><td align="center">mode</td><td align="center">是否启用 TCP / UDP 转发，参阅 <a href="https://jlk.fjfi.cvut.cz/arch/manpages/man/shadowsocks-libev.8" target="_blank" rel="noopener">shadowsocks-libev(8)</a></td></tr><tr><td align="center">fast_open</td><td align="center">是否启用 <a href="https://github.com/shadowsocks/shadowsocks/wiki/TCP-Fast-Open" target="_blank" rel="noopener">TCP Fast Open</a></td></tr></tbody></table><p>使用docker启动shadowsocks</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 443:443 -p 443:443/udp --name ss-libev -v /etc/shadowsocks-libev:/etc/shadowsocks-libev appso/shadowsocks-libev</span><br></pre></td></tr></table></figure><p>查看容器启动状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@007_centos ~]<span class="comment"># docker ps -as</span></span><br><span class="line">CONTAINER ID        IMAGE                     COMMAND                  CREATED             STATUS                  PORTS                                        NAMES               SIZE</span><br><span class="line">84c3fd45cbea        appso/shadowsocks-libev   <span class="string">"ss-server -c /etc/s…"</span>   2 days ago          Up 2 days               0.0.0.0:443-&gt;443/tcp, 0.0.0.0:443-&gt;443/udp    ss-libev           0B (virtual 120MB)</span><br></pre></td></tr></table></figure><p>查看端口(443)监听状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@007_centos ~]<span class="comment"># netstat -anp | grep 443</span></span><br><span class="line">tcp6       0      0 :::443                  :::*                    LISTEN      13435/docker-proxy  </span><br><span class="line">udp6       0      0 :::443                  :::*                                13446/docker-proxy</span><br></pre></td></tr></table></figure><p>至此，服务端安装完毕。</p><h2 id="windows客户端安装"><a href="#windows客户端安装" class="headerlink" title="windows客户端安装"></a>windows客户端安装</h2><p>打开 <a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-windows/releases</a> 下载最新版本客户端，截止本文编写时间，最新版本为 <a href="https://github.com/shadowsocks/shadowsocks-windows/releases/tag/4.1.9.2" target="_blank" rel="noopener">4.1.9.2</a> ，下载后直接打开对应客户端进行配置,应用确定即可。</p><p><img data-src="/images/shoadowsocks-windows.png" alt="shoadowsocks-windows"></p><p>如果使用chrome代理浏览器流量可以下载SwitchyOmega插件，直接安装到chrome的拓展程序里面即可</p><p>下载地址： <a href="https://github.com/FelisCatus/SwitchyOmega/releases" target="_blank" rel="noopener">https://github.com/FelisCatus/SwitchyOmega/releases</a> </p><p>插件配置如下</p><p><img data-src="/images/shoadowsocks-switchomega.png" alt="shoadowsocks-switchomega"></p><p>一般情况下，至此即可成功代理浏览器流量</p><h2 id="android客户端安装"><a href="#android客户端安装" class="headerlink" title="android客户端安装"></a>android客户端安装</h2><p>打开  <a href="https://github.com/shadowsocks/shadowsocks-android/releases" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-android/releases</a>  下载最新版本客户端，截止本文编写时间，最新版本为  <a href="https://github.com/shadowsocks/shadowsocks-android/releases/tag/v5.0.5" target="_blank" rel="noopener">v5.0.5</a>  ，下载后直接打开对应客户端进行配置,点击那个小飞机即可。</p><p>配置跟windows端配置类似，挺简单的，自行摸索一会儿就可以搞定。</p><p><img data-src="/images/shoadowsocks-android.png" alt="shoadowsocks-android"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://github.com/shadowsocks/shadowsocks-libev" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-libev</a> </li><li><a href="https://github.com/shadowsocks/shadowsocks-android" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-android</a></li><li><a href="https://github.com/shadowsocks/shadowsocks-windows" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-windows</a></li><li><a href="https://hub.docker.com/r/appso/shadowsocks-libev/" target="_blank" rel="noopener">https://hub.docker.com/r/appso/shadowsocks-libev/</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;搭梯子翻墙访问google&lt;/p&gt;
&lt;h2 id=&quot;准备条件&quot;&gt;&lt;a href=&quot;#准备条件&quot; class=&quot;headerlink&quot; title=&quot;准备条件&quot;&gt;&lt;/a&gt;准备条件&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;一台墙外VPS（本文使用腾讯云香港 - centos7.6）&lt;/li&gt;
&lt;li&gt;一台能SSH连接到VPS的本地电脑 （推荐连接工具xshell）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;遇到的问题&quot;&gt;&lt;a href=&quot;#遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;遇到的问题&quot;&gt;&lt;/a&gt;遇到的问题&lt;/h2&gt;&lt;p&gt;因为在腾讯上直接安装使用shadowsocks遇到了”connect reset by peer”的问题，在公司访问(可直连境外)是正常的，用4g/家里wifi访问就会出现上述错误，怀疑是腾讯云做了相关网站的流量拦截，故想到这用docker再代理一层。&lt;/p&gt;
&lt;h2 id=&quot;服务端安装步骤&quot;&gt;&lt;a href=&quot;#服务端安装步骤&quot; class=&quot;headerlink&quot; title=&quot;服务端安装步骤&quot;&gt;&lt;/a&gt;服务端安装步骤&lt;/h2&gt;&lt;p&gt;安装docker&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget -qO- get.docker.com | bash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;查看docker的版本信息、加入开启启动、启动docker应用&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker version&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;systemctl &lt;span class=&quot;built_in&quot;&gt;enable&lt;/span&gt; docker&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;systemctl start docker&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;拉取docker版shadowsocks-libev&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker pull appso/shadowsocks-libev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;创建shadowssocks配置文件，主要不要变动配置文件目录，默认配置路径为 &lt;strong&gt;/etc/shadowsocks-libev/config.json&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker" scheme="http://haoyunlaile.github.io/categories/docker/"/>
    
    
      <category term="shadowsocks" scheme="http://haoyunlaile.github.io/tags/shadowsocks/"/>
    
      <category term="docker" scheme="http://haoyunlaile.github.io/tags/docker/"/>
    
  </entry>
  
</feed>
